
Senior Design Brain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006204  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a8  08006404  08006404  00016404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069ac  080069ac  000201b4  2**0
                  CONTENTS
  4 .ARM          00000008  080069ac  080069ac  000169ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069b4  080069b4  000201b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069b4  080069b4  000169b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069b8  080069b8  000169b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080069bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000074  08006a30  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000114  08006ad0  00020114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006b4  200001b4  08006b70  000201b4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000868  08006b70  00020868  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013807  00000000  00000000  000201e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000026c1  00000000  00000000  000339e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e28  00000000  00000000  000360b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000d20  00000000  00000000  00036ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000285ba  00000000  00000000  00037bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00010f47  00000000  00000000  000601b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fbe24  00000000  00000000  000710f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0016cf1d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004608  00000000  00000000  0016cf70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001b4 	.word	0x200001b4
 800021c:	00000000 	.word	0x00000000
 8000220:	080063ec 	.word	0x080063ec

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b8 	.word	0x200001b8
 800023c:	080063ec 	.word	0x080063ec

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <__io_putchar>:
#endif

extern UART_HandleTypeDef huart3;

PUTCHAR_PROTOTYPE
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005ec:	1d39      	adds	r1, r7, #4
 80005ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005f2:	2201      	movs	r2, #1
 80005f4:	4803      	ldr	r0, [pc, #12]	; (8000604 <__io_putchar+0x20>)
 80005f6:	f002 ffd3 	bl	80035a0 <HAL_UART_Transmit>
  return ch;
 80005fa:	687b      	ldr	r3, [r7, #4]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	200002b8 	.word	0x200002b8

08000608 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart3);
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <__io_getchar+0x38>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2208      	movs	r2, #8
 8000618:	621a      	str	r2, [r3, #32]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800061a:	1df9      	adds	r1, r7, #7
 800061c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000620:	2201      	movs	r2, #1
 8000622:	4807      	ldr	r0, [pc, #28]	; (8000640 <__io_getchar+0x38>)
 8000624:	f003 f83f 	bl	80036a6 <HAL_UART_Receive>
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000628:	1df9      	adds	r1, r7, #7
 800062a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800062e:	2201      	movs	r2, #1
 8000630:	4803      	ldr	r0, [pc, #12]	; (8000640 <__io_getchar+0x38>)
 8000632:	f002 ffb5 	bl	80035a0 <HAL_UART_Transmit>
  return ch;
 8000636:	79fb      	ldrb	r3, [r7, #7]
}
 8000638:	4618      	mov	r0, r3
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	200002b8 	.word	0x200002b8

08000644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b09a      	sub	sp, #104	; 0x68
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064a:	f000 fe08 	bl	800125e <HAL_Init>
  char ch;
  char buffer[100];
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064e:	f000 f919 	bl	8000884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000652:	f000 fa35 	bl	8000ac0 <MX_GPIO_Init>
  MX_ETH_Init();
 8000656:	f000 f987 	bl	8000968 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800065a:	f000 f9d3 	bl	8000a04 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800065e:	f000 fa01 	bl	8000a64 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  //Enables scanf and printf to work
  setvbuf(stdin, NULL, _IONBF, 0);
 8000662:	4b70      	ldr	r3, [pc, #448]	; (8000824 <main+0x1e0>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	6858      	ldr	r0, [r3, #4]
 8000668:	2300      	movs	r3, #0
 800066a:	2202      	movs	r2, #2
 800066c:	2100      	movs	r1, #0
 800066e:	f004 f84f 	bl	8004710 <setvbuf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  printf("\n\n\rWhat would you like to test?");
 8000672:	486d      	ldr	r0, [pc, #436]	; (8000828 <main+0x1e4>)
 8000674:	f004 f81c 	bl	80046b0 <iprintf>
	  printf("\n\rType:"
 8000678:	486c      	ldr	r0, [pc, #432]	; (800082c <main+0x1e8>)
 800067a:	f004 f819 	bl	80046b0 <iprintf>
			 "\n\rb for Buttons"
			 "\n\rc for Current Location"
			 "\n\ro for Output"
			 "\n\rq to Quit"
			 "\n\r: ");
	  scanf("%c", &ch);
 800067e:	f107 0367 	add.w	r3, r7, #103	; 0x67
 8000682:	4619      	mov	r1, r3
 8000684:	486a      	ldr	r0, [pc, #424]	; (8000830 <main+0x1ec>)
 8000686:	f004 f82b 	bl	80046e0 <iscanf>
	  if(ch == 'a'){
 800068a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800068e:	2b61      	cmp	r3, #97	; 0x61
 8000690:	d109      	bne.n	80006a6 <main+0x62>
		 strcpy(buffer, "ALIASES");
 8000692:	463b      	mov	r3, r7
 8000694:	4a67      	ldr	r2, [pc, #412]	; (8000834 <main+0x1f0>)
 8000696:	e892 0003 	ldmia.w	r2, {r0, r1}
 800069a:	e883 0003 	stmia.w	r3, {r0, r1}
		 test_state = ALIASES;
 800069e:	4b66      	ldr	r3, [pc, #408]	; (8000838 <main+0x1f4>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	e043      	b.n	800072e <main+0xea>
	  }
	  else if(ch == 'b'){
 80006a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80006aa:	2b62      	cmp	r3, #98	; 0x62
 80006ac:	d109      	bne.n	80006c2 <main+0x7e>
		 strcpy(buffer, "BUTTONS");
 80006ae:	463b      	mov	r3, r7
 80006b0:	4a62      	ldr	r2, [pc, #392]	; (800083c <main+0x1f8>)
 80006b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006b6:	e883 0003 	stmia.w	r3, {r0, r1}
		 test_state = BUTTONS;
 80006ba:	4b5f      	ldr	r3, [pc, #380]	; (8000838 <main+0x1f4>)
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	e035      	b.n	800072e <main+0xea>
	  }
	  else if(ch == 'c'){
 80006c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80006c6:	2b63      	cmp	r3, #99	; 0x63
 80006c8:	d109      	bne.n	80006de <main+0x9a>
		 strcpy(buffer, "CUR_LOC");
 80006ca:	463b      	mov	r3, r7
 80006cc:	4a5c      	ldr	r2, [pc, #368]	; (8000840 <main+0x1fc>)
 80006ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006d2:	e883 0003 	stmia.w	r3, {r0, r1}
		 test_state = CUR_LOC;
 80006d6:	4b58      	ldr	r3, [pc, #352]	; (8000838 <main+0x1f4>)
 80006d8:	2203      	movs	r2, #3
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	e027      	b.n	800072e <main+0xea>
	  }
	  else if(ch == 'o'){
 80006de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80006e2:	2b6f      	cmp	r3, #111	; 0x6f
 80006e4:	d109      	bne.n	80006fa <main+0xb6>
		 strcpy(buffer, "OUTPUTS");
 80006e6:	463b      	mov	r3, r7
 80006e8:	4a56      	ldr	r2, [pc, #344]	; (8000844 <main+0x200>)
 80006ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ee:	e883 0003 	stmia.w	r3, {r0, r1}
		 test_state = OUTPUTS;
 80006f2:	4b51      	ldr	r3, [pc, #324]	; (8000838 <main+0x1f4>)
 80006f4:	2202      	movs	r2, #2
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	e019      	b.n	800072e <main+0xea>
	  }
	  else if(ch == 'q'){
 80006fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80006fe:	2b71      	cmp	r3, #113	; 0x71
 8000700:	d10a      	bne.n	8000718 <main+0xd4>
		 strcpy(buffer, "QUIT");
 8000702:	463b      	mov	r3, r7
 8000704:	4a50      	ldr	r2, [pc, #320]	; (8000848 <main+0x204>)
 8000706:	e892 0003 	ldmia.w	r2, {r0, r1}
 800070a:	6018      	str	r0, [r3, #0]
 800070c:	3304      	adds	r3, #4
 800070e:	7019      	strb	r1, [r3, #0]
		 test_state = QUIT;
 8000710:	4b49      	ldr	r3, [pc, #292]	; (8000838 <main+0x1f4>)
 8000712:	2204      	movs	r2, #4
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	e00a      	b.n	800072e <main+0xea>
	  }
	  else{
		 strcpy(buffer, "NONE");
 8000718:	463b      	mov	r3, r7
 800071a:	4a4c      	ldr	r2, [pc, #304]	; (800084c <main+0x208>)
 800071c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000720:	6018      	str	r0, [r3, #0]
 8000722:	3304      	adds	r3, #4
 8000724:	7019      	strb	r1, [r3, #0]
		 test_state = -1;
 8000726:	4b44      	ldr	r3, [pc, #272]	; (8000838 <main+0x1f4>)
 8000728:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800072c:	601a      	str	r2, [r3, #0]
	  }

	  printf("\n\rYou selected %s", buffer);
 800072e:	463b      	mov	r3, r7
 8000730:	4619      	mov	r1, r3
 8000732:	4847      	ldr	r0, [pc, #284]	; (8000850 <main+0x20c>)
 8000734:	f003 ffbc 	bl	80046b0 <iprintf>

	  if(test_state == ALIASES){
 8000738:	4b3f      	ldr	r3, [pc, #252]	; (8000838 <main+0x1f4>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2b01      	cmp	r3, #1
 800073e:	d122      	bne.n	8000786 <main+0x142>
		  do{
			  printf("\n\n\rTo test ALIASES, please type in the name of a location you would like to navigate to.");
 8000740:	4844      	ldr	r0, [pc, #272]	; (8000854 <main+0x210>)
 8000742:	f003 ffb5 	bl	80046b0 <iprintf>
			  printf("\n\rWe will do our best to match it to an actual building\n\r");
 8000746:	4844      	ldr	r0, [pc, #272]	; (8000858 <main+0x214>)
 8000748:	f003 ffb2 	bl	80046b0 <iprintf>
			  scanf("%99s", buffer);
 800074c:	463b      	mov	r3, r7
 800074e:	4619      	mov	r1, r3
 8000750:	4842      	ldr	r0, [pc, #264]	; (800085c <main+0x218>)
 8000752:	f003 ffc5 	bl	80046e0 <iscanf>
			  test_aliasing(buffer);
 8000756:	463b      	mov	r3, r7
 8000758:	4618      	mov	r0, r3
 800075a:	f000 fd33 	bl	80011c4 <test_aliasing>
			  scanf("%c", &ch);
 800075e:	f107 0367 	add.w	r3, r7, #103	; 0x67
 8000762:	4619      	mov	r1, r3
 8000764:	4832      	ldr	r0, [pc, #200]	; (8000830 <main+0x1ec>)
 8000766:	f003 ffbb 	bl	80046e0 <iscanf>
			  printf("\n\rPress r to try again or any other key to exit: ");
 800076a:	483d      	ldr	r0, [pc, #244]	; (8000860 <main+0x21c>)
 800076c:	f003 ffa0 	bl	80046b0 <iprintf>
			  scanf("%c", &ch);
 8000770:	f107 0367 	add.w	r3, r7, #103	; 0x67
 8000774:	4619      	mov	r1, r3
 8000776:	482e      	ldr	r0, [pc, #184]	; (8000830 <main+0x1ec>)
 8000778:	f003 ffb2 	bl	80046e0 <iscanf>
		  }while(ch == 'r');
 800077c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000780:	2b72      	cmp	r3, #114	; 0x72
 8000782:	d0dd      	beq.n	8000740 <main+0xfc>
 8000784:	e775      	b.n	8000672 <main+0x2e>
	  }
	  else if(test_state == BUTTONS){
 8000786:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <main+0x1f4>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d10c      	bne.n	80007a8 <main+0x164>
		  printf("\n\n\rTo test BUTTONS, please press the user button.");
 800078e:	4835      	ldr	r0, [pc, #212]	; (8000864 <main+0x220>)
 8000790:	f003 ff8e 	bl	80046b0 <iprintf>
		  printf("\n\rPress any key to exit");
 8000794:	4834      	ldr	r0, [pc, #208]	; (8000868 <main+0x224>)
 8000796:	f003 ff8b 	bl	80046b0 <iprintf>
		  scanf("%c", &ch);
 800079a:	f107 0367 	add.w	r3, r7, #103	; 0x67
 800079e:	4619      	mov	r1, r3
 80007a0:	4823      	ldr	r0, [pc, #140]	; (8000830 <main+0x1ec>)
 80007a2:	f003 ff9d 	bl	80046e0 <iscanf>
 80007a6:	e764      	b.n	8000672 <main+0x2e>
	  }
	  else if(test_state == CUR_LOC){
 80007a8:	4b23      	ldr	r3, [pc, #140]	; (8000838 <main+0x1f4>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b03      	cmp	r3, #3
 80007ae:	d10c      	bne.n	80007ca <main+0x186>
		  printf("\n\n\rTo test CUR_LOC, please press any key to display the current location.");
 80007b0:	482e      	ldr	r0, [pc, #184]	; (800086c <main+0x228>)
 80007b2:	f003 ff7d 	bl	80046b0 <iprintf>
		  scanf("%c", &ch);
 80007b6:	f107 0367 	add.w	r3, r7, #103	; 0x67
 80007ba:	4619      	mov	r1, r3
 80007bc:	481c      	ldr	r0, [pc, #112]	; (8000830 <main+0x1ec>)
 80007be:	f003 ff8f 	bl	80046e0 <iscanf>
		  printf("\n\rYour current location is the Electrical Engineering Building");
 80007c2:	482b      	ldr	r0, [pc, #172]	; (8000870 <main+0x22c>)
 80007c4:	f003 ff74 	bl	80046b0 <iprintf>
 80007c8:	e753      	b.n	8000672 <main+0x2e>
	  }
	  else if(test_state == OUTPUTS){
 80007ca:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <main+0x1f4>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2b02      	cmp	r3, #2
 80007d0:	d117      	bne.n	8000802 <main+0x1be>
		  printf("\n\n\rTo test OUTPUTS, please press any key.");
 80007d2:	4828      	ldr	r0, [pc, #160]	; (8000874 <main+0x230>)
 80007d4:	f003 ff6c 	bl	80046b0 <iprintf>
		  scanf("%c", &ch);
 80007d8:	f107 0367 	add.w	r3, r7, #103	; 0x67
 80007dc:	4619      	mov	r1, r3
 80007de:	4814      	ldr	r0, [pc, #80]	; (8000830 <main+0x1ec>)
 80007e0:	f003 ff7e 	bl	80046e0 <iscanf>
		  printf("\n\rNow playing sample output.");
 80007e4:	4824      	ldr	r0, [pc, #144]	; (8000878 <main+0x234>)
 80007e6:	f003 ff63 	bl	80046b0 <iprintf>
		  test_output();
 80007ea:	f000 fd07 	bl	80011fc <test_output>
		  printf("\n\rPress any key to exit");
 80007ee:	481e      	ldr	r0, [pc, #120]	; (8000868 <main+0x224>)
 80007f0:	f003 ff5e 	bl	80046b0 <iprintf>
		  scanf("%c", &ch);
 80007f4:	f107 0367 	add.w	r3, r7, #103	; 0x67
 80007f8:	4619      	mov	r1, r3
 80007fa:	480d      	ldr	r0, [pc, #52]	; (8000830 <main+0x1ec>)
 80007fc:	f003 ff70 	bl	80046e0 <iscanf>
 8000800:	e737      	b.n	8000672 <main+0x2e>
	  }
	  else if(test_state == QUIT){
 8000802:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <main+0x1f4>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b04      	cmp	r3, #4
 8000808:	d003      	beq.n	8000812 <main+0x1ce>
		  break;
	  }
	  else{
		  printf("\n\n\rSorry, what you selected isn't an option. Please try again.");
 800080a:	481c      	ldr	r0, [pc, #112]	; (800087c <main+0x238>)
 800080c:	f003 ff50 	bl	80046b0 <iprintf>
	  printf("\n\n\rWhat would you like to test?");
 8000810:	e72f      	b.n	8000672 <main+0x2e>
		  break;
 8000812:	bf00      	nop
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }

  printf("\n\rExiting Brain Subsytem Tests\n\r");
 8000814:	481a      	ldr	r0, [pc, #104]	; (8000880 <main+0x23c>)
 8000816:	f003 ff4b 	bl	80046b0 <iprintf>
 800081a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800081c:	4618      	mov	r0, r3
 800081e:	3768      	adds	r7, #104	; 0x68
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000010 	.word	0x20000010
 8000828:	08006404 	.word	0x08006404
 800082c:	08006424 	.word	0x08006424
 8000830:	08006480 	.word	0x08006480
 8000834:	08006484 	.word	0x08006484
 8000838:	20000000 	.word	0x20000000
 800083c:	0800648c 	.word	0x0800648c
 8000840:	08006494 	.word	0x08006494
 8000844:	0800649c 	.word	0x0800649c
 8000848:	080064a4 	.word	0x080064a4
 800084c:	080064ac 	.word	0x080064ac
 8000850:	080064b4 	.word	0x080064b4
 8000854:	080064c8 	.word	0x080064c8
 8000858:	08006524 	.word	0x08006524
 800085c:	08006560 	.word	0x08006560
 8000860:	08006568 	.word	0x08006568
 8000864:	0800659c 	.word	0x0800659c
 8000868:	080065d0 	.word	0x080065d0
 800086c:	080065e8 	.word	0x080065e8
 8000870:	08006634 	.word	0x08006634
 8000874:	08006674 	.word	0x08006674
 8000878:	080066a0 	.word	0x080066a0
 800087c:	080066c0 	.word	0x080066c0
 8000880:	08006700 	.word	0x08006700

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b094      	sub	sp, #80	; 0x50
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	2234      	movs	r2, #52	; 0x34
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f003 ff04 	bl	80046a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	f107 0308 	add.w	r3, r7, #8
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008a8:	f001 fcd0 	bl	800224c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ac:	4b2c      	ldr	r3, [pc, #176]	; (8000960 <SystemClock_Config+0xdc>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b0:	4a2b      	ldr	r2, [pc, #172]	; (8000960 <SystemClock_Config+0xdc>)
 80008b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b6:	6413      	str	r3, [r2, #64]	; 0x40
 80008b8:	4b29      	ldr	r3, [pc, #164]	; (8000960 <SystemClock_Config+0xdc>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008c4:	4b27      	ldr	r3, [pc, #156]	; (8000964 <SystemClock_Config+0xe0>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008cc:	4a25      	ldr	r2, [pc, #148]	; (8000964 <SystemClock_Config+0xe0>)
 80008ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d2:	6013      	str	r3, [r2, #0]
 80008d4:	4b23      	ldr	r3, [pc, #140]	; (8000964 <SystemClock_Config+0xe0>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008dc:	603b      	str	r3, [r7, #0]
 80008de:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e0:	2301      	movs	r3, #1
 80008e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008e4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ea:	2302      	movs	r3, #2
 80008ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008f4:	2304      	movs	r3, #4
 80008f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80008f8:	2360      	movs	r3, #96	; 0x60
 80008fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008fc:	2302      	movs	r3, #2
 80008fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000900:	2304      	movs	r3, #4
 8000902:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000904:	2302      	movs	r3, #2
 8000906:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4618      	mov	r0, r3
 800090e:	f001 fcfd 	bl	800230c <HAL_RCC_OscConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000918:	f000 f9b0 	bl	8000c7c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800091c:	f001 fca6 	bl	800226c <HAL_PWREx_EnableOverDrive>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000926:	f000 f9a9 	bl	8000c7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092a:	230f      	movs	r3, #15
 800092c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800092e:	2302      	movs	r3, #2
 8000930:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800093a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000940:	f107 0308 	add.w	r3, r7, #8
 8000944:	2103      	movs	r1, #3
 8000946:	4618      	mov	r0, r3
 8000948:	f001 ff8e 	bl	8002868 <HAL_RCC_ClockConfig>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000952:	f000 f993 	bl	8000c7c <Error_Handler>
  }
}
 8000956:	bf00      	nop
 8000958:	3750      	adds	r7, #80	; 0x50
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800
 8000964:	40007000 	.word	0x40007000

08000968 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800096c:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <MX_ETH_Init+0x84>)
 800096e:	4a20      	ldr	r2, [pc, #128]	; (80009f0 <MX_ETH_Init+0x88>)
 8000970:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000972:	4b20      	ldr	r3, [pc, #128]	; (80009f4 <MX_ETH_Init+0x8c>)
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000978:	4b1e      	ldr	r3, [pc, #120]	; (80009f4 <MX_ETH_Init+0x8c>)
 800097a:	2280      	movs	r2, #128	; 0x80
 800097c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800097e:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <MX_ETH_Init+0x8c>)
 8000980:	22e1      	movs	r2, #225	; 0xe1
 8000982:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000984:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <MX_ETH_Init+0x8c>)
 8000986:	2200      	movs	r2, #0
 8000988:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800098a:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <MX_ETH_Init+0x8c>)
 800098c:	2200      	movs	r2, #0
 800098e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000990:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <MX_ETH_Init+0x8c>)
 8000992:	2200      	movs	r2, #0
 8000994:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <MX_ETH_Init+0x84>)
 8000998:	4a16      	ldr	r2, [pc, #88]	; (80009f4 <MX_ETH_Init+0x8c>)
 800099a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800099c:	4b13      	ldr	r3, [pc, #76]	; (80009ec <MX_ETH_Init+0x84>)
 800099e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009a2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_ETH_Init+0x84>)
 80009a6:	4a14      	ldr	r2, [pc, #80]	; (80009f8 <MX_ETH_Init+0x90>)
 80009a8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <MX_ETH_Init+0x84>)
 80009ac:	4a13      	ldr	r2, [pc, #76]	; (80009fc <MX_ETH_Init+0x94>)
 80009ae:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80009b0:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_ETH_Init+0x84>)
 80009b2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80009b6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009b8:	480c      	ldr	r0, [pc, #48]	; (80009ec <MX_ETH_Init+0x84>)
 80009ba:	f000 fde3 	bl	8001584 <HAL_ETH_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80009c4:	f000 f95a 	bl	8000c7c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009c8:	2238      	movs	r2, #56	; 0x38
 80009ca:	2100      	movs	r1, #0
 80009cc:	480c      	ldr	r0, [pc, #48]	; (8000a00 <MX_ETH_Init+0x98>)
 80009ce:	f003 fe67 	bl	80046a0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <MX_ETH_Init+0x98>)
 80009d4:	2221      	movs	r2, #33	; 0x21
 80009d6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_ETH_Init+0x98>)
 80009da:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80009de:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009e0:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <MX_ETH_Init+0x98>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000208 	.word	0x20000208
 80009f0:	40028000 	.word	0x40028000
 80009f4:	20000848 	.word	0x20000848
 80009f8:	20000114 	.word	0x20000114
 80009fc:	20000074 	.word	0x20000074
 8000a00:	200001d0 	.word	0x200001d0

08000a04 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a08:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <MX_USART3_UART_Init+0x58>)
 8000a0a:	4a15      	ldr	r2, [pc, #84]	; (8000a60 <MX_USART3_UART_Init+0x5c>)
 8000a0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a0e:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <MX_USART3_UART_Init+0x58>)
 8000a10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <MX_USART3_UART_Init+0x58>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <MX_USART3_UART_Init+0x58>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <MX_USART3_UART_Init+0x58>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <MX_USART3_UART_Init+0x58>)
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <MX_USART3_UART_Init+0x58>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a34:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <MX_USART3_UART_Init+0x58>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a3a:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <MX_USART3_UART_Init+0x58>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <MX_USART3_UART_Init+0x58>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_USART3_UART_Init+0x58>)
 8000a48:	f002 fd5c 	bl	8003504 <HAL_UART_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a52:	f000 f913 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200002b8 	.word	0x200002b8
 8000a60:	40004800 	.word	0x40004800

08000a64 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a68:	4b14      	ldr	r3, [pc, #80]	; (8000abc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a6a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a6e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a72:	2206      	movs	r2, #6
 8000a74:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a76:	4b11      	ldr	r3, [pc, #68]	; (8000abc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a78:	2202      	movs	r2, #2
 8000a7a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a84:	2202      	movs	r2, #2
 8000a86:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a94:	4b09      	ldr	r3, [pc, #36]	; (8000abc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a9a:	4b08      	ldr	r3, [pc, #32]	; (8000abc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000aa6:	4805      	ldr	r0, [pc, #20]	; (8000abc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa8:	f001 fa88 	bl	8001fbc <HAL_PCD_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000ab2:	f000 f8e3 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000340 	.word	0x20000340

08000ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08c      	sub	sp, #48	; 0x30
 8000ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad6:	4b4b      	ldr	r3, [pc, #300]	; (8000c04 <MX_GPIO_Init+0x144>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a4a      	ldr	r2, [pc, #296]	; (8000c04 <MX_GPIO_Init+0x144>)
 8000adc:	f043 0304 	orr.w	r3, r3, #4
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b48      	ldr	r3, [pc, #288]	; (8000c04 <MX_GPIO_Init+0x144>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0304 	and.w	r3, r3, #4
 8000aea:	61bb      	str	r3, [r7, #24]
 8000aec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aee:	4b45      	ldr	r3, [pc, #276]	; (8000c04 <MX_GPIO_Init+0x144>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a44      	ldr	r2, [pc, #272]	; (8000c04 <MX_GPIO_Init+0x144>)
 8000af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b42      	ldr	r3, [pc, #264]	; (8000c04 <MX_GPIO_Init+0x144>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	4b3f      	ldr	r3, [pc, #252]	; (8000c04 <MX_GPIO_Init+0x144>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a3e      	ldr	r2, [pc, #248]	; (8000c04 <MX_GPIO_Init+0x144>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b3c      	ldr	r3, [pc, #240]	; (8000c04 <MX_GPIO_Init+0x144>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1e:	4b39      	ldr	r3, [pc, #228]	; (8000c04 <MX_GPIO_Init+0x144>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a38      	ldr	r2, [pc, #224]	; (8000c04 <MX_GPIO_Init+0x144>)
 8000b24:	f043 0302 	orr.w	r3, r3, #2
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b36      	ldr	r3, [pc, #216]	; (8000c04 <MX_GPIO_Init+0x144>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0302 	and.w	r3, r3, #2
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b36:	4b33      	ldr	r3, [pc, #204]	; (8000c04 <MX_GPIO_Init+0x144>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a32      	ldr	r2, [pc, #200]	; (8000c04 <MX_GPIO_Init+0x144>)
 8000b3c:	f043 0308 	orr.w	r3, r3, #8
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b30      	ldr	r3, [pc, #192]	; (8000c04 <MX_GPIO_Init+0x144>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0308 	and.w	r3, r3, #8
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b4e:	4b2d      	ldr	r3, [pc, #180]	; (8000c04 <MX_GPIO_Init+0x144>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a2c      	ldr	r2, [pc, #176]	; (8000c04 <MX_GPIO_Init+0x144>)
 8000b54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b2a      	ldr	r3, [pc, #168]	; (8000c04 <MX_GPIO_Init+0x144>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b6c:	4826      	ldr	r0, [pc, #152]	; (8000c08 <MX_GPIO_Init+0x148>)
 8000b6e:	f001 f9f3 	bl	8001f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2140      	movs	r1, #64	; 0x40
 8000b76:	4825      	ldr	r0, [pc, #148]	; (8000c0c <MX_GPIO_Init+0x14c>)
 8000b78:	f001 f9ee 	bl	8001f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b82:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000b86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b8c:	f107 031c 	add.w	r3, r7, #28
 8000b90:	4619      	mov	r1, r3
 8000b92:	481f      	ldr	r0, [pc, #124]	; (8000c10 <MX_GPIO_Init+0x150>)
 8000b94:	f001 f81c 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b98:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4815      	ldr	r0, [pc, #84]	; (8000c08 <MX_GPIO_Init+0x148>)
 8000bb2:	f001 f80d 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bb6:	2340      	movs	r3, #64	; 0x40
 8000bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bc6:	f107 031c 	add.w	r3, r7, #28
 8000bca:	4619      	mov	r1, r3
 8000bcc:	480f      	ldr	r0, [pc, #60]	; (8000c0c <MX_GPIO_Init+0x14c>)
 8000bce:	f000 ffff 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bd2:	2380      	movs	r3, #128	; 0x80
 8000bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	4619      	mov	r1, r3
 8000be4:	4809      	ldr	r0, [pc, #36]	; (8000c0c <MX_GPIO_Init+0x14c>)
 8000be6:	f000 fff3 	bl	8001bd0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2100      	movs	r1, #0
 8000bee:	2028      	movs	r0, #40	; 0x28
 8000bf0:	f000 fc91 	bl	8001516 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bf4:	2028      	movs	r0, #40	; 0x28
 8000bf6:	f000 fcaa 	bl	800154e <HAL_NVIC_EnableIRQ>

}
 8000bfa:	bf00      	nop
 8000bfc:	3730      	adds	r7, #48	; 0x30
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020400 	.word	0x40020400
 8000c0c:	40021800 	.word	0x40021800
 8000c10:	40020800 	.word	0x40020800

08000c14 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	80fb      	strh	r3, [r7, #6]
	if(test_state == BUTTONS && GPIO_Pin == GPIO_PIN_13)
 8000c1e:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_GPIO_EXTI_Callback+0x54>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d11c      	bne.n	8000c60 <HAL_GPIO_EXTI_Callback+0x4c>
 8000c26:	88fb      	ldrh	r3, [r7, #6]
 8000c28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c2c:	d118      	bne.n	8000c60 <HAL_GPIO_EXTI_Callback+0x4c>
	{
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET){
 8000c2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c32:	480e      	ldr	r0, [pc, #56]	; (8000c6c <HAL_GPIO_EXTI_Callback+0x58>)
 8000c34:	f001 f978 	bl	8001f28 <HAL_GPIO_ReadPin>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d108      	bne.n	8000c50 <HAL_GPIO_EXTI_Callback+0x3c>
		  printf("\nProcessing Input");
 8000c3e:	480c      	ldr	r0, [pc, #48]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000c40:	f003 fd36 	bl	80046b0 <iprintf>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000c44:	2201      	movs	r2, #1
 8000c46:	2180      	movs	r1, #128	; 0x80
 8000c48:	480a      	ldr	r0, [pc, #40]	; (8000c74 <HAL_GPIO_EXTI_Callback+0x60>)
 8000c4a:	f001 f985 	bl	8001f58 <HAL_GPIO_WritePin>
	  else{
		  printf("\r\nListening to Input");
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
	  }
	}
}
 8000c4e:	e007      	b.n	8000c60 <HAL_GPIO_EXTI_Callback+0x4c>
		  printf("\r\nListening to Input");
 8000c50:	4809      	ldr	r0, [pc, #36]	; (8000c78 <HAL_GPIO_EXTI_Callback+0x64>)
 8000c52:	f003 fd2d 	bl	80046b0 <iprintf>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2180      	movs	r1, #128	; 0x80
 8000c5a:	4806      	ldr	r0, [pc, #24]	; (8000c74 <HAL_GPIO_EXTI_Callback+0x60>)
 8000c5c:	f001 f97c 	bl	8001f58 <HAL_GPIO_WritePin>
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000000 	.word	0x20000000
 8000c6c:	40020800 	.word	0x40020800
 8000c70:	08006724 	.word	0x08006724
 8000c74:	40020400 	.word	0x40020400
 8000c78:	08006738 	.word	0x08006738

08000c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c80:	b672      	cpsid	i
}
 8000c82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <Error_Handler+0x8>
	...

08000c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <HAL_MspInit+0x44>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	4a0e      	ldr	r2, [pc, #56]	; (8000ccc <HAL_MspInit+0x44>)
 8000c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c98:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <HAL_MspInit+0x44>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <HAL_MspInit+0x44>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000caa:	4a08      	ldr	r2, [pc, #32]	; (8000ccc <HAL_MspInit+0x44>)
 8000cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_MspInit+0x44>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cba:	603b      	str	r3, [r7, #0]
 8000cbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	40023800 	.word	0x40023800

08000cd0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08e      	sub	sp, #56	; 0x38
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a4e      	ldr	r2, [pc, #312]	; (8000e28 <HAL_ETH_MspInit+0x158>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	f040 8096 	bne.w	8000e20 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000cf4:	4b4d      	ldr	r3, [pc, #308]	; (8000e2c <HAL_ETH_MspInit+0x15c>)
 8000cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf8:	4a4c      	ldr	r2, [pc, #304]	; (8000e2c <HAL_ETH_MspInit+0x15c>)
 8000cfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cfe:	6313      	str	r3, [r2, #48]	; 0x30
 8000d00:	4b4a      	ldr	r3, [pc, #296]	; (8000e2c <HAL_ETH_MspInit+0x15c>)
 8000d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d08:	623b      	str	r3, [r7, #32]
 8000d0a:	6a3b      	ldr	r3, [r7, #32]
 8000d0c:	4b47      	ldr	r3, [pc, #284]	; (8000e2c <HAL_ETH_MspInit+0x15c>)
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d10:	4a46      	ldr	r2, [pc, #280]	; (8000e2c <HAL_ETH_MspInit+0x15c>)
 8000d12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d16:	6313      	str	r3, [r2, #48]	; 0x30
 8000d18:	4b44      	ldr	r3, [pc, #272]	; (8000e2c <HAL_ETH_MspInit+0x15c>)
 8000d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d20:	61fb      	str	r3, [r7, #28]
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	4b41      	ldr	r3, [pc, #260]	; (8000e2c <HAL_ETH_MspInit+0x15c>)
 8000d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d28:	4a40      	ldr	r2, [pc, #256]	; (8000e2c <HAL_ETH_MspInit+0x15c>)
 8000d2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000d2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d30:	4b3e      	ldr	r3, [pc, #248]	; (8000e2c <HAL_ETH_MspInit+0x15c>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000d38:	61bb      	str	r3, [r7, #24]
 8000d3a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3c:	4b3b      	ldr	r3, [pc, #236]	; (8000e2c <HAL_ETH_MspInit+0x15c>)
 8000d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d40:	4a3a      	ldr	r2, [pc, #232]	; (8000e2c <HAL_ETH_MspInit+0x15c>)
 8000d42:	f043 0304 	orr.w	r3, r3, #4
 8000d46:	6313      	str	r3, [r2, #48]	; 0x30
 8000d48:	4b38      	ldr	r3, [pc, #224]	; (8000e2c <HAL_ETH_MspInit+0x15c>)
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4c:	f003 0304 	and.w	r3, r3, #4
 8000d50:	617b      	str	r3, [r7, #20]
 8000d52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d54:	4b35      	ldr	r3, [pc, #212]	; (8000e2c <HAL_ETH_MspInit+0x15c>)
 8000d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d58:	4a34      	ldr	r2, [pc, #208]	; (8000e2c <HAL_ETH_MspInit+0x15c>)
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d60:	4b32      	ldr	r3, [pc, #200]	; (8000e2c <HAL_ETH_MspInit+0x15c>)
 8000d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6c:	4b2f      	ldr	r3, [pc, #188]	; (8000e2c <HAL_ETH_MspInit+0x15c>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d70:	4a2e      	ldr	r2, [pc, #184]	; (8000e2c <HAL_ETH_MspInit+0x15c>)
 8000d72:	f043 0302 	orr.w	r3, r3, #2
 8000d76:	6313      	str	r3, [r2, #48]	; 0x30
 8000d78:	4b2c      	ldr	r3, [pc, #176]	; (8000e2c <HAL_ETH_MspInit+0x15c>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7c:	f003 0302 	and.w	r3, r3, #2
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d84:	4b29      	ldr	r3, [pc, #164]	; (8000e2c <HAL_ETH_MspInit+0x15c>)
 8000d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d88:	4a28      	ldr	r2, [pc, #160]	; (8000e2c <HAL_ETH_MspInit+0x15c>)
 8000d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d90:	4b26      	ldr	r3, [pc, #152]	; (8000e2c <HAL_ETH_MspInit+0x15c>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d9c:	2332      	movs	r3, #50	; 0x32
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da8:	2303      	movs	r3, #3
 8000daa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dac:	230b      	movs	r3, #11
 8000dae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db4:	4619      	mov	r1, r3
 8000db6:	481e      	ldr	r0, [pc, #120]	; (8000e30 <HAL_ETH_MspInit+0x160>)
 8000db8:	f000 ff0a 	bl	8001bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000dbc:	2386      	movs	r3, #134	; 0x86
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dcc:	230b      	movs	r3, #11
 8000dce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4817      	ldr	r0, [pc, #92]	; (8000e34 <HAL_ETH_MspInit+0x164>)
 8000dd8:	f000 fefa 	bl	8001bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ddc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dea:	2303      	movs	r3, #3
 8000dec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dee:	230b      	movs	r3, #11
 8000df0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df6:	4619      	mov	r1, r3
 8000df8:	480f      	ldr	r0, [pc, #60]	; (8000e38 <HAL_ETH_MspInit+0x168>)
 8000dfa:	f000 fee9 	bl	8001bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000dfe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e04:	2302      	movs	r3, #2
 8000e06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e10:	230b      	movs	r3, #11
 8000e12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4808      	ldr	r0, [pc, #32]	; (8000e3c <HAL_ETH_MspInit+0x16c>)
 8000e1c:	f000 fed8 	bl	8001bd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000e20:	bf00      	nop
 8000e22:	3738      	adds	r7, #56	; 0x38
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40028000 	.word	0x40028000
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40020800 	.word	0x40020800
 8000e34:	40020000 	.word	0x40020000
 8000e38:	40020400 	.word	0x40020400
 8000e3c:	40021800 	.word	0x40021800

08000e40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b0ae      	sub	sp, #184	; 0xb8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2290      	movs	r2, #144	; 0x90
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f003 fc1d 	bl	80046a0 <memset>
  if(huart->Instance==USART3)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a22      	ldr	r2, [pc, #136]	; (8000ef4 <HAL_UART_MspInit+0xb4>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d13c      	bne.n	8000eea <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e74:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e76:	2300      	movs	r3, #0
 8000e78:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f001 ff18 	bl	8002cb4 <HAL_RCCEx_PeriphCLKConfig>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e8a:	f7ff fef7 	bl	8000c7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e8e:	4b1a      	ldr	r3, [pc, #104]	; (8000ef8 <HAL_UART_MspInit+0xb8>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	4a19      	ldr	r2, [pc, #100]	; (8000ef8 <HAL_UART_MspInit+0xb8>)
 8000e94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e98:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9a:	4b17      	ldr	r3, [pc, #92]	; (8000ef8 <HAL_UART_MspInit+0xb8>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ea6:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <HAL_UART_MspInit+0xb8>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a13      	ldr	r2, [pc, #76]	; (8000ef8 <HAL_UART_MspInit+0xb8>)
 8000eac:	f043 0308 	orr.w	r3, r3, #8
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <HAL_UART_MspInit+0xb8>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0308 	and.w	r3, r3, #8
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ebe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ec2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ed8:	2307      	movs	r3, #7
 8000eda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ede:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <HAL_UART_MspInit+0xbc>)
 8000ee6:	f000 fe73 	bl	8001bd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000eea:	bf00      	nop
 8000eec:	37b8      	adds	r7, #184	; 0xb8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40004800 	.word	0x40004800
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020c00 	.word	0x40020c00

08000f00 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b0ae      	sub	sp, #184	; 0xb8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	2290      	movs	r2, #144	; 0x90
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f003 fbbd 	bl	80046a0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f2e:	d159      	bne.n	8000fe4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f34:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	4618      	mov	r0, r3
 8000f42:	f001 feb7 	bl	8002cb4 <HAL_RCCEx_PeriphCLKConfig>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000f4c:	f7ff fe96 	bl	8000c7c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f50:	4b26      	ldr	r3, [pc, #152]	; (8000fec <HAL_PCD_MspInit+0xec>)
 8000f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f54:	4a25      	ldr	r2, [pc, #148]	; (8000fec <HAL_PCD_MspInit+0xec>)
 8000f56:	f043 0301 	orr.w	r3, r3, #1
 8000f5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5c:	4b23      	ldr	r3, [pc, #140]	; (8000fec <HAL_PCD_MspInit+0xec>)
 8000f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f68:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f82:	230a      	movs	r3, #10
 8000f84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f88:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4818      	ldr	r0, [pc, #96]	; (8000ff0 <HAL_PCD_MspInit+0xf0>)
 8000f90:	f000 fe1e 	bl	8001bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000fa8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fac:	4619      	mov	r1, r3
 8000fae:	4810      	ldr	r0, [pc, #64]	; (8000ff0 <HAL_PCD_MspInit+0xf0>)
 8000fb0:	f000 fe0e 	bl	8001bd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fb4:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <HAL_PCD_MspInit+0xec>)
 8000fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fb8:	4a0c      	ldr	r2, [pc, #48]	; (8000fec <HAL_PCD_MspInit+0xec>)
 8000fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fbe:	6353      	str	r3, [r2, #52]	; 0x34
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_PCD_MspInit+0xec>)
 8000fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <HAL_PCD_MspInit+0xec>)
 8000fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd0:	4a06      	ldr	r2, [pc, #24]	; (8000fec <HAL_PCD_MspInit+0xec>)
 8000fd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd6:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <HAL_PCD_MspInit+0xec>)
 8000fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000fe4:	bf00      	nop
 8000fe6:	37b8      	adds	r7, #184	; 0xb8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020000 	.word	0x40020000

08000ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <NMI_Handler+0x4>

08000ffa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ffe:	e7fe      	b.n	8000ffe <HardFault_Handler+0x4>

08001000 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001004:	e7fe      	b.n	8001004 <MemManage_Handler+0x4>

08001006 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800100a:	e7fe      	b.n	800100a <BusFault_Handler+0x4>

0800100c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <UsageFault_Handler+0x4>

08001012 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001040:	f000 f94a 	bl	80012d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}

08001048 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 800104c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001050:	f000 ff9c 	bl	8001f8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}

08001058 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	e00a      	b.n	8001080 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800106a:	f7ff facd 	bl	8000608 <__io_getchar>
 800106e:	4601      	mov	r1, r0
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	1c5a      	adds	r2, r3, #1
 8001074:	60ba      	str	r2, [r7, #8]
 8001076:	b2ca      	uxtb	r2, r1
 8001078:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	3301      	adds	r3, #1
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	697a      	ldr	r2, [r7, #20]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	429a      	cmp	r2, r3
 8001086:	dbf0      	blt.n	800106a <_read+0x12>
  }

  return len;
 8001088:	687b      	ldr	r3, [r7, #4]
}
 800108a:	4618      	mov	r0, r3
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b086      	sub	sp, #24
 8001096:	af00      	add	r7, sp, #0
 8001098:	60f8      	str	r0, [r7, #12]
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
 80010a2:	e009      	b.n	80010b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	1c5a      	adds	r2, r3, #1
 80010a8:	60ba      	str	r2, [r7, #8]
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fa99 	bl	80005e4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	3301      	adds	r3, #1
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	697a      	ldr	r2, [r7, #20]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	429a      	cmp	r2, r3
 80010be:	dbf1      	blt.n	80010a4 <_write+0x12>
  }
  return len;
 80010c0:	687b      	ldr	r3, [r7, #4]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <_close>:

int _close(int file)
{
 80010ca:	b480      	push	{r7}
 80010cc:	b083      	sub	sp, #12
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010f2:	605a      	str	r2, [r3, #4]
  return 0;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <_isatty>:

int _isatty(int file)
{
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800110a:	2301      	movs	r3, #1
}
 800110c:	4618      	mov	r0, r3
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3714      	adds	r7, #20
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
	...

08001134 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800113c:	4a14      	ldr	r2, [pc, #80]	; (8001190 <_sbrk+0x5c>)
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <_sbrk+0x60>)
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001148:	4b13      	ldr	r3, [pc, #76]	; (8001198 <_sbrk+0x64>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d102      	bne.n	8001156 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <_sbrk+0x64>)
 8001152:	4a12      	ldr	r2, [pc, #72]	; (800119c <_sbrk+0x68>)
 8001154:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001156:	4b10      	ldr	r3, [pc, #64]	; (8001198 <_sbrk+0x64>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	429a      	cmp	r2, r3
 8001162:	d207      	bcs.n	8001174 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001164:	f003 fa72 	bl	800464c <__errno>
 8001168:	4603      	mov	r3, r0
 800116a:	220c      	movs	r2, #12
 800116c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800116e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001172:	e009      	b.n	8001188 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <_sbrk+0x64>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800117a:	4b07      	ldr	r3, [pc, #28]	; (8001198 <_sbrk+0x64>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4413      	add	r3, r2
 8001182:	4a05      	ldr	r2, [pc, #20]	; (8001198 <_sbrk+0x64>)
 8001184:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001186:	68fb      	ldr	r3, [r7, #12]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20080000 	.word	0x20080000
 8001194:	00000400 	.word	0x00000400
 8001198:	20000850 	.word	0x20000850
 800119c:	20000868 	.word	0x20000868

080011a0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <SystemInit+0x20>)
 80011a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011aa:	4a05      	ldr	r2, [pc, #20]	; (80011c0 <SystemInit+0x20>)
 80011ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <test_aliasing>:
#include "test.h"
#include "stdio.h"

void test_buttons(){}
void test_aliasing(char buffer[100]){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	printf("Testing to see if aliases can be converted to actual locations\n\r");
 80011cc:	4807      	ldr	r0, [pc, #28]	; (80011ec <test_aliasing+0x28>)
 80011ce:	f003 fa6f 	bl	80046b0 <iprintf>
	printf("Input alias: %s\n\r", buffer);
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	4806      	ldr	r0, [pc, #24]	; (80011f0 <test_aliasing+0x2c>)
 80011d6:	f003 fa6b 	bl	80046b0 <iprintf>
	printf("Our best guess for %s is %s!\n\r", buffer, "Armstrong");
 80011da:	4a06      	ldr	r2, [pc, #24]	; (80011f4 <test_aliasing+0x30>)
 80011dc:	6879      	ldr	r1, [r7, #4]
 80011de:	4806      	ldr	r0, [pc, #24]	; (80011f8 <test_aliasing+0x34>)
 80011e0:	f003 fa66 	bl	80046b0 <iprintf>
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	08006750 	.word	0x08006750
 80011f0:	08006794 	.word	0x08006794
 80011f4:	080067a8 	.word	0x080067a8
 80011f8:	080067b4 	.word	0x080067b4

080011fc <test_output>:
void test_output(){
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0

}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
	...

0800120c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800120c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001244 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001210:	480d      	ldr	r0, [pc, #52]	; (8001248 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001212:	490e      	ldr	r1, [pc, #56]	; (800124c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001214:	4a0e      	ldr	r2, [pc, #56]	; (8001250 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001218:	e002      	b.n	8001220 <LoopCopyDataInit>

0800121a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800121c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121e:	3304      	adds	r3, #4

08001220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001224:	d3f9      	bcc.n	800121a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001226:	4a0b      	ldr	r2, [pc, #44]	; (8001254 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001228:	4c0b      	ldr	r4, [pc, #44]	; (8001258 <LoopFillZerobss+0x26>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800122c:	e001      	b.n	8001232 <LoopFillZerobss>

0800122e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001230:	3204      	adds	r2, #4

08001232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001234:	d3fb      	bcc.n	800122e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001236:	f7ff ffb3 	bl	80011a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800123a:	f003 fa0d 	bl	8004658 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800123e:	f7ff fa01 	bl	8000644 <main>
  bx  lr    
 8001242:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001244:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800124c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001250:	080069bc 	.word	0x080069bc
  ldr r2, =_sbss
 8001254:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 8001258:	20000868 	.word	0x20000868

0800125c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800125c:	e7fe      	b.n	800125c <ADC_IRQHandler>

0800125e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001262:	2003      	movs	r0, #3
 8001264:	f000 f94c 	bl	8001500 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001268:	2000      	movs	r0, #0
 800126a:	f000 f805 	bl	8001278 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800126e:	f7ff fd0b 	bl	8000c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001272:	2300      	movs	r3, #0
}
 8001274:	4618      	mov	r0, r3
 8001276:	bd80      	pop	{r7, pc}

08001278 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <HAL_InitTick+0x54>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_InitTick+0x58>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	4619      	mov	r1, r3
 800128a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001292:	fbb2 f3f3 	udiv	r3, r2, r3
 8001296:	4618      	mov	r0, r3
 8001298:	f000 f967 	bl	800156a <HAL_SYSTICK_Config>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e00e      	b.n	80012c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b0f      	cmp	r3, #15
 80012aa:	d80a      	bhi.n	80012c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ac:	2200      	movs	r2, #0
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012b4:	f000 f92f 	bl	8001516 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012b8:	4a06      	ldr	r2, [pc, #24]	; (80012d4 <HAL_InitTick+0x5c>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012be:	2300      	movs	r3, #0
 80012c0:	e000      	b.n	80012c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000004 	.word	0x20000004
 80012d0:	2000000c 	.word	0x2000000c
 80012d4:	20000008 	.word	0x20000008

080012d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_IncTick+0x20>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_IncTick+0x24>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4413      	add	r3, r2
 80012e8:	4a04      	ldr	r2, [pc, #16]	; (80012fc <HAL_IncTick+0x24>)
 80012ea:	6013      	str	r3, [r2, #0]
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	2000000c 	.word	0x2000000c
 80012fc:	20000854 	.word	0x20000854

08001300 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return uwTick;
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <HAL_GetTick+0x14>)
 8001306:	681b      	ldr	r3, [r3, #0]
}
 8001308:	4618      	mov	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	20000854 	.word	0x20000854

08001318 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001320:	f7ff ffee 	bl	8001300 <HAL_GetTick>
 8001324:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001330:	d005      	beq.n	800133e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001332:	4b0a      	ldr	r3, [pc, #40]	; (800135c <HAL_Delay+0x44>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	461a      	mov	r2, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4413      	add	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800133e:	bf00      	nop
 8001340:	f7ff ffde 	bl	8001300 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	429a      	cmp	r2, r3
 800134e:	d8f7      	bhi.n	8001340 <HAL_Delay+0x28>
  {
  }
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	2000000c 	.word	0x2000000c

08001360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001370:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800137c:	4013      	ands	r3, r2
 800137e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <__NVIC_SetPriorityGrouping+0x44>)
 800138a:	4313      	orrs	r3, r2
 800138c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800138e:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	60d3      	str	r3, [r2, #12]
}
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	e000ed00 	.word	0xe000ed00
 80013a4:	05fa0000 	.word	0x05fa0000

080013a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013ac:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <__NVIC_GetPriorityGrouping+0x18>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	0a1b      	lsrs	r3, r3, #8
 80013b2:	f003 0307 	and.w	r3, r3, #7
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	db0b      	blt.n	80013ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	f003 021f 	and.w	r2, r3, #31
 80013dc:	4907      	ldr	r1, [pc, #28]	; (80013fc <__NVIC_EnableIRQ+0x38>)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	095b      	lsrs	r3, r3, #5
 80013e4:	2001      	movs	r0, #1
 80013e6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000e100 	.word	0xe000e100

08001400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	6039      	str	r1, [r7, #0]
 800140a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001410:	2b00      	cmp	r3, #0
 8001412:	db0a      	blt.n	800142a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	b2da      	uxtb	r2, r3
 8001418:	490c      	ldr	r1, [pc, #48]	; (800144c <__NVIC_SetPriority+0x4c>)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	0112      	lsls	r2, r2, #4
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	440b      	add	r3, r1
 8001424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001428:	e00a      	b.n	8001440 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4908      	ldr	r1, [pc, #32]	; (8001450 <__NVIC_SetPriority+0x50>)
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	3b04      	subs	r3, #4
 8001438:	0112      	lsls	r2, r2, #4
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	440b      	add	r3, r1
 800143e:	761a      	strb	r2, [r3, #24]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000e100 	.word	0xe000e100
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001454:	b480      	push	{r7}
 8001456:	b089      	sub	sp, #36	; 0x24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f1c3 0307 	rsb	r3, r3, #7
 800146e:	2b04      	cmp	r3, #4
 8001470:	bf28      	it	cs
 8001472:	2304      	movcs	r3, #4
 8001474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3304      	adds	r3, #4
 800147a:	2b06      	cmp	r3, #6
 800147c:	d902      	bls.n	8001484 <NVIC_EncodePriority+0x30>
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3b03      	subs	r3, #3
 8001482:	e000      	b.n	8001486 <NVIC_EncodePriority+0x32>
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001488:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43da      	mvns	r2, r3
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	401a      	ands	r2, r3
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800149c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	fa01 f303 	lsl.w	r3, r1, r3
 80014a6:	43d9      	mvns	r1, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	4313      	orrs	r3, r2
         );
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3724      	adds	r7, #36	; 0x24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
	...

080014bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014cc:	d301      	bcc.n	80014d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ce:	2301      	movs	r3, #1
 80014d0:	e00f      	b.n	80014f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014d2:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <SysTick_Config+0x40>)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014da:	210f      	movs	r1, #15
 80014dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014e0:	f7ff ff8e 	bl	8001400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <SysTick_Config+0x40>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ea:	4b04      	ldr	r3, [pc, #16]	; (80014fc <SysTick_Config+0x40>)
 80014ec:	2207      	movs	r2, #7
 80014ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	e000e010 	.word	0xe000e010

08001500 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff ff29 	bl	8001360 <__NVIC_SetPriorityGrouping>
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001516:	b580      	push	{r7, lr}
 8001518:	b086      	sub	sp, #24
 800151a:	af00      	add	r7, sp, #0
 800151c:	4603      	mov	r3, r0
 800151e:	60b9      	str	r1, [r7, #8]
 8001520:	607a      	str	r2, [r7, #4]
 8001522:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001528:	f7ff ff3e 	bl	80013a8 <__NVIC_GetPriorityGrouping>
 800152c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	68b9      	ldr	r1, [r7, #8]
 8001532:	6978      	ldr	r0, [r7, #20]
 8001534:	f7ff ff8e 	bl	8001454 <NVIC_EncodePriority>
 8001538:	4602      	mov	r2, r0
 800153a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ff5d 	bl	8001400 <__NVIC_SetPriority>
}
 8001546:	bf00      	nop
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	4603      	mov	r3, r0
 8001556:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff31 	bl	80013c4 <__NVIC_EnableIRQ>
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff ffa2 	bl	80014bc <SysTick_Config>
 8001578:	4603      	mov	r3, r0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e06a      	b.n	800166c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800159c:	2b00      	cmp	r3, #0
 800159e:	d106      	bne.n	80015ae <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2223      	movs	r2, #35	; 0x23
 80015a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff fb91 	bl	8000cd0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ae:	4b31      	ldr	r3, [pc, #196]	; (8001674 <HAL_ETH_Init+0xf0>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	4a30      	ldr	r2, [pc, #192]	; (8001674 <HAL_ETH_Init+0xf0>)
 80015b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ba:	4b2e      	ldr	r3, [pc, #184]	; (8001674 <HAL_ETH_Init+0xf0>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80015c6:	4b2c      	ldr	r3, [pc, #176]	; (8001678 <HAL_ETH_Init+0xf4>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	4a2b      	ldr	r2, [pc, #172]	; (8001678 <HAL_ETH_Init+0xf4>)
 80015cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80015d0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80015d2:	4b29      	ldr	r3, [pc, #164]	; (8001678 <HAL_ETH_Init+0xf4>)
 80015d4:	685a      	ldr	r2, [r3, #4]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	4927      	ldr	r1, [pc, #156]	; (8001678 <HAL_ETH_Init+0xf4>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80015e0:	4b25      	ldr	r3, [pc, #148]	; (8001678 <HAL_ETH_Init+0xf4>)
 80015e2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	6812      	ldr	r2, [r2, #0]
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015fa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015fc:	f7ff fe80 	bl	8001300 <HAL_GetTick>
 8001600:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001602:	e011      	b.n	8001628 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001604:	f7ff fe7c 	bl	8001300 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001612:	d909      	bls.n	8001628 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2204      	movs	r2, #4
 8001618:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	22e0      	movs	r2, #224	; 0xe0
 8001620:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e021      	b.n	800166c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1e4      	bne.n	8001604 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 f958 	bl	80018f0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f000 f9ff 	bl	8001a44 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 fa55 	bl	8001af6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	461a      	mov	r2, r3
 8001652:	2100      	movs	r1, #0
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f000 f9bd 	bl	80019d4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2210      	movs	r2, #16
 8001666:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40023800 	.word	0x40023800
 8001678:	40013800 	.word	0x40013800

0800167c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	4b51      	ldr	r3, [pc, #324]	; (80017d8 <ETH_SetMACConfig+0x15c>)
 8001692:	4013      	ands	r3, r2
 8001694:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	7c1b      	ldrb	r3, [r3, #16]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d102      	bne.n	80016a4 <ETH_SetMACConfig+0x28>
 800169e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80016a2:	e000      	b.n	80016a6 <ETH_SetMACConfig+0x2a>
 80016a4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	7c5b      	ldrb	r3, [r3, #17]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d102      	bne.n	80016b4 <ETH_SetMACConfig+0x38>
 80016ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016b2:	e000      	b.n	80016b6 <ETH_SetMACConfig+0x3a>
 80016b4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80016b6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80016bc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	7fdb      	ldrb	r3, [r3, #31]
 80016c2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80016c4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80016ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	7f92      	ldrb	r2, [r2, #30]
 80016d0:	2a00      	cmp	r2, #0
 80016d2:	d102      	bne.n	80016da <ETH_SetMACConfig+0x5e>
 80016d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016d8:	e000      	b.n	80016dc <ETH_SetMACConfig+0x60>
 80016da:	2200      	movs	r2, #0
                        macconf->Speed |
 80016dc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	7f1b      	ldrb	r3, [r3, #28]
 80016e2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80016e4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80016ea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	791b      	ldrb	r3, [r3, #4]
 80016f0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80016f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80016fa:	2a00      	cmp	r2, #0
 80016fc:	d102      	bne.n	8001704 <ETH_SetMACConfig+0x88>
 80016fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001702:	e000      	b.n	8001706 <ETH_SetMACConfig+0x8a>
 8001704:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001706:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	7bdb      	ldrb	r3, [r3, #15]
 800170c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800170e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001714:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800171c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800171e:	4313      	orrs	r3, r2
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	4313      	orrs	r3, r2
 8001724:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001736:	2001      	movs	r0, #1
 8001738:	f7ff fdee 	bl	8001318 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001752:	4013      	ands	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800175a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001762:	2a00      	cmp	r2, #0
 8001764:	d101      	bne.n	800176a <ETH_SetMACConfig+0xee>
 8001766:	2280      	movs	r2, #128	; 0x80
 8001768:	e000      	b.n	800176c <ETH_SetMACConfig+0xf0>
 800176a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800176c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001772:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800177a:	2a01      	cmp	r2, #1
 800177c:	d101      	bne.n	8001782 <ETH_SetMACConfig+0x106>
 800177e:	2208      	movs	r2, #8
 8001780:	e000      	b.n	8001784 <ETH_SetMACConfig+0x108>
 8001782:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001784:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800178c:	2a01      	cmp	r2, #1
 800178e:	d101      	bne.n	8001794 <ETH_SetMACConfig+0x118>
 8001790:	2204      	movs	r2, #4
 8001792:	e000      	b.n	8001796 <ETH_SetMACConfig+0x11a>
 8001794:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001796:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800179e:	2a01      	cmp	r2, #1
 80017a0:	d101      	bne.n	80017a6 <ETH_SetMACConfig+0x12a>
 80017a2:	2202      	movs	r2, #2
 80017a4:	e000      	b.n	80017a8 <ETH_SetMACConfig+0x12c>
 80017a6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80017a8:	4313      	orrs	r3, r2
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80017c0:	2001      	movs	r0, #1
 80017c2:	f7ff fda9 	bl	8001318 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	619a      	str	r2, [r3, #24]
}
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	ff20810f 	.word	0xff20810f

080017dc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	4b3d      	ldr	r3, [pc, #244]	; (80018ec <ETH_SetDMAConfig+0x110>)
 80017f6:	4013      	ands	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	7b1b      	ldrb	r3, [r3, #12]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d102      	bne.n	8001808 <ETH_SetDMAConfig+0x2c>
 8001802:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001806:	e000      	b.n	800180a <ETH_SetDMAConfig+0x2e>
 8001808:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	7b5b      	ldrb	r3, [r3, #13]
 800180e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001810:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	7f52      	ldrb	r2, [r2, #29]
 8001816:	2a00      	cmp	r2, #0
 8001818:	d102      	bne.n	8001820 <ETH_SetDMAConfig+0x44>
 800181a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800181e:	e000      	b.n	8001822 <ETH_SetDMAConfig+0x46>
 8001820:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001822:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	7b9b      	ldrb	r3, [r3, #14]
 8001828:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800182a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001830:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	7f1b      	ldrb	r3, [r3, #28]
 8001836:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001838:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	7f9b      	ldrb	r3, [r3, #30]
 800183e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001840:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001846:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800184e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001850:	4313      	orrs	r3, r2
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	4313      	orrs	r3, r2
 8001856:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001860:	461a      	mov	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001872:	2001      	movs	r0, #1
 8001874:	f7ff fd50 	bl	8001318 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001880:	461a      	mov	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	791b      	ldrb	r3, [r3, #4]
 800188a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001890:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001896:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800189c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018a4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80018a6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ac:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80018ae:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80018b4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	6812      	ldr	r2, [r2, #0]
 80018ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018c2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80018d0:	2001      	movs	r0, #1
 80018d2:	f7ff fd21 	bl	8001318 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018de:	461a      	mov	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6013      	str	r3, [r2, #0]
}
 80018e4:	bf00      	nop
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	f8de3f23 	.word	0xf8de3f23

080018f0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b0a6      	sub	sp, #152	; 0x98
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80018f8:	2301      	movs	r3, #1
 80018fa:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80018fe:	2301      	movs	r3, #1
 8001900:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001904:	2300      	movs	r3, #0
 8001906:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001908:	2300      	movs	r3, #0
 800190a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800190e:	2301      	movs	r3, #1
 8001910:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001914:	2300      	movs	r3, #0
 8001916:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800191a:	2301      	movs	r3, #1
 800191c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001920:	2300      	movs	r3, #0
 8001922:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001926:	2300      	movs	r3, #0
 8001928:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800192c:	2300      	movs	r3, #0
 800192e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001930:	2300      	movs	r3, #0
 8001932:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001936:	2300      	movs	r3, #0
 8001938:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800193a:	2300      	movs	r3, #0
 800193c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001940:	2300      	movs	r3, #0
 8001942:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001946:	2300      	movs	r3, #0
 8001948:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800194c:	2300      	movs	r3, #0
 800194e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001952:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001956:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001958:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800195c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800195e:	2300      	movs	r3, #0
 8001960:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001964:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001968:	4619      	mov	r1, r3
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff fe86 	bl	800167c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001970:	2301      	movs	r3, #1
 8001972:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001974:	2301      	movs	r3, #1
 8001976:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001978:	2301      	movs	r3, #1
 800197a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800197e:	2301      	movs	r3, #1
 8001980:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001986:	2300      	movs	r3, #0
 8001988:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800198c:	2300      	movs	r3, #0
 800198e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001992:	2300      	movs	r3, #0
 8001994:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001996:	2301      	movs	r3, #1
 8001998:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800199c:	2301      	movs	r3, #1
 800199e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80019a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019a4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80019a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019aa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80019ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019b0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80019b2:	2301      	movs	r3, #1
 80019b4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80019bc:	2300      	movs	r3, #0
 80019be:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80019c0:	f107 0308 	add.w	r3, r7, #8
 80019c4:	4619      	mov	r1, r3
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff ff08 	bl	80017dc <ETH_SetDMAConfig>
}
 80019cc:	bf00      	nop
 80019ce:	3798      	adds	r7, #152	; 0x98
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b087      	sub	sp, #28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3305      	adds	r3, #5
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	021b      	lsls	r3, r3, #8
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	3204      	adds	r2, #4
 80019ec:	7812      	ldrb	r2, [r2, #0]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <ETH_MACAddressConfig+0x68>)
 80019f6:	4413      	add	r3, r2
 80019f8:	461a      	mov	r2, r3
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	3303      	adds	r3, #3
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	061a      	lsls	r2, r3, #24
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3302      	adds	r3, #2
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	041b      	lsls	r3, r3, #16
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3301      	adds	r3, #1
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	021b      	lsls	r3, r3, #8
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	7812      	ldrb	r2, [r2, #0]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001a22:	68ba      	ldr	r2, [r7, #8]
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <ETH_MACAddressConfig+0x6c>)
 8001a26:	4413      	add	r3, r2
 8001a28:	461a      	mov	r2, r3
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	6013      	str	r3, [r2, #0]
}
 8001a2e:	bf00      	nop
 8001a30:	371c      	adds	r7, #28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40028040 	.word	0x40028040
 8001a40:	40028044 	.word	0x40028044

08001a44 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	e03e      	b.n	8001ad0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68d9      	ldr	r1, [r3, #12]
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	440b      	add	r3, r1
 8001a62:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001a7c:	68b9      	ldr	r1, [r7, #8]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	3206      	adds	r2, #6
 8001a84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d80c      	bhi.n	8001ab4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68d9      	ldr	r1, [r3, #12]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	1c5a      	adds	r2, r3, #1
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	440b      	add	r3, r1
 8001aac:	461a      	mov	r2, r3
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	e004      	b.n	8001abe <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	3301      	adds	r3, #1
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2b03      	cmp	r3, #3
 8001ad4:	d9bd      	bls.n	8001a52 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ae8:	611a      	str	r2, [r3, #16]
}
 8001aea:	bf00      	nop
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b085      	sub	sp, #20
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	e046      	b.n	8001b92 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6919      	ldr	r1, [r3, #16]
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	440b      	add	r3, r1
 8001b14:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	2200      	movs	r2, #0
 8001b32:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	2200      	movs	r2, #0
 8001b38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001b40:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001b48:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001b56:	68b9      	ldr	r1, [r7, #8]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	3212      	adds	r2, #18
 8001b5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d80c      	bhi.n	8001b82 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6919      	ldr	r1, [r3, #16]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	440b      	add	r3, r1
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	60da      	str	r2, [r3, #12]
 8001b80:	e004      	b.n	8001b8c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	461a      	mov	r2, r3
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	d9b5      	bls.n	8001b04 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691a      	ldr	r2, [r3, #16]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bc2:	60da      	str	r2, [r3, #12]
}
 8001bc4:	bf00      	nop
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b089      	sub	sp, #36	; 0x24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001be2:	2300      	movs	r3, #0
 8001be4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
 8001bee:	e175      	b.n	8001edc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	4013      	ands	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	f040 8164 	bne.w	8001ed6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d005      	beq.n	8001c26 <HAL_GPIO_Init+0x56>
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d130      	bne.n	8001c88 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	2203      	movs	r2, #3
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	68da      	ldr	r2, [r3, #12]
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	091b      	lsrs	r3, r3, #4
 8001c72:	f003 0201 	and.w	r2, r3, #1
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	2b03      	cmp	r3, #3
 8001c92:	d017      	beq.n	8001cc4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	2203      	movs	r2, #3
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d123      	bne.n	8001d18 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	08da      	lsrs	r2, r3, #3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3208      	adds	r2, #8
 8001cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	220f      	movs	r2, #15
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	691a      	ldr	r2, [r3, #16]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	08da      	lsrs	r2, r3, #3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	3208      	adds	r2, #8
 8001d12:	69b9      	ldr	r1, [r7, #24]
 8001d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	2203      	movs	r2, #3
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 0203 	and.w	r2, r3, #3
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 80be 	beq.w	8001ed6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5a:	4b66      	ldr	r3, [pc, #408]	; (8001ef4 <HAL_GPIO_Init+0x324>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5e:	4a65      	ldr	r2, [pc, #404]	; (8001ef4 <HAL_GPIO_Init+0x324>)
 8001d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d64:	6453      	str	r3, [r2, #68]	; 0x44
 8001d66:	4b63      	ldr	r3, [pc, #396]	; (8001ef4 <HAL_GPIO_Init+0x324>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d72:	4a61      	ldr	r2, [pc, #388]	; (8001ef8 <HAL_GPIO_Init+0x328>)
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	089b      	lsrs	r3, r3, #2
 8001d78:	3302      	adds	r3, #2
 8001d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	220f      	movs	r2, #15
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4013      	ands	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a58      	ldr	r2, [pc, #352]	; (8001efc <HAL_GPIO_Init+0x32c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d037      	beq.n	8001e0e <HAL_GPIO_Init+0x23e>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a57      	ldr	r2, [pc, #348]	; (8001f00 <HAL_GPIO_Init+0x330>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d031      	beq.n	8001e0a <HAL_GPIO_Init+0x23a>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a56      	ldr	r2, [pc, #344]	; (8001f04 <HAL_GPIO_Init+0x334>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d02b      	beq.n	8001e06 <HAL_GPIO_Init+0x236>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a55      	ldr	r2, [pc, #340]	; (8001f08 <HAL_GPIO_Init+0x338>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d025      	beq.n	8001e02 <HAL_GPIO_Init+0x232>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a54      	ldr	r2, [pc, #336]	; (8001f0c <HAL_GPIO_Init+0x33c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d01f      	beq.n	8001dfe <HAL_GPIO_Init+0x22e>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a53      	ldr	r2, [pc, #332]	; (8001f10 <HAL_GPIO_Init+0x340>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d019      	beq.n	8001dfa <HAL_GPIO_Init+0x22a>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a52      	ldr	r2, [pc, #328]	; (8001f14 <HAL_GPIO_Init+0x344>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d013      	beq.n	8001df6 <HAL_GPIO_Init+0x226>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a51      	ldr	r2, [pc, #324]	; (8001f18 <HAL_GPIO_Init+0x348>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d00d      	beq.n	8001df2 <HAL_GPIO_Init+0x222>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a50      	ldr	r2, [pc, #320]	; (8001f1c <HAL_GPIO_Init+0x34c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d007      	beq.n	8001dee <HAL_GPIO_Init+0x21e>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a4f      	ldr	r2, [pc, #316]	; (8001f20 <HAL_GPIO_Init+0x350>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d101      	bne.n	8001dea <HAL_GPIO_Init+0x21a>
 8001de6:	2309      	movs	r3, #9
 8001de8:	e012      	b.n	8001e10 <HAL_GPIO_Init+0x240>
 8001dea:	230a      	movs	r3, #10
 8001dec:	e010      	b.n	8001e10 <HAL_GPIO_Init+0x240>
 8001dee:	2308      	movs	r3, #8
 8001df0:	e00e      	b.n	8001e10 <HAL_GPIO_Init+0x240>
 8001df2:	2307      	movs	r3, #7
 8001df4:	e00c      	b.n	8001e10 <HAL_GPIO_Init+0x240>
 8001df6:	2306      	movs	r3, #6
 8001df8:	e00a      	b.n	8001e10 <HAL_GPIO_Init+0x240>
 8001dfa:	2305      	movs	r3, #5
 8001dfc:	e008      	b.n	8001e10 <HAL_GPIO_Init+0x240>
 8001dfe:	2304      	movs	r3, #4
 8001e00:	e006      	b.n	8001e10 <HAL_GPIO_Init+0x240>
 8001e02:	2303      	movs	r3, #3
 8001e04:	e004      	b.n	8001e10 <HAL_GPIO_Init+0x240>
 8001e06:	2302      	movs	r3, #2
 8001e08:	e002      	b.n	8001e10 <HAL_GPIO_Init+0x240>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e000      	b.n	8001e10 <HAL_GPIO_Init+0x240>
 8001e0e:	2300      	movs	r3, #0
 8001e10:	69fa      	ldr	r2, [r7, #28]
 8001e12:	f002 0203 	and.w	r2, r2, #3
 8001e16:	0092      	lsls	r2, r2, #2
 8001e18:	4093      	lsls	r3, r2
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e20:	4935      	ldr	r1, [pc, #212]	; (8001ef8 <HAL_GPIO_Init+0x328>)
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	089b      	lsrs	r3, r3, #2
 8001e26:	3302      	adds	r3, #2
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e2e:	4b3d      	ldr	r3, [pc, #244]	; (8001f24 <HAL_GPIO_Init+0x354>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	43db      	mvns	r3, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e52:	4a34      	ldr	r2, [pc, #208]	; (8001f24 <HAL_GPIO_Init+0x354>)
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e58:	4b32      	ldr	r3, [pc, #200]	; (8001f24 <HAL_GPIO_Init+0x354>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	43db      	mvns	r3, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4013      	ands	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e7c:	4a29      	ldr	r2, [pc, #164]	; (8001f24 <HAL_GPIO_Init+0x354>)
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e82:	4b28      	ldr	r3, [pc, #160]	; (8001f24 <HAL_GPIO_Init+0x354>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ea6:	4a1f      	ldr	r2, [pc, #124]	; (8001f24 <HAL_GPIO_Init+0x354>)
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eac:	4b1d      	ldr	r3, [pc, #116]	; (8001f24 <HAL_GPIO_Init+0x354>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ed0:	4a14      	ldr	r2, [pc, #80]	; (8001f24 <HAL_GPIO_Init+0x354>)
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	61fb      	str	r3, [r7, #28]
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	2b0f      	cmp	r3, #15
 8001ee0:	f67f ae86 	bls.w	8001bf0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ee4:	bf00      	nop
 8001ee6:	bf00      	nop
 8001ee8:	3724      	adds	r7, #36	; 0x24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40013800 	.word	0x40013800
 8001efc:	40020000 	.word	0x40020000
 8001f00:	40020400 	.word	0x40020400
 8001f04:	40020800 	.word	0x40020800
 8001f08:	40020c00 	.word	0x40020c00
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40021400 	.word	0x40021400
 8001f14:	40021800 	.word	0x40021800
 8001f18:	40021c00 	.word	0x40021c00
 8001f1c:	40022000 	.word	0x40022000
 8001f20:	40022400 	.word	0x40022400
 8001f24:	40013c00 	.word	0x40013c00

08001f28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	460b      	mov	r3, r1
 8001f32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	691a      	ldr	r2, [r3, #16]
 8001f38:	887b      	ldrh	r3, [r7, #2]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d002      	beq.n	8001f46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f40:	2301      	movs	r3, #1
 8001f42:	73fb      	strb	r3, [r7, #15]
 8001f44:	e001      	b.n	8001f4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f46:	2300      	movs	r3, #0
 8001f48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	460b      	mov	r3, r1
 8001f62:	807b      	strh	r3, [r7, #2]
 8001f64:	4613      	mov	r3, r2
 8001f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f68:	787b      	ldrb	r3, [r7, #1]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f6e:	887a      	ldrh	r2, [r7, #2]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001f74:	e003      	b.n	8001f7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f76:	887b      	ldrh	r3, [r7, #2]
 8001f78:	041a      	lsls	r2, r3, #16
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	619a      	str	r2, [r3, #24]
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f96:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f98:	695a      	ldr	r2, [r3, #20]
 8001f9a:	88fb      	ldrh	r3, [r7, #6]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d006      	beq.n	8001fb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fa2:	4a05      	ldr	r2, [pc, #20]	; (8001fb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fa4:	88fb      	ldrh	r3, [r7, #6]
 8001fa6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fa8:	88fb      	ldrh	r3, [r7, #6]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe fe32 	bl	8000c14 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40013c00 	.word	0x40013c00

08001fbc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fbe:	b08f      	sub	sp, #60	; 0x3c
 8001fc0:	af0a      	add	r7, sp, #40	; 0x28
 8001fc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e116      	b.n	80021fc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d106      	bne.n	8001fee <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7fe ff89 	bl	8000f00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2203      	movs	r2, #3
 8001ff2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d102      	bne.n	8002008 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f002 f881 	bl	8004114 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	603b      	str	r3, [r7, #0]
 8002018:	687e      	ldr	r6, [r7, #4]
 800201a:	466d      	mov	r5, sp
 800201c:	f106 0410 	add.w	r4, r6, #16
 8002020:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002022:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002024:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002026:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002028:	e894 0003 	ldmia.w	r4, {r0, r1}
 800202c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002030:	1d33      	adds	r3, r6, #4
 8002032:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002034:	6838      	ldr	r0, [r7, #0]
 8002036:	f002 f815 	bl	8004064 <USB_CoreInit>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2202      	movs	r2, #2
 8002044:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e0d7      	b.n	80021fc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2100      	movs	r1, #0
 8002052:	4618      	mov	r0, r3
 8002054:	f002 f86f 	bl	8004136 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002058:	2300      	movs	r3, #0
 800205a:	73fb      	strb	r3, [r7, #15]
 800205c:	e04a      	b.n	80020f4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800205e:	7bfa      	ldrb	r2, [r7, #15]
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	4613      	mov	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	4413      	add	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	440b      	add	r3, r1
 800206c:	333d      	adds	r3, #61	; 0x3d
 800206e:	2201      	movs	r2, #1
 8002070:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002072:	7bfa      	ldrb	r2, [r7, #15]
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	4613      	mov	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	4413      	add	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	440b      	add	r3, r1
 8002080:	333c      	adds	r3, #60	; 0x3c
 8002082:	7bfa      	ldrb	r2, [r7, #15]
 8002084:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002086:	7bfa      	ldrb	r2, [r7, #15]
 8002088:	7bfb      	ldrb	r3, [r7, #15]
 800208a:	b298      	uxth	r0, r3
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	4413      	add	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	440b      	add	r3, r1
 8002098:	3344      	adds	r3, #68	; 0x44
 800209a:	4602      	mov	r2, r0
 800209c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800209e:	7bfa      	ldrb	r2, [r7, #15]
 80020a0:	6879      	ldr	r1, [r7, #4]
 80020a2:	4613      	mov	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4413      	add	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	440b      	add	r3, r1
 80020ac:	3340      	adds	r3, #64	; 0x40
 80020ae:	2200      	movs	r2, #0
 80020b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020b2:	7bfa      	ldrb	r2, [r7, #15]
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	4613      	mov	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	4413      	add	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	440b      	add	r3, r1
 80020c0:	3348      	adds	r3, #72	; 0x48
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020c6:	7bfa      	ldrb	r2, [r7, #15]
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	4413      	add	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	440b      	add	r3, r1
 80020d4:	334c      	adds	r3, #76	; 0x4c
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020da:	7bfa      	ldrb	r2, [r7, #15]
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	4413      	add	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	440b      	add	r3, r1
 80020e8:	3354      	adds	r3, #84	; 0x54
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
 80020f0:	3301      	adds	r3, #1
 80020f2:	73fb      	strb	r3, [r7, #15]
 80020f4:	7bfa      	ldrb	r2, [r7, #15]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d3af      	bcc.n	800205e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020fe:	2300      	movs	r3, #0
 8002100:	73fb      	strb	r3, [r7, #15]
 8002102:	e044      	b.n	800218e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002104:	7bfa      	ldrb	r2, [r7, #15]
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	4413      	add	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800211a:	7bfa      	ldrb	r2, [r7, #15]
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	4413      	add	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800212c:	7bfa      	ldrb	r2, [r7, #15]
 800212e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002130:	7bfa      	ldrb	r2, [r7, #15]
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	4613      	mov	r3, r2
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	4413      	add	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	440b      	add	r3, r1
 800213e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002142:	2200      	movs	r2, #0
 8002144:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002146:	7bfa      	ldrb	r2, [r7, #15]
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4413      	add	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	440b      	add	r3, r1
 8002154:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800215c:	7bfa      	ldrb	r2, [r7, #15]
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	4613      	mov	r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	4413      	add	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	440b      	add	r3, r1
 800216a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002172:	7bfa      	ldrb	r2, [r7, #15]
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	4413      	add	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	440b      	add	r3, r1
 8002180:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002188:	7bfb      	ldrb	r3, [r7, #15]
 800218a:	3301      	adds	r3, #1
 800218c:	73fb      	strb	r3, [r7, #15]
 800218e:	7bfa      	ldrb	r2, [r7, #15]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	429a      	cmp	r2, r3
 8002196:	d3b5      	bcc.n	8002104 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	603b      	str	r3, [r7, #0]
 800219e:	687e      	ldr	r6, [r7, #4]
 80021a0:	466d      	mov	r5, sp
 80021a2:	f106 0410 	add.w	r4, r6, #16
 80021a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80021b6:	1d33      	adds	r3, r6, #4
 80021b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021ba:	6838      	ldr	r0, [r7, #0]
 80021bc:	f002 f808 	bl	80041d0 <USB_DevInit>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d005      	beq.n	80021d2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2202      	movs	r2, #2
 80021ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e014      	b.n	80021fc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d102      	bne.n	80021f0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f80a 	bl	8002204 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f002 f9c6 	bl	8004586 <USB_DevDisconnect>

  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002204 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002232:	4b05      	ldr	r3, [pc, #20]	; (8002248 <HAL_PCDEx_ActivateLPM+0x44>)
 8002234:	4313      	orrs	r3, r2
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	10000003 	.word	0x10000003

0800224c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a04      	ldr	r2, [pc, #16]	; (8002268 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225a:	6013      	str	r3, [r2, #0]
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40007000 	.word	0x40007000

0800226c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002272:	2300      	movs	r3, #0
 8002274:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002276:	4b23      	ldr	r3, [pc, #140]	; (8002304 <HAL_PWREx_EnableOverDrive+0x98>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	4a22      	ldr	r2, [pc, #136]	; (8002304 <HAL_PWREx_EnableOverDrive+0x98>)
 800227c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002280:	6413      	str	r3, [r2, #64]	; 0x40
 8002282:	4b20      	ldr	r3, [pc, #128]	; (8002304 <HAL_PWREx_EnableOverDrive+0x98>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228a:	603b      	str	r3, [r7, #0]
 800228c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800228e:	4b1e      	ldr	r3, [pc, #120]	; (8002308 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a1d      	ldr	r2, [pc, #116]	; (8002308 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002298:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800229a:	f7ff f831 	bl	8001300 <HAL_GetTick>
 800229e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80022a0:	e009      	b.n	80022b6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80022a2:	f7ff f82d 	bl	8001300 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022b0:	d901      	bls.n	80022b6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e022      	b.n	80022fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80022b6:	4b14      	ldr	r3, [pc, #80]	; (8002308 <HAL_PWREx_EnableOverDrive+0x9c>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022c2:	d1ee      	bne.n	80022a2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80022c4:	4b10      	ldr	r3, [pc, #64]	; (8002308 <HAL_PWREx_EnableOverDrive+0x9c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a0f      	ldr	r2, [pc, #60]	; (8002308 <HAL_PWREx_EnableOverDrive+0x9c>)
 80022ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022d0:	f7ff f816 	bl	8001300 <HAL_GetTick>
 80022d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80022d6:	e009      	b.n	80022ec <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80022d8:	f7ff f812 	bl	8001300 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022e6:	d901      	bls.n	80022ec <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e007      	b.n	80022fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <HAL_PWREx_EnableOverDrive+0x9c>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80022f8:	d1ee      	bne.n	80022d8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40023800 	.word	0x40023800
 8002308:	40007000 	.word	0x40007000

0800230c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002314:	2300      	movs	r3, #0
 8002316:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e29b      	b.n	800285a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 8087 	beq.w	800243e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002330:	4b96      	ldr	r3, [pc, #600]	; (800258c <HAL_RCC_OscConfig+0x280>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 030c 	and.w	r3, r3, #12
 8002338:	2b04      	cmp	r3, #4
 800233a:	d00c      	beq.n	8002356 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800233c:	4b93      	ldr	r3, [pc, #588]	; (800258c <HAL_RCC_OscConfig+0x280>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 030c 	and.w	r3, r3, #12
 8002344:	2b08      	cmp	r3, #8
 8002346:	d112      	bne.n	800236e <HAL_RCC_OscConfig+0x62>
 8002348:	4b90      	ldr	r3, [pc, #576]	; (800258c <HAL_RCC_OscConfig+0x280>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002350:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002354:	d10b      	bne.n	800236e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002356:	4b8d      	ldr	r3, [pc, #564]	; (800258c <HAL_RCC_OscConfig+0x280>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d06c      	beq.n	800243c <HAL_RCC_OscConfig+0x130>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d168      	bne.n	800243c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e275      	b.n	800285a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002376:	d106      	bne.n	8002386 <HAL_RCC_OscConfig+0x7a>
 8002378:	4b84      	ldr	r3, [pc, #528]	; (800258c <HAL_RCC_OscConfig+0x280>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a83      	ldr	r2, [pc, #524]	; (800258c <HAL_RCC_OscConfig+0x280>)
 800237e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	e02e      	b.n	80023e4 <HAL_RCC_OscConfig+0xd8>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10c      	bne.n	80023a8 <HAL_RCC_OscConfig+0x9c>
 800238e:	4b7f      	ldr	r3, [pc, #508]	; (800258c <HAL_RCC_OscConfig+0x280>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a7e      	ldr	r2, [pc, #504]	; (800258c <HAL_RCC_OscConfig+0x280>)
 8002394:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	4b7c      	ldr	r3, [pc, #496]	; (800258c <HAL_RCC_OscConfig+0x280>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a7b      	ldr	r2, [pc, #492]	; (800258c <HAL_RCC_OscConfig+0x280>)
 80023a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	e01d      	b.n	80023e4 <HAL_RCC_OscConfig+0xd8>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b0:	d10c      	bne.n	80023cc <HAL_RCC_OscConfig+0xc0>
 80023b2:	4b76      	ldr	r3, [pc, #472]	; (800258c <HAL_RCC_OscConfig+0x280>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a75      	ldr	r2, [pc, #468]	; (800258c <HAL_RCC_OscConfig+0x280>)
 80023b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	4b73      	ldr	r3, [pc, #460]	; (800258c <HAL_RCC_OscConfig+0x280>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a72      	ldr	r2, [pc, #456]	; (800258c <HAL_RCC_OscConfig+0x280>)
 80023c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	e00b      	b.n	80023e4 <HAL_RCC_OscConfig+0xd8>
 80023cc:	4b6f      	ldr	r3, [pc, #444]	; (800258c <HAL_RCC_OscConfig+0x280>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a6e      	ldr	r2, [pc, #440]	; (800258c <HAL_RCC_OscConfig+0x280>)
 80023d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d6:	6013      	str	r3, [r2, #0]
 80023d8:	4b6c      	ldr	r3, [pc, #432]	; (800258c <HAL_RCC_OscConfig+0x280>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a6b      	ldr	r2, [pc, #428]	; (800258c <HAL_RCC_OscConfig+0x280>)
 80023de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d013      	beq.n	8002414 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ec:	f7fe ff88 	bl	8001300 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f4:	f7fe ff84 	bl	8001300 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b64      	cmp	r3, #100	; 0x64
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e229      	b.n	800285a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002406:	4b61      	ldr	r3, [pc, #388]	; (800258c <HAL_RCC_OscConfig+0x280>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0f0      	beq.n	80023f4 <HAL_RCC_OscConfig+0xe8>
 8002412:	e014      	b.n	800243e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002414:	f7fe ff74 	bl	8001300 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800241c:	f7fe ff70 	bl	8001300 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b64      	cmp	r3, #100	; 0x64
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e215      	b.n	800285a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800242e:	4b57      	ldr	r3, [pc, #348]	; (800258c <HAL_RCC_OscConfig+0x280>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f0      	bne.n	800241c <HAL_RCC_OscConfig+0x110>
 800243a:	e000      	b.n	800243e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800243c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d069      	beq.n	800251e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800244a:	4b50      	ldr	r3, [pc, #320]	; (800258c <HAL_RCC_OscConfig+0x280>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 030c 	and.w	r3, r3, #12
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00b      	beq.n	800246e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002456:	4b4d      	ldr	r3, [pc, #308]	; (800258c <HAL_RCC_OscConfig+0x280>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	2b08      	cmp	r3, #8
 8002460:	d11c      	bne.n	800249c <HAL_RCC_OscConfig+0x190>
 8002462:	4b4a      	ldr	r3, [pc, #296]	; (800258c <HAL_RCC_OscConfig+0x280>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d116      	bne.n	800249c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800246e:	4b47      	ldr	r3, [pc, #284]	; (800258c <HAL_RCC_OscConfig+0x280>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d005      	beq.n	8002486 <HAL_RCC_OscConfig+0x17a>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d001      	beq.n	8002486 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e1e9      	b.n	800285a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002486:	4b41      	ldr	r3, [pc, #260]	; (800258c <HAL_RCC_OscConfig+0x280>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	493d      	ldr	r1, [pc, #244]	; (800258c <HAL_RCC_OscConfig+0x280>)
 8002496:	4313      	orrs	r3, r2
 8002498:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249a:	e040      	b.n	800251e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d023      	beq.n	80024ec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a4:	4b39      	ldr	r3, [pc, #228]	; (800258c <HAL_RCC_OscConfig+0x280>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a38      	ldr	r2, [pc, #224]	; (800258c <HAL_RCC_OscConfig+0x280>)
 80024aa:	f043 0301 	orr.w	r3, r3, #1
 80024ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b0:	f7fe ff26 	bl	8001300 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b8:	f7fe ff22 	bl	8001300 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e1c7      	b.n	800285a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ca:	4b30      	ldr	r3, [pc, #192]	; (800258c <HAL_RCC_OscConfig+0x280>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0f0      	beq.n	80024b8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d6:	4b2d      	ldr	r3, [pc, #180]	; (800258c <HAL_RCC_OscConfig+0x280>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	4929      	ldr	r1, [pc, #164]	; (800258c <HAL_RCC_OscConfig+0x280>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	600b      	str	r3, [r1, #0]
 80024ea:	e018      	b.n	800251e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ec:	4b27      	ldr	r3, [pc, #156]	; (800258c <HAL_RCC_OscConfig+0x280>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a26      	ldr	r2, [pc, #152]	; (800258c <HAL_RCC_OscConfig+0x280>)
 80024f2:	f023 0301 	bic.w	r3, r3, #1
 80024f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f8:	f7fe ff02 	bl	8001300 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002500:	f7fe fefe 	bl	8001300 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e1a3      	b.n	800285a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002512:	4b1e      	ldr	r3, [pc, #120]	; (800258c <HAL_RCC_OscConfig+0x280>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0308 	and.w	r3, r3, #8
 8002526:	2b00      	cmp	r3, #0
 8002528:	d038      	beq.n	800259c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d019      	beq.n	8002566 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002532:	4b16      	ldr	r3, [pc, #88]	; (800258c <HAL_RCC_OscConfig+0x280>)
 8002534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002536:	4a15      	ldr	r2, [pc, #84]	; (800258c <HAL_RCC_OscConfig+0x280>)
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800253e:	f7fe fedf 	bl	8001300 <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002546:	f7fe fedb 	bl	8001300 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e180      	b.n	800285a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002558:	4b0c      	ldr	r3, [pc, #48]	; (800258c <HAL_RCC_OscConfig+0x280>)
 800255a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0f0      	beq.n	8002546 <HAL_RCC_OscConfig+0x23a>
 8002564:	e01a      	b.n	800259c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002566:	4b09      	ldr	r3, [pc, #36]	; (800258c <HAL_RCC_OscConfig+0x280>)
 8002568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800256a:	4a08      	ldr	r2, [pc, #32]	; (800258c <HAL_RCC_OscConfig+0x280>)
 800256c:	f023 0301 	bic.w	r3, r3, #1
 8002570:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002572:	f7fe fec5 	bl	8001300 <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002578:	e00a      	b.n	8002590 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800257a:	f7fe fec1 	bl	8001300 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d903      	bls.n	8002590 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e166      	b.n	800285a <HAL_RCC_OscConfig+0x54e>
 800258c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002590:	4b92      	ldr	r3, [pc, #584]	; (80027dc <HAL_RCC_OscConfig+0x4d0>)
 8002592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1ee      	bne.n	800257a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 80a4 	beq.w	80026f2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025aa:	4b8c      	ldr	r3, [pc, #560]	; (80027dc <HAL_RCC_OscConfig+0x4d0>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10d      	bne.n	80025d2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b6:	4b89      	ldr	r3, [pc, #548]	; (80027dc <HAL_RCC_OscConfig+0x4d0>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	4a88      	ldr	r2, [pc, #544]	; (80027dc <HAL_RCC_OscConfig+0x4d0>)
 80025bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c0:	6413      	str	r3, [r2, #64]	; 0x40
 80025c2:	4b86      	ldr	r3, [pc, #536]	; (80027dc <HAL_RCC_OscConfig+0x4d0>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ca:	60bb      	str	r3, [r7, #8]
 80025cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ce:	2301      	movs	r3, #1
 80025d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025d2:	4b83      	ldr	r3, [pc, #524]	; (80027e0 <HAL_RCC_OscConfig+0x4d4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d118      	bne.n	8002610 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80025de:	4b80      	ldr	r3, [pc, #512]	; (80027e0 <HAL_RCC_OscConfig+0x4d4>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a7f      	ldr	r2, [pc, #508]	; (80027e0 <HAL_RCC_OscConfig+0x4d4>)
 80025e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ea:	f7fe fe89 	bl	8001300 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f2:	f7fe fe85 	bl	8001300 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b64      	cmp	r3, #100	; 0x64
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e12a      	b.n	800285a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002604:	4b76      	ldr	r3, [pc, #472]	; (80027e0 <HAL_RCC_OscConfig+0x4d4>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0f0      	beq.n	80025f2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d106      	bne.n	8002626 <HAL_RCC_OscConfig+0x31a>
 8002618:	4b70      	ldr	r3, [pc, #448]	; (80027dc <HAL_RCC_OscConfig+0x4d0>)
 800261a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261c:	4a6f      	ldr	r2, [pc, #444]	; (80027dc <HAL_RCC_OscConfig+0x4d0>)
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	6713      	str	r3, [r2, #112]	; 0x70
 8002624:	e02d      	b.n	8002682 <HAL_RCC_OscConfig+0x376>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10c      	bne.n	8002648 <HAL_RCC_OscConfig+0x33c>
 800262e:	4b6b      	ldr	r3, [pc, #428]	; (80027dc <HAL_RCC_OscConfig+0x4d0>)
 8002630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002632:	4a6a      	ldr	r2, [pc, #424]	; (80027dc <HAL_RCC_OscConfig+0x4d0>)
 8002634:	f023 0301 	bic.w	r3, r3, #1
 8002638:	6713      	str	r3, [r2, #112]	; 0x70
 800263a:	4b68      	ldr	r3, [pc, #416]	; (80027dc <HAL_RCC_OscConfig+0x4d0>)
 800263c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263e:	4a67      	ldr	r2, [pc, #412]	; (80027dc <HAL_RCC_OscConfig+0x4d0>)
 8002640:	f023 0304 	bic.w	r3, r3, #4
 8002644:	6713      	str	r3, [r2, #112]	; 0x70
 8002646:	e01c      	b.n	8002682 <HAL_RCC_OscConfig+0x376>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2b05      	cmp	r3, #5
 800264e:	d10c      	bne.n	800266a <HAL_RCC_OscConfig+0x35e>
 8002650:	4b62      	ldr	r3, [pc, #392]	; (80027dc <HAL_RCC_OscConfig+0x4d0>)
 8002652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002654:	4a61      	ldr	r2, [pc, #388]	; (80027dc <HAL_RCC_OscConfig+0x4d0>)
 8002656:	f043 0304 	orr.w	r3, r3, #4
 800265a:	6713      	str	r3, [r2, #112]	; 0x70
 800265c:	4b5f      	ldr	r3, [pc, #380]	; (80027dc <HAL_RCC_OscConfig+0x4d0>)
 800265e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002660:	4a5e      	ldr	r2, [pc, #376]	; (80027dc <HAL_RCC_OscConfig+0x4d0>)
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	6713      	str	r3, [r2, #112]	; 0x70
 8002668:	e00b      	b.n	8002682 <HAL_RCC_OscConfig+0x376>
 800266a:	4b5c      	ldr	r3, [pc, #368]	; (80027dc <HAL_RCC_OscConfig+0x4d0>)
 800266c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266e:	4a5b      	ldr	r2, [pc, #364]	; (80027dc <HAL_RCC_OscConfig+0x4d0>)
 8002670:	f023 0301 	bic.w	r3, r3, #1
 8002674:	6713      	str	r3, [r2, #112]	; 0x70
 8002676:	4b59      	ldr	r3, [pc, #356]	; (80027dc <HAL_RCC_OscConfig+0x4d0>)
 8002678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267a:	4a58      	ldr	r2, [pc, #352]	; (80027dc <HAL_RCC_OscConfig+0x4d0>)
 800267c:	f023 0304 	bic.w	r3, r3, #4
 8002680:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d015      	beq.n	80026b6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268a:	f7fe fe39 	bl	8001300 <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002690:	e00a      	b.n	80026a8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002692:	f7fe fe35 	bl	8001300 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e0d8      	b.n	800285a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a8:	4b4c      	ldr	r3, [pc, #304]	; (80027dc <HAL_RCC_OscConfig+0x4d0>)
 80026aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0ee      	beq.n	8002692 <HAL_RCC_OscConfig+0x386>
 80026b4:	e014      	b.n	80026e0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b6:	f7fe fe23 	bl	8001300 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026bc:	e00a      	b.n	80026d4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026be:	f7fe fe1f 	bl	8001300 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e0c2      	b.n	800285a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d4:	4b41      	ldr	r3, [pc, #260]	; (80027dc <HAL_RCC_OscConfig+0x4d0>)
 80026d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1ee      	bne.n	80026be <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026e0:	7dfb      	ldrb	r3, [r7, #23]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d105      	bne.n	80026f2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e6:	4b3d      	ldr	r3, [pc, #244]	; (80027dc <HAL_RCC_OscConfig+0x4d0>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	4a3c      	ldr	r2, [pc, #240]	; (80027dc <HAL_RCC_OscConfig+0x4d0>)
 80026ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 80ae 	beq.w	8002858 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026fc:	4b37      	ldr	r3, [pc, #220]	; (80027dc <HAL_RCC_OscConfig+0x4d0>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 030c 	and.w	r3, r3, #12
 8002704:	2b08      	cmp	r3, #8
 8002706:	d06d      	beq.n	80027e4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	2b02      	cmp	r3, #2
 800270e:	d14b      	bne.n	80027a8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002710:	4b32      	ldr	r3, [pc, #200]	; (80027dc <HAL_RCC_OscConfig+0x4d0>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a31      	ldr	r2, [pc, #196]	; (80027dc <HAL_RCC_OscConfig+0x4d0>)
 8002716:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800271a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271c:	f7fe fdf0 	bl	8001300 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002724:	f7fe fdec 	bl	8001300 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e091      	b.n	800285a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002736:	4b29      	ldr	r3, [pc, #164]	; (80027dc <HAL_RCC_OscConfig+0x4d0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69da      	ldr	r2, [r3, #28]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	019b      	lsls	r3, r3, #6
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002758:	085b      	lsrs	r3, r3, #1
 800275a:	3b01      	subs	r3, #1
 800275c:	041b      	lsls	r3, r3, #16
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002764:	061b      	lsls	r3, r3, #24
 8002766:	431a      	orrs	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276c:	071b      	lsls	r3, r3, #28
 800276e:	491b      	ldr	r1, [pc, #108]	; (80027dc <HAL_RCC_OscConfig+0x4d0>)
 8002770:	4313      	orrs	r3, r2
 8002772:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002774:	4b19      	ldr	r3, [pc, #100]	; (80027dc <HAL_RCC_OscConfig+0x4d0>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a18      	ldr	r2, [pc, #96]	; (80027dc <HAL_RCC_OscConfig+0x4d0>)
 800277a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800277e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002780:	f7fe fdbe 	bl	8001300 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002788:	f7fe fdba 	bl	8001300 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e05f      	b.n	800285a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800279a:	4b10      	ldr	r3, [pc, #64]	; (80027dc <HAL_RCC_OscConfig+0x4d0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0f0      	beq.n	8002788 <HAL_RCC_OscConfig+0x47c>
 80027a6:	e057      	b.n	8002858 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a8:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <HAL_RCC_OscConfig+0x4d0>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a0b      	ldr	r2, [pc, #44]	; (80027dc <HAL_RCC_OscConfig+0x4d0>)
 80027ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b4:	f7fe fda4 	bl	8001300 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027bc:	f7fe fda0 	bl	8001300 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e045      	b.n	800285a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ce:	4b03      	ldr	r3, [pc, #12]	; (80027dc <HAL_RCC_OscConfig+0x4d0>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0x4b0>
 80027da:	e03d      	b.n	8002858 <HAL_RCC_OscConfig+0x54c>
 80027dc:	40023800 	.word	0x40023800
 80027e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80027e4:	4b1f      	ldr	r3, [pc, #124]	; (8002864 <HAL_RCC_OscConfig+0x558>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d030      	beq.n	8002854 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d129      	bne.n	8002854 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800280a:	429a      	cmp	r2, r3
 800280c:	d122      	bne.n	8002854 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002814:	4013      	ands	r3, r2
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800281a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800281c:	4293      	cmp	r3, r2
 800281e:	d119      	bne.n	8002854 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282a:	085b      	lsrs	r3, r3, #1
 800282c:	3b01      	subs	r3, #1
 800282e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002830:	429a      	cmp	r2, r3
 8002832:	d10f      	bne.n	8002854 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002840:	429a      	cmp	r2, r3
 8002842:	d107      	bne.n	8002854 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002850:	429a      	cmp	r2, r3
 8002852:	d001      	beq.n	8002858 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e000      	b.n	800285a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3718      	adds	r7, #24
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800

08002868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e0d0      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002880:	4b6a      	ldr	r3, [pc, #424]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 030f 	and.w	r3, r3, #15
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	429a      	cmp	r2, r3
 800288c:	d910      	bls.n	80028b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288e:	4b67      	ldr	r3, [pc, #412]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f023 020f 	bic.w	r2, r3, #15
 8002896:	4965      	ldr	r1, [pc, #404]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	4313      	orrs	r3, r2
 800289c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800289e:	4b63      	ldr	r3, [pc, #396]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d001      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e0b8      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d020      	beq.n	80028fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d005      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028c8:	4b59      	ldr	r3, [pc, #356]	; (8002a30 <HAL_RCC_ClockConfig+0x1c8>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	4a58      	ldr	r2, [pc, #352]	; (8002a30 <HAL_RCC_ClockConfig+0x1c8>)
 80028ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0308 	and.w	r3, r3, #8
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d005      	beq.n	80028ec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028e0:	4b53      	ldr	r3, [pc, #332]	; (8002a30 <HAL_RCC_ClockConfig+0x1c8>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	4a52      	ldr	r2, [pc, #328]	; (8002a30 <HAL_RCC_ClockConfig+0x1c8>)
 80028e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028ec:	4b50      	ldr	r3, [pc, #320]	; (8002a30 <HAL_RCC_ClockConfig+0x1c8>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	494d      	ldr	r1, [pc, #308]	; (8002a30 <HAL_RCC_ClockConfig+0x1c8>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	d040      	beq.n	800298c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d107      	bne.n	8002922 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002912:	4b47      	ldr	r3, [pc, #284]	; (8002a30 <HAL_RCC_ClockConfig+0x1c8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d115      	bne.n	800294a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e07f      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b02      	cmp	r3, #2
 8002928:	d107      	bne.n	800293a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800292a:	4b41      	ldr	r3, [pc, #260]	; (8002a30 <HAL_RCC_ClockConfig+0x1c8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d109      	bne.n	800294a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e073      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800293a:	4b3d      	ldr	r3, [pc, #244]	; (8002a30 <HAL_RCC_ClockConfig+0x1c8>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e06b      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800294a:	4b39      	ldr	r3, [pc, #228]	; (8002a30 <HAL_RCC_ClockConfig+0x1c8>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f023 0203 	bic.w	r2, r3, #3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	4936      	ldr	r1, [pc, #216]	; (8002a30 <HAL_RCC_ClockConfig+0x1c8>)
 8002958:	4313      	orrs	r3, r2
 800295a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800295c:	f7fe fcd0 	bl	8001300 <HAL_GetTick>
 8002960:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002962:	e00a      	b.n	800297a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002964:	f7fe fccc 	bl	8001300 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002972:	4293      	cmp	r3, r2
 8002974:	d901      	bls.n	800297a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e053      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297a:	4b2d      	ldr	r3, [pc, #180]	; (8002a30 <HAL_RCC_ClockConfig+0x1c8>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 020c 	and.w	r2, r3, #12
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	429a      	cmp	r2, r3
 800298a:	d1eb      	bne.n	8002964 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800298c:	4b27      	ldr	r3, [pc, #156]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 030f 	and.w	r3, r3, #15
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	429a      	cmp	r2, r3
 8002998:	d210      	bcs.n	80029bc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299a:	4b24      	ldr	r3, [pc, #144]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f023 020f 	bic.w	r2, r3, #15
 80029a2:	4922      	ldr	r1, [pc, #136]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029aa:	4b20      	ldr	r3, [pc, #128]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d001      	beq.n	80029bc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e032      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d008      	beq.n	80029da <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029c8:	4b19      	ldr	r3, [pc, #100]	; (8002a30 <HAL_RCC_ClockConfig+0x1c8>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	4916      	ldr	r1, [pc, #88]	; (8002a30 <HAL_RCC_ClockConfig+0x1c8>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d009      	beq.n	80029fa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029e6:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <HAL_RCC_ClockConfig+0x1c8>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	490e      	ldr	r1, [pc, #56]	; (8002a30 <HAL_RCC_ClockConfig+0x1c8>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029fa:	f000 f821 	bl	8002a40 <HAL_RCC_GetSysClockFreq>
 80029fe:	4602      	mov	r2, r0
 8002a00:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <HAL_RCC_ClockConfig+0x1c8>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	091b      	lsrs	r3, r3, #4
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	490a      	ldr	r1, [pc, #40]	; (8002a34 <HAL_RCC_ClockConfig+0x1cc>)
 8002a0c:	5ccb      	ldrb	r3, [r1, r3]
 8002a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a12:	4a09      	ldr	r2, [pc, #36]	; (8002a38 <HAL_RCC_ClockConfig+0x1d0>)
 8002a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a16:	4b09      	ldr	r3, [pc, #36]	; (8002a3c <HAL_RCC_ClockConfig+0x1d4>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fe fc2c 	bl	8001278 <HAL_InitTick>

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40023c00 	.word	0x40023c00
 8002a30:	40023800 	.word	0x40023800
 8002a34:	080067e0 	.word	0x080067e0
 8002a38:	20000004 	.word	0x20000004
 8002a3c:	20000008 	.word	0x20000008

08002a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a44:	b094      	sub	sp, #80	; 0x50
 8002a46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	647b      	str	r3, [r7, #68]	; 0x44
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a50:	2300      	movs	r3, #0
 8002a52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a58:	4b79      	ldr	r3, [pc, #484]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 030c 	and.w	r3, r3, #12
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d00d      	beq.n	8002a80 <HAL_RCC_GetSysClockFreq+0x40>
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	f200 80e1 	bhi.w	8002c2c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d002      	beq.n	8002a74 <HAL_RCC_GetSysClockFreq+0x34>
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d003      	beq.n	8002a7a <HAL_RCC_GetSysClockFreq+0x3a>
 8002a72:	e0db      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a74:	4b73      	ldr	r3, [pc, #460]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a76:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a78:	e0db      	b.n	8002c32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a7a:	4b73      	ldr	r3, [pc, #460]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a7e:	e0d8      	b.n	8002c32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a80:	4b6f      	ldr	r3, [pc, #444]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a88:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002a8a:	4b6d      	ldr	r3, [pc, #436]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d063      	beq.n	8002b5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a96:	4b6a      	ldr	r3, [pc, #424]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	099b      	lsrs	r3, r3, #6
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002aa0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aa8:	633b      	str	r3, [r7, #48]	; 0x30
 8002aaa:	2300      	movs	r3, #0
 8002aac:	637b      	str	r3, [r7, #52]	; 0x34
 8002aae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ab2:	4622      	mov	r2, r4
 8002ab4:	462b      	mov	r3, r5
 8002ab6:	f04f 0000 	mov.w	r0, #0
 8002aba:	f04f 0100 	mov.w	r1, #0
 8002abe:	0159      	lsls	r1, r3, #5
 8002ac0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ac4:	0150      	lsls	r0, r2, #5
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	4621      	mov	r1, r4
 8002acc:	1a51      	subs	r1, r2, r1
 8002ace:	6139      	str	r1, [r7, #16]
 8002ad0:	4629      	mov	r1, r5
 8002ad2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	f04f 0200 	mov.w	r2, #0
 8002adc:	f04f 0300 	mov.w	r3, #0
 8002ae0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ae4:	4659      	mov	r1, fp
 8002ae6:	018b      	lsls	r3, r1, #6
 8002ae8:	4651      	mov	r1, sl
 8002aea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002aee:	4651      	mov	r1, sl
 8002af0:	018a      	lsls	r2, r1, #6
 8002af2:	4651      	mov	r1, sl
 8002af4:	ebb2 0801 	subs.w	r8, r2, r1
 8002af8:	4659      	mov	r1, fp
 8002afa:	eb63 0901 	sbc.w	r9, r3, r1
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	f04f 0300 	mov.w	r3, #0
 8002b06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b12:	4690      	mov	r8, r2
 8002b14:	4699      	mov	r9, r3
 8002b16:	4623      	mov	r3, r4
 8002b18:	eb18 0303 	adds.w	r3, r8, r3
 8002b1c:	60bb      	str	r3, [r7, #8]
 8002b1e:	462b      	mov	r3, r5
 8002b20:	eb49 0303 	adc.w	r3, r9, r3
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	f04f 0300 	mov.w	r3, #0
 8002b2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b32:	4629      	mov	r1, r5
 8002b34:	024b      	lsls	r3, r1, #9
 8002b36:	4621      	mov	r1, r4
 8002b38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b3c:	4621      	mov	r1, r4
 8002b3e:	024a      	lsls	r2, r1, #9
 8002b40:	4610      	mov	r0, r2
 8002b42:	4619      	mov	r1, r3
 8002b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b46:	2200      	movs	r2, #0
 8002b48:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b50:	f7fd fbc6 	bl	80002e0 <__aeabi_uldivmod>
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	4613      	mov	r3, r2
 8002b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b5c:	e058      	b.n	8002c10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b5e:	4b38      	ldr	r3, [pc, #224]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	099b      	lsrs	r3, r3, #6
 8002b64:	2200      	movs	r2, #0
 8002b66:	4618      	mov	r0, r3
 8002b68:	4611      	mov	r1, r2
 8002b6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b6e:	623b      	str	r3, [r7, #32]
 8002b70:	2300      	movs	r3, #0
 8002b72:	627b      	str	r3, [r7, #36]	; 0x24
 8002b74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b78:	4642      	mov	r2, r8
 8002b7a:	464b      	mov	r3, r9
 8002b7c:	f04f 0000 	mov.w	r0, #0
 8002b80:	f04f 0100 	mov.w	r1, #0
 8002b84:	0159      	lsls	r1, r3, #5
 8002b86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b8a:	0150      	lsls	r0, r2, #5
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4641      	mov	r1, r8
 8002b92:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b96:	4649      	mov	r1, r9
 8002b98:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	f04f 0300 	mov.w	r3, #0
 8002ba4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ba8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002bac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002bb0:	ebb2 040a 	subs.w	r4, r2, sl
 8002bb4:	eb63 050b 	sbc.w	r5, r3, fp
 8002bb8:	f04f 0200 	mov.w	r2, #0
 8002bbc:	f04f 0300 	mov.w	r3, #0
 8002bc0:	00eb      	lsls	r3, r5, #3
 8002bc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bc6:	00e2      	lsls	r2, r4, #3
 8002bc8:	4614      	mov	r4, r2
 8002bca:	461d      	mov	r5, r3
 8002bcc:	4643      	mov	r3, r8
 8002bce:	18e3      	adds	r3, r4, r3
 8002bd0:	603b      	str	r3, [r7, #0]
 8002bd2:	464b      	mov	r3, r9
 8002bd4:	eb45 0303 	adc.w	r3, r5, r3
 8002bd8:	607b      	str	r3, [r7, #4]
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	f04f 0300 	mov.w	r3, #0
 8002be2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002be6:	4629      	mov	r1, r5
 8002be8:	028b      	lsls	r3, r1, #10
 8002bea:	4621      	mov	r1, r4
 8002bec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bf0:	4621      	mov	r1, r4
 8002bf2:	028a      	lsls	r2, r1, #10
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	61bb      	str	r3, [r7, #24]
 8002bfe:	61fa      	str	r2, [r7, #28]
 8002c00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c04:	f7fd fb6c 	bl	80002e0 <__aeabi_uldivmod>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002c10:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	0c1b      	lsrs	r3, r3, #16
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002c20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c2a:	e002      	b.n	8002c32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c2c:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3750      	adds	r7, #80	; 0x50
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c3e:	bf00      	nop
 8002c40:	40023800 	.word	0x40023800
 8002c44:	00f42400 	.word	0x00f42400
 8002c48:	007a1200 	.word	0x007a1200

08002c4c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c50:	4b03      	ldr	r3, [pc, #12]	; (8002c60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c52:	681b      	ldr	r3, [r3, #0]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	20000004 	.word	0x20000004

08002c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c68:	f7ff fff0 	bl	8002c4c <HAL_RCC_GetHCLKFreq>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	0a9b      	lsrs	r3, r3, #10
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	4903      	ldr	r1, [pc, #12]	; (8002c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c7a:	5ccb      	ldrb	r3, [r1, r3]
 8002c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40023800 	.word	0x40023800
 8002c88:	080067f0 	.word	0x080067f0

08002c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c90:	f7ff ffdc 	bl	8002c4c <HAL_RCC_GetHCLKFreq>
 8002c94:	4602      	mov	r2, r0
 8002c96:	4b05      	ldr	r3, [pc, #20]	; (8002cac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	0b5b      	lsrs	r3, r3, #13
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	4903      	ldr	r1, [pc, #12]	; (8002cb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ca2:	5ccb      	ldrb	r3, [r1, r3]
 8002ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	080067f0 	.word	0x080067f0

08002cb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b088      	sub	sp, #32
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d012      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002cdc:	4b69      	ldr	r3, [pc, #420]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	4a68      	ldr	r2, [pc, #416]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ce6:	6093      	str	r3, [r2, #8]
 8002ce8:	4b66      	ldr	r3, [pc, #408]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf0:	4964      	ldr	r1, [pc, #400]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d017      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d0e:	4b5d      	ldr	r3, [pc, #372]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1c:	4959      	ldr	r1, [pc, #356]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d2c:	d101      	bne.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d017      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d4a:	4b4e      	ldr	r3, [pc, #312]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d50:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d58:	494a      	ldr	r1, [pc, #296]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d68:	d101      	bne.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002d76:	2301      	movs	r3, #1
 8002d78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002d86:	2301      	movs	r3, #1
 8002d88:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0320 	and.w	r3, r3, #32
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 808b 	beq.w	8002eae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d98:	4b3a      	ldr	r3, [pc, #232]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9c:	4a39      	ldr	r2, [pc, #228]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da2:	6413      	str	r3, [r2, #64]	; 0x40
 8002da4:	4b37      	ldr	r3, [pc, #220]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dac:	60bb      	str	r3, [r7, #8]
 8002dae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002db0:	4b35      	ldr	r3, [pc, #212]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a34      	ldr	r2, [pc, #208]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dbc:	f7fe faa0 	bl	8001300 <HAL_GetTick>
 8002dc0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc4:	f7fe fa9c 	bl	8001300 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b64      	cmp	r3, #100	; 0x64
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e38f      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002dd6:	4b2c      	ldr	r3, [pc, #176]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0f0      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002de2:	4b28      	ldr	r3, [pc, #160]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d035      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d02e      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e00:	4b20      	ldr	r3, [pc, #128]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e08:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e0a:	4b1e      	ldr	r3, [pc, #120]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0e:	4a1d      	ldr	r2, [pc, #116]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e14:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e16:	4b1b      	ldr	r3, [pc, #108]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1a:	4a1a      	ldr	r2, [pc, #104]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e20:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002e22:	4a18      	ldr	r2, [pc, #96]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e28:	4b16      	ldr	r3, [pc, #88]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d114      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e34:	f7fe fa64 	bl	8001300 <HAL_GetTick>
 8002e38:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e3a:	e00a      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e3c:	f7fe fa60 	bl	8001300 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e351      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e52:	4b0c      	ldr	r3, [pc, #48]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0ee      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e6a:	d111      	bne.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002e6c:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e78:	4b04      	ldr	r3, [pc, #16]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e7a:	400b      	ands	r3, r1
 8002e7c:	4901      	ldr	r1, [pc, #4]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	608b      	str	r3, [r1, #8]
 8002e82:	e00b      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002e84:	40023800 	.word	0x40023800
 8002e88:	40007000 	.word	0x40007000
 8002e8c:	0ffffcff 	.word	0x0ffffcff
 8002e90:	4bac      	ldr	r3, [pc, #688]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	4aab      	ldr	r2, [pc, #684]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e96:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e9a:	6093      	str	r3, [r2, #8]
 8002e9c:	4ba9      	ldr	r3, [pc, #676]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea8:	49a6      	ldr	r1, [pc, #664]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0310 	and.w	r3, r3, #16
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d010      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002eba:	4ba2      	ldr	r3, [pc, #648]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ec0:	4aa0      	ldr	r2, [pc, #640]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ec2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ec6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002eca:	4b9e      	ldr	r3, [pc, #632]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ecc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed4:	499b      	ldr	r1, [pc, #620]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00a      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ee8:	4b96      	ldr	r3, [pc, #600]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ef6:	4993      	ldr	r1, [pc, #588]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00a      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f0a:	4b8e      	ldr	r3, [pc, #568]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f18:	498a      	ldr	r1, [pc, #552]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00a      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f2c:	4b85      	ldr	r3, [pc, #532]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f3a:	4982      	ldr	r1, [pc, #520]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00a      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f4e:	4b7d      	ldr	r3, [pc, #500]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5c:	4979      	ldr	r1, [pc, #484]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00a      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f70:	4b74      	ldr	r3, [pc, #464]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f76:	f023 0203 	bic.w	r2, r3, #3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7e:	4971      	ldr	r1, [pc, #452]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00a      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f92:	4b6c      	ldr	r3, [pc, #432]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f98:	f023 020c 	bic.w	r2, r3, #12
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fa0:	4968      	ldr	r1, [pc, #416]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00a      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fb4:	4b63      	ldr	r3, [pc, #396]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc2:	4960      	ldr	r1, [pc, #384]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00a      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fd6:	4b5b      	ldr	r3, [pc, #364]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fdc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fe4:	4957      	ldr	r1, [pc, #348]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00a      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ff8:	4b52      	ldr	r3, [pc, #328]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003006:	494f      	ldr	r1, [pc, #316]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003008:	4313      	orrs	r3, r2
 800300a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00a      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800301a:	4b4a      	ldr	r3, [pc, #296]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800301c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003020:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003028:	4946      	ldr	r1, [pc, #280]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800302a:	4313      	orrs	r3, r2
 800302c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00a      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800303c:	4b41      	ldr	r3, [pc, #260]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800303e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003042:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800304a:	493e      	ldr	r1, [pc, #248]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800304c:	4313      	orrs	r3, r2
 800304e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00a      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800305e:	4b39      	ldr	r3, [pc, #228]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003064:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800306c:	4935      	ldr	r1, [pc, #212]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800306e:	4313      	orrs	r3, r2
 8003070:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00a      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003080:	4b30      	ldr	r3, [pc, #192]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003086:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800308e:	492d      	ldr	r1, [pc, #180]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003090:	4313      	orrs	r3, r2
 8003092:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d011      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80030a2:	4b28      	ldr	r3, [pc, #160]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030b0:	4924      	ldr	r1, [pc, #144]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030c0:	d101      	bne.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80030c2:	2301      	movs	r3, #1
 80030c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80030d2:	2301      	movs	r3, #1
 80030d4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00a      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030e2:	4b18      	ldr	r3, [pc, #96]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030f0:	4914      	ldr	r1, [pc, #80]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00b      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003104:	4b0f      	ldr	r3, [pc, #60]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003114:	490b      	ldr	r1, [pc, #44]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003116:	4313      	orrs	r3, r2
 8003118:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00f      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003128:	4b06      	ldr	r3, [pc, #24]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800312a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003138:	4902      	ldr	r1, [pc, #8]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800313a:	4313      	orrs	r3, r2
 800313c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003140:	e002      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003142:	bf00      	nop
 8003144:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00b      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003154:	4b8a      	ldr	r3, [pc, #552]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003156:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800315a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003164:	4986      	ldr	r1, [pc, #536]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003166:	4313      	orrs	r3, r2
 8003168:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00b      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003178:	4b81      	ldr	r3, [pc, #516]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800317a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800317e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003188:	497d      	ldr	r1, [pc, #500]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d006      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 80d6 	beq.w	8003350 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80031a4:	4b76      	ldr	r3, [pc, #472]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a75      	ldr	r2, [pc, #468]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031b0:	f7fe f8a6 	bl	8001300 <HAL_GetTick>
 80031b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80031b8:	f7fe f8a2 	bl	8001300 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b64      	cmp	r3, #100	; 0x64
 80031c4:	d901      	bls.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e195      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031ca:	4b6d      	ldr	r3, [pc, #436]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f0      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d021      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d11d      	bne.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80031ea:	4b65      	ldr	r3, [pc, #404]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031f0:	0c1b      	lsrs	r3, r3, #16
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80031f8:	4b61      	ldr	r3, [pc, #388]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031fe:	0e1b      	lsrs	r3, r3, #24
 8003200:	f003 030f 	and.w	r3, r3, #15
 8003204:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	019a      	lsls	r2, r3, #6
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	041b      	lsls	r3, r3, #16
 8003210:	431a      	orrs	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	061b      	lsls	r3, r3, #24
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	071b      	lsls	r3, r3, #28
 800321e:	4958      	ldr	r1, [pc, #352]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003220:	4313      	orrs	r3, r2
 8003222:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d004      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003236:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800323a:	d00a      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003244:	2b00      	cmp	r3, #0
 8003246:	d02e      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003250:	d129      	bne.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003252:	4b4b      	ldr	r3, [pc, #300]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003258:	0c1b      	lsrs	r3, r3, #16
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003260:	4b47      	ldr	r3, [pc, #284]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003266:	0f1b      	lsrs	r3, r3, #28
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	019a      	lsls	r2, r3, #6
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	041b      	lsls	r3, r3, #16
 8003278:	431a      	orrs	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	061b      	lsls	r3, r3, #24
 8003280:	431a      	orrs	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	071b      	lsls	r3, r3, #28
 8003286:	493e      	ldr	r1, [pc, #248]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003288:	4313      	orrs	r3, r2
 800328a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800328e:	4b3c      	ldr	r3, [pc, #240]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003290:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003294:	f023 021f 	bic.w	r2, r3, #31
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	3b01      	subs	r3, #1
 800329e:	4938      	ldr	r1, [pc, #224]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d01d      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80032b2:	4b33      	ldr	r3, [pc, #204]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032b8:	0e1b      	lsrs	r3, r3, #24
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032c0:	4b2f      	ldr	r3, [pc, #188]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032c6:	0f1b      	lsrs	r3, r3, #28
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	019a      	lsls	r2, r3, #6
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	041b      	lsls	r3, r3, #16
 80032da:	431a      	orrs	r2, r3
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	061b      	lsls	r3, r3, #24
 80032e0:	431a      	orrs	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	071b      	lsls	r3, r3, #28
 80032e6:	4926      	ldr	r1, [pc, #152]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d011      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	019a      	lsls	r2, r3, #6
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	041b      	lsls	r3, r3, #16
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	061b      	lsls	r3, r3, #24
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	071b      	lsls	r3, r3, #28
 8003316:	491a      	ldr	r1, [pc, #104]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003318:	4313      	orrs	r3, r2
 800331a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800331e:	4b18      	ldr	r3, [pc, #96]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a17      	ldr	r2, [pc, #92]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003324:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003328:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800332a:	f7fd ffe9 	bl	8001300 <HAL_GetTick>
 800332e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003330:	e008      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003332:	f7fd ffe5 	bl	8001300 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b64      	cmp	r3, #100	; 0x64
 800333e:	d901      	bls.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e0d8      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003344:	4b0e      	ldr	r3, [pc, #56]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0f0      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	2b01      	cmp	r3, #1
 8003354:	f040 80ce 	bne.w	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003358:	4b09      	ldr	r3, [pc, #36]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a08      	ldr	r2, [pc, #32]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800335e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003362:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003364:	f7fd ffcc 	bl	8001300 <HAL_GetTick>
 8003368:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800336a:	e00b      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800336c:	f7fd ffc8 	bl	8001300 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b64      	cmp	r3, #100	; 0x64
 8003378:	d904      	bls.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e0bb      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800337e:	bf00      	nop
 8003380:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003384:	4b5e      	ldr	r3, [pc, #376]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800338c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003390:	d0ec      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d009      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d02e      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d12a      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80033ba:	4b51      	ldr	r3, [pc, #324]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c0:	0c1b      	lsrs	r3, r3, #16
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80033c8:	4b4d      	ldr	r3, [pc, #308]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ce:	0f1b      	lsrs	r3, r3, #28
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	019a      	lsls	r2, r3, #6
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	041b      	lsls	r3, r3, #16
 80033e0:	431a      	orrs	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	061b      	lsls	r3, r3, #24
 80033e8:	431a      	orrs	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	071b      	lsls	r3, r3, #28
 80033ee:	4944      	ldr	r1, [pc, #272]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80033f6:	4b42      	ldr	r3, [pc, #264]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033fc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003404:	3b01      	subs	r3, #1
 8003406:	021b      	lsls	r3, r3, #8
 8003408:	493d      	ldr	r1, [pc, #244]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800340a:	4313      	orrs	r3, r2
 800340c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d022      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003420:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003424:	d11d      	bne.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003426:	4b36      	ldr	r3, [pc, #216]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342c:	0e1b      	lsrs	r3, r3, #24
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003434:	4b32      	ldr	r3, [pc, #200]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343a:	0f1b      	lsrs	r3, r3, #28
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	019a      	lsls	r2, r3, #6
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	041b      	lsls	r3, r3, #16
 800344e:	431a      	orrs	r2, r3
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	061b      	lsls	r3, r3, #24
 8003454:	431a      	orrs	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	071b      	lsls	r3, r3, #28
 800345a:	4929      	ldr	r1, [pc, #164]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800345c:	4313      	orrs	r3, r2
 800345e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	2b00      	cmp	r3, #0
 800346c:	d028      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800346e:	4b24      	ldr	r3, [pc, #144]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003474:	0e1b      	lsrs	r3, r3, #24
 8003476:	f003 030f 	and.w	r3, r3, #15
 800347a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800347c:	4b20      	ldr	r3, [pc, #128]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800347e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003482:	0c1b      	lsrs	r3, r3, #16
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	019a      	lsls	r2, r3, #6
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	041b      	lsls	r3, r3, #16
 8003494:	431a      	orrs	r2, r3
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	061b      	lsls	r3, r3, #24
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	071b      	lsls	r3, r3, #28
 80034a2:	4917      	ldr	r1, [pc, #92]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80034aa:	4b15      	ldr	r3, [pc, #84]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b8:	4911      	ldr	r1, [pc, #68]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80034c0:	4b0f      	ldr	r3, [pc, #60]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a0e      	ldr	r2, [pc, #56]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034cc:	f7fd ff18 	bl	8001300 <HAL_GetTick>
 80034d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80034d2:	e008      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80034d4:	f7fd ff14 	bl	8001300 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b64      	cmp	r3, #100	; 0x64
 80034e0:	d901      	bls.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e007      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80034e6:	4b06      	ldr	r3, [pc, #24]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034f2:	d1ef      	bne.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3720      	adds	r7, #32
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40023800 	.word	0x40023800

08003504 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e040      	b.n	8003598 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800351a:	2b00      	cmp	r3, #0
 800351c:	d106      	bne.n	800352c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7fd fc8a 	bl	8000e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2224      	movs	r2, #36	; 0x24
 8003530:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0201 	bic.w	r2, r2, #1
 8003540:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f974 	bl	8003830 <UART_SetConfig>
 8003548:	4603      	mov	r3, r0
 800354a:	2b01      	cmp	r3, #1
 800354c:	d101      	bne.n	8003552 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e022      	b.n	8003598 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	2b00      	cmp	r3, #0
 8003558:	d002      	beq.n	8003560 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 fbcc 	bl	8003cf8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800356e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689a      	ldr	r2, [r3, #8]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800357e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0201 	orr.w	r2, r2, #1
 800358e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 fc53 	bl	8003e3c <UART_CheckIdleState>
 8003596:	4603      	mov	r3, r0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3708      	adds	r7, #8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b08a      	sub	sp, #40	; 0x28
 80035a4:	af02      	add	r7, sp, #8
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	603b      	str	r3, [r7, #0]
 80035ac:	4613      	mov	r3, r2
 80035ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035b4:	2b20      	cmp	r3, #32
 80035b6:	d171      	bne.n	800369c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <HAL_UART_Transmit+0x24>
 80035be:	88fb      	ldrh	r3, [r7, #6]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e06a      	b.n	800369e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2221      	movs	r2, #33	; 0x21
 80035d4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035d6:	f7fd fe93 	bl	8001300 <HAL_GetTick>
 80035da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	88fa      	ldrh	r2, [r7, #6]
 80035e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	88fa      	ldrh	r2, [r7, #6]
 80035e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f4:	d108      	bne.n	8003608 <HAL_UART_Transmit+0x68>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d104      	bne.n	8003608 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80035fe:	2300      	movs	r3, #0
 8003600:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	61bb      	str	r3, [r7, #24]
 8003606:	e003      	b.n	8003610 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800360c:	2300      	movs	r3, #0
 800360e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003610:	e02c      	b.n	800366c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2200      	movs	r2, #0
 800361a:	2180      	movs	r1, #128	; 0x80
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 fc5a 	bl	8003ed6 <UART_WaitOnFlagUntilTimeout>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e038      	b.n	800369e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10b      	bne.n	800364a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	461a      	mov	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003640:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	3302      	adds	r3, #2
 8003646:	61bb      	str	r3, [r7, #24]
 8003648:	e007      	b.n	800365a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	781a      	ldrb	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	3301      	adds	r3, #1
 8003658:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003660:	b29b      	uxth	r3, r3
 8003662:	3b01      	subs	r3, #1
 8003664:	b29a      	uxth	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003672:	b29b      	uxth	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1cc      	bne.n	8003612 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	2200      	movs	r2, #0
 8003680:	2140      	movs	r1, #64	; 0x40
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 fc27 	bl	8003ed6 <UART_WaitOnFlagUntilTimeout>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e005      	b.n	800369e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2220      	movs	r2, #32
 8003696:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003698:	2300      	movs	r3, #0
 800369a:	e000      	b.n	800369e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800369c:	2302      	movs	r3, #2
  }
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3720      	adds	r7, #32
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b08a      	sub	sp, #40	; 0x28
 80036aa:	af02      	add	r7, sp, #8
 80036ac:	60f8      	str	r0, [r7, #12]
 80036ae:	60b9      	str	r1, [r7, #8]
 80036b0:	603b      	str	r3, [r7, #0]
 80036b2:	4613      	mov	r3, r2
 80036b4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036bc:	2b20      	cmp	r3, #32
 80036be:	f040 80b1 	bne.w	8003824 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d002      	beq.n	80036ce <HAL_UART_Receive+0x28>
 80036c8:	88fb      	ldrh	r3, [r7, #6]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e0a9      	b.n	8003826 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2222      	movs	r2, #34	; 0x22
 80036de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036e8:	f7fd fe0a 	bl	8001300 <HAL_GetTick>
 80036ec:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	88fa      	ldrh	r2, [r7, #6]
 80036f2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	88fa      	ldrh	r2, [r7, #6]
 80036fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003706:	d10e      	bne.n	8003726 <HAL_UART_Receive+0x80>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d105      	bne.n	800371c <HAL_UART_Receive+0x76>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003716:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800371a:	e02d      	b.n	8003778 <HAL_UART_Receive+0xd2>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	22ff      	movs	r2, #255	; 0xff
 8003720:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003724:	e028      	b.n	8003778 <HAL_UART_Receive+0xd2>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10d      	bne.n	800374a <HAL_UART_Receive+0xa4>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d104      	bne.n	8003740 <HAL_UART_Receive+0x9a>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	22ff      	movs	r2, #255	; 0xff
 800373a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800373e:	e01b      	b.n	8003778 <HAL_UART_Receive+0xd2>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	227f      	movs	r2, #127	; 0x7f
 8003744:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003748:	e016      	b.n	8003778 <HAL_UART_Receive+0xd2>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003752:	d10d      	bne.n	8003770 <HAL_UART_Receive+0xca>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d104      	bne.n	8003766 <HAL_UART_Receive+0xc0>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	227f      	movs	r2, #127	; 0x7f
 8003760:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003764:	e008      	b.n	8003778 <HAL_UART_Receive+0xd2>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	223f      	movs	r2, #63	; 0x3f
 800376a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800376e:	e003      	b.n	8003778 <HAL_UART_Receive+0xd2>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800377e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003788:	d108      	bne.n	800379c <HAL_UART_Receive+0xf6>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d104      	bne.n	800379c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	61bb      	str	r3, [r7, #24]
 800379a:	e003      	b.n	80037a4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037a0:	2300      	movs	r3, #0
 80037a2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80037a4:	e032      	b.n	800380c <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	2200      	movs	r2, #0
 80037ae:	2120      	movs	r1, #32
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f000 fb90 	bl	8003ed6 <UART_WaitOnFlagUntilTimeout>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e032      	b.n	8003826 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10c      	bne.n	80037e0 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	8a7b      	ldrh	r3, [r7, #18]
 80037d0:	4013      	ands	r3, r2
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	3302      	adds	r3, #2
 80037dc:	61bb      	str	r3, [r7, #24]
 80037de:	e00c      	b.n	80037fa <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	8a7b      	ldrh	r3, [r7, #18]
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	4013      	ands	r3, r2
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	3301      	adds	r3, #1
 80037f8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003800:	b29b      	uxth	r3, r3
 8003802:	3b01      	subs	r3, #1
 8003804:	b29a      	uxth	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003812:	b29b      	uxth	r3, r3
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1c6      	bne.n	80037a6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2220      	movs	r2, #32
 800381c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003820:	2300      	movs	r3, #0
 8003822:	e000      	b.n	8003826 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8003824:	2302      	movs	r3, #2
  }
}
 8003826:	4618      	mov	r0, r3
 8003828:	3720      	adds	r7, #32
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b088      	sub	sp, #32
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003838:	2300      	movs	r3, #0
 800383a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	431a      	orrs	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	69db      	ldr	r3, [r3, #28]
 8003850:	4313      	orrs	r3, r2
 8003852:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	4ba6      	ldr	r3, [pc, #664]	; (8003af4 <UART_SetConfig+0x2c4>)
 800385c:	4013      	ands	r3, r2
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6812      	ldr	r2, [r2, #0]
 8003862:	6979      	ldr	r1, [r7, #20]
 8003864:	430b      	orrs	r3, r1
 8003866:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	4313      	orrs	r3, r2
 800388c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	430a      	orrs	r2, r1
 80038a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a94      	ldr	r2, [pc, #592]	; (8003af8 <UART_SetConfig+0x2c8>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d120      	bne.n	80038ee <UART_SetConfig+0xbe>
 80038ac:	4b93      	ldr	r3, [pc, #588]	; (8003afc <UART_SetConfig+0x2cc>)
 80038ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d816      	bhi.n	80038e8 <UART_SetConfig+0xb8>
 80038ba:	a201      	add	r2, pc, #4	; (adr r2, 80038c0 <UART_SetConfig+0x90>)
 80038bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c0:	080038d1 	.word	0x080038d1
 80038c4:	080038dd 	.word	0x080038dd
 80038c8:	080038d7 	.word	0x080038d7
 80038cc:	080038e3 	.word	0x080038e3
 80038d0:	2301      	movs	r3, #1
 80038d2:	77fb      	strb	r3, [r7, #31]
 80038d4:	e150      	b.n	8003b78 <UART_SetConfig+0x348>
 80038d6:	2302      	movs	r3, #2
 80038d8:	77fb      	strb	r3, [r7, #31]
 80038da:	e14d      	b.n	8003b78 <UART_SetConfig+0x348>
 80038dc:	2304      	movs	r3, #4
 80038de:	77fb      	strb	r3, [r7, #31]
 80038e0:	e14a      	b.n	8003b78 <UART_SetConfig+0x348>
 80038e2:	2308      	movs	r3, #8
 80038e4:	77fb      	strb	r3, [r7, #31]
 80038e6:	e147      	b.n	8003b78 <UART_SetConfig+0x348>
 80038e8:	2310      	movs	r3, #16
 80038ea:	77fb      	strb	r3, [r7, #31]
 80038ec:	e144      	b.n	8003b78 <UART_SetConfig+0x348>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a83      	ldr	r2, [pc, #524]	; (8003b00 <UART_SetConfig+0x2d0>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d132      	bne.n	800395e <UART_SetConfig+0x12e>
 80038f8:	4b80      	ldr	r3, [pc, #512]	; (8003afc <UART_SetConfig+0x2cc>)
 80038fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fe:	f003 030c 	and.w	r3, r3, #12
 8003902:	2b0c      	cmp	r3, #12
 8003904:	d828      	bhi.n	8003958 <UART_SetConfig+0x128>
 8003906:	a201      	add	r2, pc, #4	; (adr r2, 800390c <UART_SetConfig+0xdc>)
 8003908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390c:	08003941 	.word	0x08003941
 8003910:	08003959 	.word	0x08003959
 8003914:	08003959 	.word	0x08003959
 8003918:	08003959 	.word	0x08003959
 800391c:	0800394d 	.word	0x0800394d
 8003920:	08003959 	.word	0x08003959
 8003924:	08003959 	.word	0x08003959
 8003928:	08003959 	.word	0x08003959
 800392c:	08003947 	.word	0x08003947
 8003930:	08003959 	.word	0x08003959
 8003934:	08003959 	.word	0x08003959
 8003938:	08003959 	.word	0x08003959
 800393c:	08003953 	.word	0x08003953
 8003940:	2300      	movs	r3, #0
 8003942:	77fb      	strb	r3, [r7, #31]
 8003944:	e118      	b.n	8003b78 <UART_SetConfig+0x348>
 8003946:	2302      	movs	r3, #2
 8003948:	77fb      	strb	r3, [r7, #31]
 800394a:	e115      	b.n	8003b78 <UART_SetConfig+0x348>
 800394c:	2304      	movs	r3, #4
 800394e:	77fb      	strb	r3, [r7, #31]
 8003950:	e112      	b.n	8003b78 <UART_SetConfig+0x348>
 8003952:	2308      	movs	r3, #8
 8003954:	77fb      	strb	r3, [r7, #31]
 8003956:	e10f      	b.n	8003b78 <UART_SetConfig+0x348>
 8003958:	2310      	movs	r3, #16
 800395a:	77fb      	strb	r3, [r7, #31]
 800395c:	e10c      	b.n	8003b78 <UART_SetConfig+0x348>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a68      	ldr	r2, [pc, #416]	; (8003b04 <UART_SetConfig+0x2d4>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d120      	bne.n	80039aa <UART_SetConfig+0x17a>
 8003968:	4b64      	ldr	r3, [pc, #400]	; (8003afc <UART_SetConfig+0x2cc>)
 800396a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003972:	2b30      	cmp	r3, #48	; 0x30
 8003974:	d013      	beq.n	800399e <UART_SetConfig+0x16e>
 8003976:	2b30      	cmp	r3, #48	; 0x30
 8003978:	d814      	bhi.n	80039a4 <UART_SetConfig+0x174>
 800397a:	2b20      	cmp	r3, #32
 800397c:	d009      	beq.n	8003992 <UART_SetConfig+0x162>
 800397e:	2b20      	cmp	r3, #32
 8003980:	d810      	bhi.n	80039a4 <UART_SetConfig+0x174>
 8003982:	2b00      	cmp	r3, #0
 8003984:	d002      	beq.n	800398c <UART_SetConfig+0x15c>
 8003986:	2b10      	cmp	r3, #16
 8003988:	d006      	beq.n	8003998 <UART_SetConfig+0x168>
 800398a:	e00b      	b.n	80039a4 <UART_SetConfig+0x174>
 800398c:	2300      	movs	r3, #0
 800398e:	77fb      	strb	r3, [r7, #31]
 8003990:	e0f2      	b.n	8003b78 <UART_SetConfig+0x348>
 8003992:	2302      	movs	r3, #2
 8003994:	77fb      	strb	r3, [r7, #31]
 8003996:	e0ef      	b.n	8003b78 <UART_SetConfig+0x348>
 8003998:	2304      	movs	r3, #4
 800399a:	77fb      	strb	r3, [r7, #31]
 800399c:	e0ec      	b.n	8003b78 <UART_SetConfig+0x348>
 800399e:	2308      	movs	r3, #8
 80039a0:	77fb      	strb	r3, [r7, #31]
 80039a2:	e0e9      	b.n	8003b78 <UART_SetConfig+0x348>
 80039a4:	2310      	movs	r3, #16
 80039a6:	77fb      	strb	r3, [r7, #31]
 80039a8:	e0e6      	b.n	8003b78 <UART_SetConfig+0x348>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a56      	ldr	r2, [pc, #344]	; (8003b08 <UART_SetConfig+0x2d8>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d120      	bne.n	80039f6 <UART_SetConfig+0x1c6>
 80039b4:	4b51      	ldr	r3, [pc, #324]	; (8003afc <UART_SetConfig+0x2cc>)
 80039b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80039be:	2bc0      	cmp	r3, #192	; 0xc0
 80039c0:	d013      	beq.n	80039ea <UART_SetConfig+0x1ba>
 80039c2:	2bc0      	cmp	r3, #192	; 0xc0
 80039c4:	d814      	bhi.n	80039f0 <UART_SetConfig+0x1c0>
 80039c6:	2b80      	cmp	r3, #128	; 0x80
 80039c8:	d009      	beq.n	80039de <UART_SetConfig+0x1ae>
 80039ca:	2b80      	cmp	r3, #128	; 0x80
 80039cc:	d810      	bhi.n	80039f0 <UART_SetConfig+0x1c0>
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d002      	beq.n	80039d8 <UART_SetConfig+0x1a8>
 80039d2:	2b40      	cmp	r3, #64	; 0x40
 80039d4:	d006      	beq.n	80039e4 <UART_SetConfig+0x1b4>
 80039d6:	e00b      	b.n	80039f0 <UART_SetConfig+0x1c0>
 80039d8:	2300      	movs	r3, #0
 80039da:	77fb      	strb	r3, [r7, #31]
 80039dc:	e0cc      	b.n	8003b78 <UART_SetConfig+0x348>
 80039de:	2302      	movs	r3, #2
 80039e0:	77fb      	strb	r3, [r7, #31]
 80039e2:	e0c9      	b.n	8003b78 <UART_SetConfig+0x348>
 80039e4:	2304      	movs	r3, #4
 80039e6:	77fb      	strb	r3, [r7, #31]
 80039e8:	e0c6      	b.n	8003b78 <UART_SetConfig+0x348>
 80039ea:	2308      	movs	r3, #8
 80039ec:	77fb      	strb	r3, [r7, #31]
 80039ee:	e0c3      	b.n	8003b78 <UART_SetConfig+0x348>
 80039f0:	2310      	movs	r3, #16
 80039f2:	77fb      	strb	r3, [r7, #31]
 80039f4:	e0c0      	b.n	8003b78 <UART_SetConfig+0x348>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a44      	ldr	r2, [pc, #272]	; (8003b0c <UART_SetConfig+0x2dc>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d125      	bne.n	8003a4c <UART_SetConfig+0x21c>
 8003a00:	4b3e      	ldr	r3, [pc, #248]	; (8003afc <UART_SetConfig+0x2cc>)
 8003a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a0e:	d017      	beq.n	8003a40 <UART_SetConfig+0x210>
 8003a10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a14:	d817      	bhi.n	8003a46 <UART_SetConfig+0x216>
 8003a16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a1a:	d00b      	beq.n	8003a34 <UART_SetConfig+0x204>
 8003a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a20:	d811      	bhi.n	8003a46 <UART_SetConfig+0x216>
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <UART_SetConfig+0x1fe>
 8003a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a2a:	d006      	beq.n	8003a3a <UART_SetConfig+0x20a>
 8003a2c:	e00b      	b.n	8003a46 <UART_SetConfig+0x216>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	77fb      	strb	r3, [r7, #31]
 8003a32:	e0a1      	b.n	8003b78 <UART_SetConfig+0x348>
 8003a34:	2302      	movs	r3, #2
 8003a36:	77fb      	strb	r3, [r7, #31]
 8003a38:	e09e      	b.n	8003b78 <UART_SetConfig+0x348>
 8003a3a:	2304      	movs	r3, #4
 8003a3c:	77fb      	strb	r3, [r7, #31]
 8003a3e:	e09b      	b.n	8003b78 <UART_SetConfig+0x348>
 8003a40:	2308      	movs	r3, #8
 8003a42:	77fb      	strb	r3, [r7, #31]
 8003a44:	e098      	b.n	8003b78 <UART_SetConfig+0x348>
 8003a46:	2310      	movs	r3, #16
 8003a48:	77fb      	strb	r3, [r7, #31]
 8003a4a:	e095      	b.n	8003b78 <UART_SetConfig+0x348>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a2f      	ldr	r2, [pc, #188]	; (8003b10 <UART_SetConfig+0x2e0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d125      	bne.n	8003aa2 <UART_SetConfig+0x272>
 8003a56:	4b29      	ldr	r3, [pc, #164]	; (8003afc <UART_SetConfig+0x2cc>)
 8003a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a64:	d017      	beq.n	8003a96 <UART_SetConfig+0x266>
 8003a66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a6a:	d817      	bhi.n	8003a9c <UART_SetConfig+0x26c>
 8003a6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a70:	d00b      	beq.n	8003a8a <UART_SetConfig+0x25a>
 8003a72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a76:	d811      	bhi.n	8003a9c <UART_SetConfig+0x26c>
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <UART_SetConfig+0x254>
 8003a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a80:	d006      	beq.n	8003a90 <UART_SetConfig+0x260>
 8003a82:	e00b      	b.n	8003a9c <UART_SetConfig+0x26c>
 8003a84:	2301      	movs	r3, #1
 8003a86:	77fb      	strb	r3, [r7, #31]
 8003a88:	e076      	b.n	8003b78 <UART_SetConfig+0x348>
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	77fb      	strb	r3, [r7, #31]
 8003a8e:	e073      	b.n	8003b78 <UART_SetConfig+0x348>
 8003a90:	2304      	movs	r3, #4
 8003a92:	77fb      	strb	r3, [r7, #31]
 8003a94:	e070      	b.n	8003b78 <UART_SetConfig+0x348>
 8003a96:	2308      	movs	r3, #8
 8003a98:	77fb      	strb	r3, [r7, #31]
 8003a9a:	e06d      	b.n	8003b78 <UART_SetConfig+0x348>
 8003a9c:	2310      	movs	r3, #16
 8003a9e:	77fb      	strb	r3, [r7, #31]
 8003aa0:	e06a      	b.n	8003b78 <UART_SetConfig+0x348>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a1b      	ldr	r2, [pc, #108]	; (8003b14 <UART_SetConfig+0x2e4>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d138      	bne.n	8003b1e <UART_SetConfig+0x2ee>
 8003aac:	4b13      	ldr	r3, [pc, #76]	; (8003afc <UART_SetConfig+0x2cc>)
 8003aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003ab6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003aba:	d017      	beq.n	8003aec <UART_SetConfig+0x2bc>
 8003abc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ac0:	d82a      	bhi.n	8003b18 <UART_SetConfig+0x2e8>
 8003ac2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ac6:	d00b      	beq.n	8003ae0 <UART_SetConfig+0x2b0>
 8003ac8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003acc:	d824      	bhi.n	8003b18 <UART_SetConfig+0x2e8>
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <UART_SetConfig+0x2aa>
 8003ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad6:	d006      	beq.n	8003ae6 <UART_SetConfig+0x2b6>
 8003ad8:	e01e      	b.n	8003b18 <UART_SetConfig+0x2e8>
 8003ada:	2300      	movs	r3, #0
 8003adc:	77fb      	strb	r3, [r7, #31]
 8003ade:	e04b      	b.n	8003b78 <UART_SetConfig+0x348>
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	77fb      	strb	r3, [r7, #31]
 8003ae4:	e048      	b.n	8003b78 <UART_SetConfig+0x348>
 8003ae6:	2304      	movs	r3, #4
 8003ae8:	77fb      	strb	r3, [r7, #31]
 8003aea:	e045      	b.n	8003b78 <UART_SetConfig+0x348>
 8003aec:	2308      	movs	r3, #8
 8003aee:	77fb      	strb	r3, [r7, #31]
 8003af0:	e042      	b.n	8003b78 <UART_SetConfig+0x348>
 8003af2:	bf00      	nop
 8003af4:	efff69f3 	.word	0xefff69f3
 8003af8:	40011000 	.word	0x40011000
 8003afc:	40023800 	.word	0x40023800
 8003b00:	40004400 	.word	0x40004400
 8003b04:	40004800 	.word	0x40004800
 8003b08:	40004c00 	.word	0x40004c00
 8003b0c:	40005000 	.word	0x40005000
 8003b10:	40011400 	.word	0x40011400
 8003b14:	40007800 	.word	0x40007800
 8003b18:	2310      	movs	r3, #16
 8003b1a:	77fb      	strb	r3, [r7, #31]
 8003b1c:	e02c      	b.n	8003b78 <UART_SetConfig+0x348>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a72      	ldr	r2, [pc, #456]	; (8003cec <UART_SetConfig+0x4bc>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d125      	bne.n	8003b74 <UART_SetConfig+0x344>
 8003b28:	4b71      	ldr	r3, [pc, #452]	; (8003cf0 <UART_SetConfig+0x4c0>)
 8003b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003b32:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b36:	d017      	beq.n	8003b68 <UART_SetConfig+0x338>
 8003b38:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b3c:	d817      	bhi.n	8003b6e <UART_SetConfig+0x33e>
 8003b3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b42:	d00b      	beq.n	8003b5c <UART_SetConfig+0x32c>
 8003b44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b48:	d811      	bhi.n	8003b6e <UART_SetConfig+0x33e>
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <UART_SetConfig+0x326>
 8003b4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b52:	d006      	beq.n	8003b62 <UART_SetConfig+0x332>
 8003b54:	e00b      	b.n	8003b6e <UART_SetConfig+0x33e>
 8003b56:	2300      	movs	r3, #0
 8003b58:	77fb      	strb	r3, [r7, #31]
 8003b5a:	e00d      	b.n	8003b78 <UART_SetConfig+0x348>
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	77fb      	strb	r3, [r7, #31]
 8003b60:	e00a      	b.n	8003b78 <UART_SetConfig+0x348>
 8003b62:	2304      	movs	r3, #4
 8003b64:	77fb      	strb	r3, [r7, #31]
 8003b66:	e007      	b.n	8003b78 <UART_SetConfig+0x348>
 8003b68:	2308      	movs	r3, #8
 8003b6a:	77fb      	strb	r3, [r7, #31]
 8003b6c:	e004      	b.n	8003b78 <UART_SetConfig+0x348>
 8003b6e:	2310      	movs	r3, #16
 8003b70:	77fb      	strb	r3, [r7, #31]
 8003b72:	e001      	b.n	8003b78 <UART_SetConfig+0x348>
 8003b74:	2310      	movs	r3, #16
 8003b76:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	69db      	ldr	r3, [r3, #28]
 8003b7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b80:	d15b      	bne.n	8003c3a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003b82:	7ffb      	ldrb	r3, [r7, #31]
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d828      	bhi.n	8003bda <UART_SetConfig+0x3aa>
 8003b88:	a201      	add	r2, pc, #4	; (adr r2, 8003b90 <UART_SetConfig+0x360>)
 8003b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8e:	bf00      	nop
 8003b90:	08003bb5 	.word	0x08003bb5
 8003b94:	08003bbd 	.word	0x08003bbd
 8003b98:	08003bc5 	.word	0x08003bc5
 8003b9c:	08003bdb 	.word	0x08003bdb
 8003ba0:	08003bcb 	.word	0x08003bcb
 8003ba4:	08003bdb 	.word	0x08003bdb
 8003ba8:	08003bdb 	.word	0x08003bdb
 8003bac:	08003bdb 	.word	0x08003bdb
 8003bb0:	08003bd3 	.word	0x08003bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bb4:	f7ff f856 	bl	8002c64 <HAL_RCC_GetPCLK1Freq>
 8003bb8:	61b8      	str	r0, [r7, #24]
        break;
 8003bba:	e013      	b.n	8003be4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bbc:	f7ff f866 	bl	8002c8c <HAL_RCC_GetPCLK2Freq>
 8003bc0:	61b8      	str	r0, [r7, #24]
        break;
 8003bc2:	e00f      	b.n	8003be4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bc4:	4b4b      	ldr	r3, [pc, #300]	; (8003cf4 <UART_SetConfig+0x4c4>)
 8003bc6:	61bb      	str	r3, [r7, #24]
        break;
 8003bc8:	e00c      	b.n	8003be4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bca:	f7fe ff39 	bl	8002a40 <HAL_RCC_GetSysClockFreq>
 8003bce:	61b8      	str	r0, [r7, #24]
        break;
 8003bd0:	e008      	b.n	8003be4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bd6:	61bb      	str	r3, [r7, #24]
        break;
 8003bd8:	e004      	b.n	8003be4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	77bb      	strb	r3, [r7, #30]
        break;
 8003be2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d074      	beq.n	8003cd4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	005a      	lsls	r2, r3, #1
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	085b      	lsrs	r3, r3, #1
 8003bf4:	441a      	add	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bfe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	2b0f      	cmp	r3, #15
 8003c04:	d916      	bls.n	8003c34 <UART_SetConfig+0x404>
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c0c:	d212      	bcs.n	8003c34 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	f023 030f 	bic.w	r3, r3, #15
 8003c16:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	085b      	lsrs	r3, r3, #1
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	f003 0307 	and.w	r3, r3, #7
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	89fb      	ldrh	r3, [r7, #14]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	89fa      	ldrh	r2, [r7, #14]
 8003c30:	60da      	str	r2, [r3, #12]
 8003c32:	e04f      	b.n	8003cd4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	77bb      	strb	r3, [r7, #30]
 8003c38:	e04c      	b.n	8003cd4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c3a:	7ffb      	ldrb	r3, [r7, #31]
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d828      	bhi.n	8003c92 <UART_SetConfig+0x462>
 8003c40:	a201      	add	r2, pc, #4	; (adr r2, 8003c48 <UART_SetConfig+0x418>)
 8003c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c46:	bf00      	nop
 8003c48:	08003c6d 	.word	0x08003c6d
 8003c4c:	08003c75 	.word	0x08003c75
 8003c50:	08003c7d 	.word	0x08003c7d
 8003c54:	08003c93 	.word	0x08003c93
 8003c58:	08003c83 	.word	0x08003c83
 8003c5c:	08003c93 	.word	0x08003c93
 8003c60:	08003c93 	.word	0x08003c93
 8003c64:	08003c93 	.word	0x08003c93
 8003c68:	08003c8b 	.word	0x08003c8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c6c:	f7fe fffa 	bl	8002c64 <HAL_RCC_GetPCLK1Freq>
 8003c70:	61b8      	str	r0, [r7, #24]
        break;
 8003c72:	e013      	b.n	8003c9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c74:	f7ff f80a 	bl	8002c8c <HAL_RCC_GetPCLK2Freq>
 8003c78:	61b8      	str	r0, [r7, #24]
        break;
 8003c7a:	e00f      	b.n	8003c9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c7c:	4b1d      	ldr	r3, [pc, #116]	; (8003cf4 <UART_SetConfig+0x4c4>)
 8003c7e:	61bb      	str	r3, [r7, #24]
        break;
 8003c80:	e00c      	b.n	8003c9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c82:	f7fe fedd 	bl	8002a40 <HAL_RCC_GetSysClockFreq>
 8003c86:	61b8      	str	r0, [r7, #24]
        break;
 8003c88:	e008      	b.n	8003c9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c8e:	61bb      	str	r3, [r7, #24]
        break;
 8003c90:	e004      	b.n	8003c9c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003c92:	2300      	movs	r3, #0
 8003c94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	77bb      	strb	r3, [r7, #30]
        break;
 8003c9a:	bf00      	nop
    }

    if (pclk != 0U)
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d018      	beq.n	8003cd4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	085a      	lsrs	r2, r3, #1
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	441a      	add	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	2b0f      	cmp	r3, #15
 8003cba:	d909      	bls.n	8003cd0 <UART_SetConfig+0x4a0>
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc2:	d205      	bcs.n	8003cd0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	60da      	str	r2, [r3, #12]
 8003cce:	e001      	b.n	8003cd4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003ce0:	7fbb      	ldrb	r3, [r7, #30]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3720      	adds	r7, #32
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40007c00 	.word	0x40007c00
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	00f42400 	.word	0x00f42400

08003cf8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00a      	beq.n	8003d22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00a      	beq.n	8003d66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00a      	beq.n	8003d88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	f003 0310 	and.w	r3, r3, #16
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00a      	beq.n	8003daa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	f003 0320 	and.w	r3, r3, #32
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d01a      	beq.n	8003e0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003df6:	d10a      	bne.n	8003e0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	605a      	str	r2, [r3, #4]
  }
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af02      	add	r7, sp, #8
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e4c:	f7fd fa58 	bl	8001300 <HAL_GetTick>
 8003e50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d10e      	bne.n	8003e7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f831 	bl	8003ed6 <UART_WaitOnFlagUntilTimeout>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e027      	b.n	8003ece <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b04      	cmp	r3, #4
 8003e8a:	d10e      	bne.n	8003eaa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f81b 	bl	8003ed6 <UART_WaitOnFlagUntilTimeout>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e011      	b.n	8003ece <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2220      	movs	r2, #32
 8003eae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b09c      	sub	sp, #112	; 0x70
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	60f8      	str	r0, [r7, #12]
 8003ede:	60b9      	str	r1, [r7, #8]
 8003ee0:	603b      	str	r3, [r7, #0]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ee6:	e0a7      	b.n	8004038 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eee:	f000 80a3 	beq.w	8004038 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ef2:	f7fd fa05 	bl	8001300 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d302      	bcc.n	8003f08 <UART_WaitOnFlagUntilTimeout+0x32>
 8003f02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d13f      	bne.n	8003f88 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f10:	e853 3f00 	ldrex	r3, [r3]
 8003f14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f1c:	667b      	str	r3, [r7, #100]	; 0x64
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f28:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f2e:	e841 2300 	strex	r3, r2, [r1]
 8003f32:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003f34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1e6      	bne.n	8003f08 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	3308      	adds	r3, #8
 8003f40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f44:	e853 3f00 	ldrex	r3, [r3]
 8003f48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4c:	f023 0301 	bic.w	r3, r3, #1
 8003f50:	663b      	str	r3, [r7, #96]	; 0x60
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	3308      	adds	r3, #8
 8003f58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f5a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f62:	e841 2300 	strex	r3, r2, [r1]
 8003f66:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1e5      	bne.n	8003f3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2220      	movs	r2, #32
 8003f72:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e068      	b.n	800405a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0304 	and.w	r3, r3, #4
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d050      	beq.n	8004038 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	69db      	ldr	r3, [r3, #28]
 8003f9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fa4:	d148      	bne.n	8004038 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fae:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb8:	e853 3f00 	ldrex	r3, [r3]
 8003fbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fce:	637b      	str	r3, [r7, #52]	; 0x34
 8003fd0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fd6:	e841 2300 	strex	r3, r2, [r1]
 8003fda:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1e6      	bne.n	8003fb0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3308      	adds	r3, #8
 8003fe8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	e853 3f00 	ldrex	r3, [r3]
 8003ff0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f023 0301 	bic.w	r3, r3, #1
 8003ff8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3308      	adds	r3, #8
 8004000:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004002:	623a      	str	r2, [r7, #32]
 8004004:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004006:	69f9      	ldr	r1, [r7, #28]
 8004008:	6a3a      	ldr	r2, [r7, #32]
 800400a:	e841 2300 	strex	r3, r2, [r1]
 800400e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1e5      	bne.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2220      	movs	r2, #32
 800401a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2220      	movs	r2, #32
 8004020:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2220      	movs	r2, #32
 8004028:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e010      	b.n	800405a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	69da      	ldr	r2, [r3, #28]
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	4013      	ands	r3, r2
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	429a      	cmp	r2, r3
 8004046:	bf0c      	ite	eq
 8004048:	2301      	moveq	r3, #1
 800404a:	2300      	movne	r3, #0
 800404c:	b2db      	uxtb	r3, r3
 800404e:	461a      	mov	r2, r3
 8004050:	79fb      	ldrb	r3, [r7, #7]
 8004052:	429a      	cmp	r2, r3
 8004054:	f43f af48 	beq.w	8003ee8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3770      	adds	r7, #112	; 0x70
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
	...

08004064 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004064:	b084      	sub	sp, #16
 8004066:	b580      	push	{r7, lr}
 8004068:	b084      	sub	sp, #16
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
 800406e:	f107 001c 	add.w	r0, r7, #28
 8004072:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004078:	2b01      	cmp	r3, #1
 800407a:	d120      	bne.n	80040be <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004080:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68da      	ldr	r2, [r3, #12]
 800408c:	4b20      	ldr	r3, [pc, #128]	; (8004110 <USB_CoreInit+0xac>)
 800408e:	4013      	ands	r3, r2
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80040a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d105      	bne.n	80040b2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 fa96 	bl	80045e4 <USB_CoreReset>
 80040b8:	4603      	mov	r3, r0
 80040ba:	73fb      	strb	r3, [r7, #15]
 80040bc:	e010      	b.n	80040e0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 fa8a 	bl	80045e4 <USB_CoreReset>
 80040d0:	4603      	mov	r3, r0
 80040d2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80040e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d10b      	bne.n	80040fe <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f043 0206 	orr.w	r2, r3, #6
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f043 0220 	orr.w	r2, r3, #32
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80040fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004100:	4618      	mov	r0, r3
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800410a:	b004      	add	sp, #16
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	ffbdffbf 	.word	0xffbdffbf

08004114 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f023 0201 	bic.w	r2, r3, #1
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b084      	sub	sp, #16
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
 800413e:	460b      	mov	r3, r1
 8004140:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004142:	2300      	movs	r3, #0
 8004144:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004152:	78fb      	ldrb	r3, [r7, #3]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d115      	bne.n	8004184 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004164:	2001      	movs	r0, #1
 8004166:	f7fd f8d7 	bl	8001318 <HAL_Delay>
      ms++;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	3301      	adds	r3, #1
 800416e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 fa29 	bl	80045c8 <USB_GetMode>
 8004176:	4603      	mov	r3, r0
 8004178:	2b01      	cmp	r3, #1
 800417a:	d01e      	beq.n	80041ba <USB_SetCurrentMode+0x84>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2b31      	cmp	r3, #49	; 0x31
 8004180:	d9f0      	bls.n	8004164 <USB_SetCurrentMode+0x2e>
 8004182:	e01a      	b.n	80041ba <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004184:	78fb      	ldrb	r3, [r7, #3]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d115      	bne.n	80041b6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004196:	2001      	movs	r0, #1
 8004198:	f7fd f8be 	bl	8001318 <HAL_Delay>
      ms++;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	3301      	adds	r3, #1
 80041a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 fa10 	bl	80045c8 <USB_GetMode>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d005      	beq.n	80041ba <USB_SetCurrentMode+0x84>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2b31      	cmp	r3, #49	; 0x31
 80041b2:	d9f0      	bls.n	8004196 <USB_SetCurrentMode+0x60>
 80041b4:	e001      	b.n	80041ba <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e005      	b.n	80041c6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2b32      	cmp	r3, #50	; 0x32
 80041be:	d101      	bne.n	80041c4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e000      	b.n	80041c6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
	...

080041d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041d0:	b084      	sub	sp, #16
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b086      	sub	sp, #24
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
 80041da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80041de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80041e2:	2300      	movs	r3, #0
 80041e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80041ea:	2300      	movs	r3, #0
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	e009      	b.n	8004204 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	3340      	adds	r3, #64	; 0x40
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	2200      	movs	r2, #0
 80041fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	3301      	adds	r3, #1
 8004202:	613b      	str	r3, [r7, #16]
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	2b0e      	cmp	r3, #14
 8004208:	d9f2      	bls.n	80041f0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800420a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800420c:	2b00      	cmp	r3, #0
 800420e:	d11c      	bne.n	800424a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800421e:	f043 0302 	orr.w	r3, r3, #2
 8004222:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004228:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	e005      	b.n	8004256 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800425c:	461a      	mov	r2, r3
 800425e:	2300      	movs	r3, #0
 8004260:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004268:	4619      	mov	r1, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004270:	461a      	mov	r2, r3
 8004272:	680b      	ldr	r3, [r1, #0]
 8004274:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004278:	2b01      	cmp	r3, #1
 800427a:	d10c      	bne.n	8004296 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800427c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800427e:	2b00      	cmp	r3, #0
 8004280:	d104      	bne.n	800428c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004282:	2100      	movs	r1, #0
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f965 	bl	8004554 <USB_SetDevSpeed>
 800428a:	e008      	b.n	800429e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800428c:	2101      	movs	r1, #1
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f960 	bl	8004554 <USB_SetDevSpeed>
 8004294:	e003      	b.n	800429e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004296:	2103      	movs	r1, #3
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 f95b 	bl	8004554 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800429e:	2110      	movs	r1, #16
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f8f3 	bl	800448c <USB_FlushTxFifo>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f91f 	bl	80044f4 <USB_FlushRxFifo>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042c6:	461a      	mov	r2, r3
 80042c8:	2300      	movs	r3, #0
 80042ca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042d2:	461a      	mov	r2, r3
 80042d4:	2300      	movs	r3, #0
 80042d6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042de:	461a      	mov	r2, r3
 80042e0:	2300      	movs	r3, #0
 80042e2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042e4:	2300      	movs	r3, #0
 80042e6:	613b      	str	r3, [r7, #16]
 80042e8:	e043      	b.n	8004372 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	015a      	lsls	r2, r3, #5
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004300:	d118      	bne.n	8004334 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10a      	bne.n	800431e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	015a      	lsls	r2, r3, #5
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4413      	add	r3, r2
 8004310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004314:	461a      	mov	r2, r3
 8004316:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800431a:	6013      	str	r3, [r2, #0]
 800431c:	e013      	b.n	8004346 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	015a      	lsls	r2, r3, #5
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	4413      	add	r3, r2
 8004326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800432a:	461a      	mov	r2, r3
 800432c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	e008      	b.n	8004346 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	015a      	lsls	r2, r3, #5
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	4413      	add	r3, r2
 800433c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004340:	461a      	mov	r2, r3
 8004342:	2300      	movs	r3, #0
 8004344:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	015a      	lsls	r2, r3, #5
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	4413      	add	r3, r2
 800434e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004352:	461a      	mov	r2, r3
 8004354:	2300      	movs	r3, #0
 8004356:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4413      	add	r3, r2
 8004360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004364:	461a      	mov	r2, r3
 8004366:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800436a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	3301      	adds	r3, #1
 8004370:	613b      	str	r3, [r7, #16]
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	429a      	cmp	r2, r3
 8004378:	d3b7      	bcc.n	80042ea <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800437a:	2300      	movs	r3, #0
 800437c:	613b      	str	r3, [r7, #16]
 800437e:	e043      	b.n	8004408 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4413      	add	r3, r2
 8004388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004392:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004396:	d118      	bne.n	80043ca <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10a      	bne.n	80043b4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	015a      	lsls	r2, r3, #5
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043aa:	461a      	mov	r2, r3
 80043ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043b0:	6013      	str	r3, [r2, #0]
 80043b2:	e013      	b.n	80043dc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c0:	461a      	mov	r2, r3
 80043c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80043c6:	6013      	str	r3, [r2, #0]
 80043c8:	e008      	b.n	80043dc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	015a      	lsls	r2, r3, #5
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	4413      	add	r3, r2
 80043d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d6:	461a      	mov	r2, r3
 80043d8:	2300      	movs	r3, #0
 80043da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	015a      	lsls	r2, r3, #5
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	4413      	add	r3, r2
 80043e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e8:	461a      	mov	r2, r3
 80043ea:	2300      	movs	r3, #0
 80043ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	015a      	lsls	r2, r3, #5
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	4413      	add	r3, r2
 80043f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fa:	461a      	mov	r2, r3
 80043fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004400:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	3301      	adds	r3, #1
 8004406:	613b      	str	r3, [r7, #16]
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	429a      	cmp	r2, r3
 800440e:	d3b7      	bcc.n	8004380 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800441e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004422:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004430:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004434:	2b00      	cmp	r3, #0
 8004436:	d105      	bne.n	8004444 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	f043 0210 	orr.w	r2, r3, #16
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	699a      	ldr	r2, [r3, #24]
 8004448:	4b0e      	ldr	r3, [pc, #56]	; (8004484 <USB_DevInit+0x2b4>)
 800444a:	4313      	orrs	r3, r2
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004452:	2b00      	cmp	r3, #0
 8004454:	d005      	beq.n	8004462 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	f043 0208 	orr.w	r2, r3, #8
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004464:	2b01      	cmp	r3, #1
 8004466:	d105      	bne.n	8004474 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	699a      	ldr	r2, [r3, #24]
 800446c:	4b06      	ldr	r3, [pc, #24]	; (8004488 <USB_DevInit+0x2b8>)
 800446e:	4313      	orrs	r3, r2
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004474:	7dfb      	ldrb	r3, [r7, #23]
}
 8004476:	4618      	mov	r0, r3
 8004478:	3718      	adds	r7, #24
 800447a:	46bd      	mov	sp, r7
 800447c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004480:	b004      	add	sp, #16
 8004482:	4770      	bx	lr
 8004484:	803c3800 	.word	0x803c3800
 8004488:	40000004 	.word	0x40000004

0800448c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004496:	2300      	movs	r3, #0
 8004498:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	3301      	adds	r3, #1
 800449e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	4a13      	ldr	r2, [pc, #76]	; (80044f0 <USB_FlushTxFifo+0x64>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d901      	bls.n	80044ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e01b      	b.n	80044e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	daf2      	bge.n	800449a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	019b      	lsls	r3, r3, #6
 80044bc:	f043 0220 	orr.w	r2, r3, #32
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	3301      	adds	r3, #1
 80044c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	4a08      	ldr	r2, [pc, #32]	; (80044f0 <USB_FlushTxFifo+0x64>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d901      	bls.n	80044d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e006      	b.n	80044e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f003 0320 	and.w	r3, r3, #32
 80044de:	2b20      	cmp	r3, #32
 80044e0:	d0f0      	beq.n	80044c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3714      	adds	r7, #20
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	00030d40 	.word	0x00030d40

080044f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	3301      	adds	r3, #1
 8004504:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	4a11      	ldr	r2, [pc, #68]	; (8004550 <USB_FlushRxFifo+0x5c>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d901      	bls.n	8004512 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e018      	b.n	8004544 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	2b00      	cmp	r3, #0
 8004518:	daf2      	bge.n	8004500 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800451a:	2300      	movs	r3, #0
 800451c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2210      	movs	r2, #16
 8004522:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	3301      	adds	r3, #1
 8004528:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	4a08      	ldr	r2, [pc, #32]	; (8004550 <USB_FlushRxFifo+0x5c>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d901      	bls.n	8004536 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e006      	b.n	8004544 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	f003 0310 	and.w	r3, r3, #16
 800453e:	2b10      	cmp	r3, #16
 8004540:	d0f0      	beq.n	8004524 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3714      	adds	r7, #20
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	00030d40 	.word	0x00030d40

08004554 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	460b      	mov	r3, r1
 800455e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	78fb      	ldrb	r3, [r7, #3]
 800456e:	68f9      	ldr	r1, [r7, #12]
 8004570:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004574:	4313      	orrs	r3, r2
 8004576:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3714      	adds	r7, #20
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004586:	b480      	push	{r7}
 8004588:	b085      	sub	sp, #20
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80045a0:	f023 0303 	bic.w	r3, r3, #3
 80045a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045b4:	f043 0302 	orr.w	r3, r3, #2
 80045b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	f003 0301 	and.w	r3, r3, #1
}
 80045d8:	4618      	mov	r0, r3
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	3301      	adds	r3, #1
 80045f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	4a13      	ldr	r2, [pc, #76]	; (8004648 <USB_CoreReset+0x64>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d901      	bls.n	8004602 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e01b      	b.n	800463a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	2b00      	cmp	r3, #0
 8004608:	daf2      	bge.n	80045f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800460a:	2300      	movs	r3, #0
 800460c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	f043 0201 	orr.w	r2, r3, #1
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	3301      	adds	r3, #1
 800461e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4a09      	ldr	r2, [pc, #36]	; (8004648 <USB_CoreReset+0x64>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d901      	bls.n	800462c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e006      	b.n	800463a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b01      	cmp	r3, #1
 8004636:	d0f0      	beq.n	800461a <USB_CoreReset+0x36>

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	00030d40 	.word	0x00030d40

0800464c <__errno>:
 800464c:	4b01      	ldr	r3, [pc, #4]	; (8004654 <__errno+0x8>)
 800464e:	6818      	ldr	r0, [r3, #0]
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	20000010 	.word	0x20000010

08004658 <__libc_init_array>:
 8004658:	b570      	push	{r4, r5, r6, lr}
 800465a:	4d0d      	ldr	r5, [pc, #52]	; (8004690 <__libc_init_array+0x38>)
 800465c:	4c0d      	ldr	r4, [pc, #52]	; (8004694 <__libc_init_array+0x3c>)
 800465e:	1b64      	subs	r4, r4, r5
 8004660:	10a4      	asrs	r4, r4, #2
 8004662:	2600      	movs	r6, #0
 8004664:	42a6      	cmp	r6, r4
 8004666:	d109      	bne.n	800467c <__libc_init_array+0x24>
 8004668:	4d0b      	ldr	r5, [pc, #44]	; (8004698 <__libc_init_array+0x40>)
 800466a:	4c0c      	ldr	r4, [pc, #48]	; (800469c <__libc_init_array+0x44>)
 800466c:	f001 febe 	bl	80063ec <_init>
 8004670:	1b64      	subs	r4, r4, r5
 8004672:	10a4      	asrs	r4, r4, #2
 8004674:	2600      	movs	r6, #0
 8004676:	42a6      	cmp	r6, r4
 8004678:	d105      	bne.n	8004686 <__libc_init_array+0x2e>
 800467a:	bd70      	pop	{r4, r5, r6, pc}
 800467c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004680:	4798      	blx	r3
 8004682:	3601      	adds	r6, #1
 8004684:	e7ee      	b.n	8004664 <__libc_init_array+0xc>
 8004686:	f855 3b04 	ldr.w	r3, [r5], #4
 800468a:	4798      	blx	r3
 800468c:	3601      	adds	r6, #1
 800468e:	e7f2      	b.n	8004676 <__libc_init_array+0x1e>
 8004690:	080069b4 	.word	0x080069b4
 8004694:	080069b4 	.word	0x080069b4
 8004698:	080069b4 	.word	0x080069b4
 800469c:	080069b8 	.word	0x080069b8

080046a0 <memset>:
 80046a0:	4402      	add	r2, r0
 80046a2:	4603      	mov	r3, r0
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d100      	bne.n	80046aa <memset+0xa>
 80046a8:	4770      	bx	lr
 80046aa:	f803 1b01 	strb.w	r1, [r3], #1
 80046ae:	e7f9      	b.n	80046a4 <memset+0x4>

080046b0 <iprintf>:
 80046b0:	b40f      	push	{r0, r1, r2, r3}
 80046b2:	4b0a      	ldr	r3, [pc, #40]	; (80046dc <iprintf+0x2c>)
 80046b4:	b513      	push	{r0, r1, r4, lr}
 80046b6:	681c      	ldr	r4, [r3, #0]
 80046b8:	b124      	cbz	r4, 80046c4 <iprintf+0x14>
 80046ba:	69a3      	ldr	r3, [r4, #24]
 80046bc:	b913      	cbnz	r3, 80046c4 <iprintf+0x14>
 80046be:	4620      	mov	r0, r4
 80046c0:	f000 fa18 	bl	8004af4 <__sinit>
 80046c4:	ab05      	add	r3, sp, #20
 80046c6:	9a04      	ldr	r2, [sp, #16]
 80046c8:	68a1      	ldr	r1, [r4, #8]
 80046ca:	9301      	str	r3, [sp, #4]
 80046cc:	4620      	mov	r0, r4
 80046ce:	f000 fc45 	bl	8004f5c <_vfiprintf_r>
 80046d2:	b002      	add	sp, #8
 80046d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046d8:	b004      	add	sp, #16
 80046da:	4770      	bx	lr
 80046dc:	20000010 	.word	0x20000010

080046e0 <iscanf>:
 80046e0:	b40f      	push	{r0, r1, r2, r3}
 80046e2:	4b0a      	ldr	r3, [pc, #40]	; (800470c <iscanf+0x2c>)
 80046e4:	b513      	push	{r0, r1, r4, lr}
 80046e6:	681c      	ldr	r4, [r3, #0]
 80046e8:	b124      	cbz	r4, 80046f4 <iscanf+0x14>
 80046ea:	69a3      	ldr	r3, [r4, #24]
 80046ec:	b913      	cbnz	r3, 80046f4 <iscanf+0x14>
 80046ee:	4620      	mov	r0, r4
 80046f0:	f000 fa00 	bl	8004af4 <__sinit>
 80046f4:	ab05      	add	r3, sp, #20
 80046f6:	9a04      	ldr	r2, [sp, #16]
 80046f8:	6861      	ldr	r1, [r4, #4]
 80046fa:	9301      	str	r3, [sp, #4]
 80046fc:	4620      	mov	r0, r4
 80046fe:	f001 f897 	bl	8005830 <_vfiscanf_r>
 8004702:	b002      	add	sp, #8
 8004704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004708:	b004      	add	sp, #16
 800470a:	4770      	bx	lr
 800470c:	20000010 	.word	0x20000010

08004710 <setvbuf>:
 8004710:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004714:	461d      	mov	r5, r3
 8004716:	4b5d      	ldr	r3, [pc, #372]	; (800488c <setvbuf+0x17c>)
 8004718:	681f      	ldr	r7, [r3, #0]
 800471a:	4604      	mov	r4, r0
 800471c:	460e      	mov	r6, r1
 800471e:	4690      	mov	r8, r2
 8004720:	b127      	cbz	r7, 800472c <setvbuf+0x1c>
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	b913      	cbnz	r3, 800472c <setvbuf+0x1c>
 8004726:	4638      	mov	r0, r7
 8004728:	f000 f9e4 	bl	8004af4 <__sinit>
 800472c:	4b58      	ldr	r3, [pc, #352]	; (8004890 <setvbuf+0x180>)
 800472e:	429c      	cmp	r4, r3
 8004730:	d167      	bne.n	8004802 <setvbuf+0xf2>
 8004732:	687c      	ldr	r4, [r7, #4]
 8004734:	f1b8 0f02 	cmp.w	r8, #2
 8004738:	d006      	beq.n	8004748 <setvbuf+0x38>
 800473a:	f1b8 0f01 	cmp.w	r8, #1
 800473e:	f200 809f 	bhi.w	8004880 <setvbuf+0x170>
 8004742:	2d00      	cmp	r5, #0
 8004744:	f2c0 809c 	blt.w	8004880 <setvbuf+0x170>
 8004748:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800474a:	07db      	lsls	r3, r3, #31
 800474c:	d405      	bmi.n	800475a <setvbuf+0x4a>
 800474e:	89a3      	ldrh	r3, [r4, #12]
 8004750:	0598      	lsls	r0, r3, #22
 8004752:	d402      	bmi.n	800475a <setvbuf+0x4a>
 8004754:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004756:	f000 fa88 	bl	8004c6a <__retarget_lock_acquire_recursive>
 800475a:	4621      	mov	r1, r4
 800475c:	4638      	mov	r0, r7
 800475e:	f000 f923 	bl	80049a8 <_fflush_r>
 8004762:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004764:	b141      	cbz	r1, 8004778 <setvbuf+0x68>
 8004766:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800476a:	4299      	cmp	r1, r3
 800476c:	d002      	beq.n	8004774 <setvbuf+0x64>
 800476e:	4638      	mov	r0, r7
 8004770:	f000 faea 	bl	8004d48 <_free_r>
 8004774:	2300      	movs	r3, #0
 8004776:	6363      	str	r3, [r4, #52]	; 0x34
 8004778:	2300      	movs	r3, #0
 800477a:	61a3      	str	r3, [r4, #24]
 800477c:	6063      	str	r3, [r4, #4]
 800477e:	89a3      	ldrh	r3, [r4, #12]
 8004780:	0619      	lsls	r1, r3, #24
 8004782:	d503      	bpl.n	800478c <setvbuf+0x7c>
 8004784:	6921      	ldr	r1, [r4, #16]
 8004786:	4638      	mov	r0, r7
 8004788:	f000 fade 	bl	8004d48 <_free_r>
 800478c:	89a3      	ldrh	r3, [r4, #12]
 800478e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004792:	f023 0303 	bic.w	r3, r3, #3
 8004796:	f1b8 0f02 	cmp.w	r8, #2
 800479a:	81a3      	strh	r3, [r4, #12]
 800479c:	d06c      	beq.n	8004878 <setvbuf+0x168>
 800479e:	ab01      	add	r3, sp, #4
 80047a0:	466a      	mov	r2, sp
 80047a2:	4621      	mov	r1, r4
 80047a4:	4638      	mov	r0, r7
 80047a6:	f000 fa62 	bl	8004c6e <__swhatbuf_r>
 80047aa:	89a3      	ldrh	r3, [r4, #12]
 80047ac:	4318      	orrs	r0, r3
 80047ae:	81a0      	strh	r0, [r4, #12]
 80047b0:	2d00      	cmp	r5, #0
 80047b2:	d130      	bne.n	8004816 <setvbuf+0x106>
 80047b4:	9d00      	ldr	r5, [sp, #0]
 80047b6:	4628      	mov	r0, r5
 80047b8:	f000 fabe 	bl	8004d38 <malloc>
 80047bc:	4606      	mov	r6, r0
 80047be:	2800      	cmp	r0, #0
 80047c0:	d155      	bne.n	800486e <setvbuf+0x15e>
 80047c2:	f8dd 9000 	ldr.w	r9, [sp]
 80047c6:	45a9      	cmp	r9, r5
 80047c8:	d14a      	bne.n	8004860 <setvbuf+0x150>
 80047ca:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80047ce:	2200      	movs	r2, #0
 80047d0:	60a2      	str	r2, [r4, #8]
 80047d2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80047d6:	6022      	str	r2, [r4, #0]
 80047d8:	6122      	str	r2, [r4, #16]
 80047da:	2201      	movs	r2, #1
 80047dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047e0:	6162      	str	r2, [r4, #20]
 80047e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80047e4:	f043 0302 	orr.w	r3, r3, #2
 80047e8:	07d2      	lsls	r2, r2, #31
 80047ea:	81a3      	strh	r3, [r4, #12]
 80047ec:	d405      	bmi.n	80047fa <setvbuf+0xea>
 80047ee:	f413 7f00 	tst.w	r3, #512	; 0x200
 80047f2:	d102      	bne.n	80047fa <setvbuf+0xea>
 80047f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047f6:	f000 fa39 	bl	8004c6c <__retarget_lock_release_recursive>
 80047fa:	4628      	mov	r0, r5
 80047fc:	b003      	add	sp, #12
 80047fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004802:	4b24      	ldr	r3, [pc, #144]	; (8004894 <setvbuf+0x184>)
 8004804:	429c      	cmp	r4, r3
 8004806:	d101      	bne.n	800480c <setvbuf+0xfc>
 8004808:	68bc      	ldr	r4, [r7, #8]
 800480a:	e793      	b.n	8004734 <setvbuf+0x24>
 800480c:	4b22      	ldr	r3, [pc, #136]	; (8004898 <setvbuf+0x188>)
 800480e:	429c      	cmp	r4, r3
 8004810:	bf08      	it	eq
 8004812:	68fc      	ldreq	r4, [r7, #12]
 8004814:	e78e      	b.n	8004734 <setvbuf+0x24>
 8004816:	2e00      	cmp	r6, #0
 8004818:	d0cd      	beq.n	80047b6 <setvbuf+0xa6>
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	b913      	cbnz	r3, 8004824 <setvbuf+0x114>
 800481e:	4638      	mov	r0, r7
 8004820:	f000 f968 	bl	8004af4 <__sinit>
 8004824:	f1b8 0f01 	cmp.w	r8, #1
 8004828:	bf08      	it	eq
 800482a:	89a3      	ldrheq	r3, [r4, #12]
 800482c:	6026      	str	r6, [r4, #0]
 800482e:	bf04      	itt	eq
 8004830:	f043 0301 	orreq.w	r3, r3, #1
 8004834:	81a3      	strheq	r3, [r4, #12]
 8004836:	89a2      	ldrh	r2, [r4, #12]
 8004838:	f012 0308 	ands.w	r3, r2, #8
 800483c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004840:	d01c      	beq.n	800487c <setvbuf+0x16c>
 8004842:	07d3      	lsls	r3, r2, #31
 8004844:	bf41      	itttt	mi
 8004846:	2300      	movmi	r3, #0
 8004848:	426d      	negmi	r5, r5
 800484a:	60a3      	strmi	r3, [r4, #8]
 800484c:	61a5      	strmi	r5, [r4, #24]
 800484e:	bf58      	it	pl
 8004850:	60a5      	strpl	r5, [r4, #8]
 8004852:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004854:	f015 0501 	ands.w	r5, r5, #1
 8004858:	d115      	bne.n	8004886 <setvbuf+0x176>
 800485a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800485e:	e7c8      	b.n	80047f2 <setvbuf+0xe2>
 8004860:	4648      	mov	r0, r9
 8004862:	f000 fa69 	bl	8004d38 <malloc>
 8004866:	4606      	mov	r6, r0
 8004868:	2800      	cmp	r0, #0
 800486a:	d0ae      	beq.n	80047ca <setvbuf+0xba>
 800486c:	464d      	mov	r5, r9
 800486e:	89a3      	ldrh	r3, [r4, #12]
 8004870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004874:	81a3      	strh	r3, [r4, #12]
 8004876:	e7d0      	b.n	800481a <setvbuf+0x10a>
 8004878:	2500      	movs	r5, #0
 800487a:	e7a8      	b.n	80047ce <setvbuf+0xbe>
 800487c:	60a3      	str	r3, [r4, #8]
 800487e:	e7e8      	b.n	8004852 <setvbuf+0x142>
 8004880:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004884:	e7b9      	b.n	80047fa <setvbuf+0xea>
 8004886:	2500      	movs	r5, #0
 8004888:	e7b7      	b.n	80047fa <setvbuf+0xea>
 800488a:	bf00      	nop
 800488c:	20000010 	.word	0x20000010
 8004890:	0800681c 	.word	0x0800681c
 8004894:	0800683c 	.word	0x0800683c
 8004898:	080067fc 	.word	0x080067fc

0800489c <__sflush_r>:
 800489c:	898a      	ldrh	r2, [r1, #12]
 800489e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048a2:	4605      	mov	r5, r0
 80048a4:	0710      	lsls	r0, r2, #28
 80048a6:	460c      	mov	r4, r1
 80048a8:	d458      	bmi.n	800495c <__sflush_r+0xc0>
 80048aa:	684b      	ldr	r3, [r1, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	dc05      	bgt.n	80048bc <__sflush_r+0x20>
 80048b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	dc02      	bgt.n	80048bc <__sflush_r+0x20>
 80048b6:	2000      	movs	r0, #0
 80048b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048be:	2e00      	cmp	r6, #0
 80048c0:	d0f9      	beq.n	80048b6 <__sflush_r+0x1a>
 80048c2:	2300      	movs	r3, #0
 80048c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048c8:	682f      	ldr	r7, [r5, #0]
 80048ca:	602b      	str	r3, [r5, #0]
 80048cc:	d032      	beq.n	8004934 <__sflush_r+0x98>
 80048ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048d0:	89a3      	ldrh	r3, [r4, #12]
 80048d2:	075a      	lsls	r2, r3, #29
 80048d4:	d505      	bpl.n	80048e2 <__sflush_r+0x46>
 80048d6:	6863      	ldr	r3, [r4, #4]
 80048d8:	1ac0      	subs	r0, r0, r3
 80048da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048dc:	b10b      	cbz	r3, 80048e2 <__sflush_r+0x46>
 80048de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048e0:	1ac0      	subs	r0, r0, r3
 80048e2:	2300      	movs	r3, #0
 80048e4:	4602      	mov	r2, r0
 80048e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048e8:	6a21      	ldr	r1, [r4, #32]
 80048ea:	4628      	mov	r0, r5
 80048ec:	47b0      	blx	r6
 80048ee:	1c43      	adds	r3, r0, #1
 80048f0:	89a3      	ldrh	r3, [r4, #12]
 80048f2:	d106      	bne.n	8004902 <__sflush_r+0x66>
 80048f4:	6829      	ldr	r1, [r5, #0]
 80048f6:	291d      	cmp	r1, #29
 80048f8:	d82c      	bhi.n	8004954 <__sflush_r+0xb8>
 80048fa:	4a2a      	ldr	r2, [pc, #168]	; (80049a4 <__sflush_r+0x108>)
 80048fc:	40ca      	lsrs	r2, r1
 80048fe:	07d6      	lsls	r6, r2, #31
 8004900:	d528      	bpl.n	8004954 <__sflush_r+0xb8>
 8004902:	2200      	movs	r2, #0
 8004904:	6062      	str	r2, [r4, #4]
 8004906:	04d9      	lsls	r1, r3, #19
 8004908:	6922      	ldr	r2, [r4, #16]
 800490a:	6022      	str	r2, [r4, #0]
 800490c:	d504      	bpl.n	8004918 <__sflush_r+0x7c>
 800490e:	1c42      	adds	r2, r0, #1
 8004910:	d101      	bne.n	8004916 <__sflush_r+0x7a>
 8004912:	682b      	ldr	r3, [r5, #0]
 8004914:	b903      	cbnz	r3, 8004918 <__sflush_r+0x7c>
 8004916:	6560      	str	r0, [r4, #84]	; 0x54
 8004918:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800491a:	602f      	str	r7, [r5, #0]
 800491c:	2900      	cmp	r1, #0
 800491e:	d0ca      	beq.n	80048b6 <__sflush_r+0x1a>
 8004920:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004924:	4299      	cmp	r1, r3
 8004926:	d002      	beq.n	800492e <__sflush_r+0x92>
 8004928:	4628      	mov	r0, r5
 800492a:	f000 fa0d 	bl	8004d48 <_free_r>
 800492e:	2000      	movs	r0, #0
 8004930:	6360      	str	r0, [r4, #52]	; 0x34
 8004932:	e7c1      	b.n	80048b8 <__sflush_r+0x1c>
 8004934:	6a21      	ldr	r1, [r4, #32]
 8004936:	2301      	movs	r3, #1
 8004938:	4628      	mov	r0, r5
 800493a:	47b0      	blx	r6
 800493c:	1c41      	adds	r1, r0, #1
 800493e:	d1c7      	bne.n	80048d0 <__sflush_r+0x34>
 8004940:	682b      	ldr	r3, [r5, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d0c4      	beq.n	80048d0 <__sflush_r+0x34>
 8004946:	2b1d      	cmp	r3, #29
 8004948:	d001      	beq.n	800494e <__sflush_r+0xb2>
 800494a:	2b16      	cmp	r3, #22
 800494c:	d101      	bne.n	8004952 <__sflush_r+0xb6>
 800494e:	602f      	str	r7, [r5, #0]
 8004950:	e7b1      	b.n	80048b6 <__sflush_r+0x1a>
 8004952:	89a3      	ldrh	r3, [r4, #12]
 8004954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004958:	81a3      	strh	r3, [r4, #12]
 800495a:	e7ad      	b.n	80048b8 <__sflush_r+0x1c>
 800495c:	690f      	ldr	r7, [r1, #16]
 800495e:	2f00      	cmp	r7, #0
 8004960:	d0a9      	beq.n	80048b6 <__sflush_r+0x1a>
 8004962:	0793      	lsls	r3, r2, #30
 8004964:	680e      	ldr	r6, [r1, #0]
 8004966:	bf08      	it	eq
 8004968:	694b      	ldreq	r3, [r1, #20]
 800496a:	600f      	str	r7, [r1, #0]
 800496c:	bf18      	it	ne
 800496e:	2300      	movne	r3, #0
 8004970:	eba6 0807 	sub.w	r8, r6, r7
 8004974:	608b      	str	r3, [r1, #8]
 8004976:	f1b8 0f00 	cmp.w	r8, #0
 800497a:	dd9c      	ble.n	80048b6 <__sflush_r+0x1a>
 800497c:	6a21      	ldr	r1, [r4, #32]
 800497e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004980:	4643      	mov	r3, r8
 8004982:	463a      	mov	r2, r7
 8004984:	4628      	mov	r0, r5
 8004986:	47b0      	blx	r6
 8004988:	2800      	cmp	r0, #0
 800498a:	dc06      	bgt.n	800499a <__sflush_r+0xfe>
 800498c:	89a3      	ldrh	r3, [r4, #12]
 800498e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004992:	81a3      	strh	r3, [r4, #12]
 8004994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004998:	e78e      	b.n	80048b8 <__sflush_r+0x1c>
 800499a:	4407      	add	r7, r0
 800499c:	eba8 0800 	sub.w	r8, r8, r0
 80049a0:	e7e9      	b.n	8004976 <__sflush_r+0xda>
 80049a2:	bf00      	nop
 80049a4:	20400001 	.word	0x20400001

080049a8 <_fflush_r>:
 80049a8:	b538      	push	{r3, r4, r5, lr}
 80049aa:	690b      	ldr	r3, [r1, #16]
 80049ac:	4605      	mov	r5, r0
 80049ae:	460c      	mov	r4, r1
 80049b0:	b913      	cbnz	r3, 80049b8 <_fflush_r+0x10>
 80049b2:	2500      	movs	r5, #0
 80049b4:	4628      	mov	r0, r5
 80049b6:	bd38      	pop	{r3, r4, r5, pc}
 80049b8:	b118      	cbz	r0, 80049c2 <_fflush_r+0x1a>
 80049ba:	6983      	ldr	r3, [r0, #24]
 80049bc:	b90b      	cbnz	r3, 80049c2 <_fflush_r+0x1a>
 80049be:	f000 f899 	bl	8004af4 <__sinit>
 80049c2:	4b14      	ldr	r3, [pc, #80]	; (8004a14 <_fflush_r+0x6c>)
 80049c4:	429c      	cmp	r4, r3
 80049c6:	d11b      	bne.n	8004a00 <_fflush_r+0x58>
 80049c8:	686c      	ldr	r4, [r5, #4]
 80049ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d0ef      	beq.n	80049b2 <_fflush_r+0xa>
 80049d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049d4:	07d0      	lsls	r0, r2, #31
 80049d6:	d404      	bmi.n	80049e2 <_fflush_r+0x3a>
 80049d8:	0599      	lsls	r1, r3, #22
 80049da:	d402      	bmi.n	80049e2 <_fflush_r+0x3a>
 80049dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049de:	f000 f944 	bl	8004c6a <__retarget_lock_acquire_recursive>
 80049e2:	4628      	mov	r0, r5
 80049e4:	4621      	mov	r1, r4
 80049e6:	f7ff ff59 	bl	800489c <__sflush_r>
 80049ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049ec:	07da      	lsls	r2, r3, #31
 80049ee:	4605      	mov	r5, r0
 80049f0:	d4e0      	bmi.n	80049b4 <_fflush_r+0xc>
 80049f2:	89a3      	ldrh	r3, [r4, #12]
 80049f4:	059b      	lsls	r3, r3, #22
 80049f6:	d4dd      	bmi.n	80049b4 <_fflush_r+0xc>
 80049f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049fa:	f000 f937 	bl	8004c6c <__retarget_lock_release_recursive>
 80049fe:	e7d9      	b.n	80049b4 <_fflush_r+0xc>
 8004a00:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <_fflush_r+0x70>)
 8004a02:	429c      	cmp	r4, r3
 8004a04:	d101      	bne.n	8004a0a <_fflush_r+0x62>
 8004a06:	68ac      	ldr	r4, [r5, #8]
 8004a08:	e7df      	b.n	80049ca <_fflush_r+0x22>
 8004a0a:	4b04      	ldr	r3, [pc, #16]	; (8004a1c <_fflush_r+0x74>)
 8004a0c:	429c      	cmp	r4, r3
 8004a0e:	bf08      	it	eq
 8004a10:	68ec      	ldreq	r4, [r5, #12]
 8004a12:	e7da      	b.n	80049ca <_fflush_r+0x22>
 8004a14:	0800681c 	.word	0x0800681c
 8004a18:	0800683c 	.word	0x0800683c
 8004a1c:	080067fc 	.word	0x080067fc

08004a20 <fflush>:
 8004a20:	4601      	mov	r1, r0
 8004a22:	b920      	cbnz	r0, 8004a2e <fflush+0xe>
 8004a24:	4b04      	ldr	r3, [pc, #16]	; (8004a38 <fflush+0x18>)
 8004a26:	4905      	ldr	r1, [pc, #20]	; (8004a3c <fflush+0x1c>)
 8004a28:	6818      	ldr	r0, [r3, #0]
 8004a2a:	f000 b8fe 	b.w	8004c2a <_fwalk_reent>
 8004a2e:	4b04      	ldr	r3, [pc, #16]	; (8004a40 <fflush+0x20>)
 8004a30:	6818      	ldr	r0, [r3, #0]
 8004a32:	f7ff bfb9 	b.w	80049a8 <_fflush_r>
 8004a36:	bf00      	nop
 8004a38:	080067f8 	.word	0x080067f8
 8004a3c:	080049a9 	.word	0x080049a9
 8004a40:	20000010 	.word	0x20000010

08004a44 <std>:
 8004a44:	2300      	movs	r3, #0
 8004a46:	b510      	push	{r4, lr}
 8004a48:	4604      	mov	r4, r0
 8004a4a:	e9c0 3300 	strd	r3, r3, [r0]
 8004a4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a52:	6083      	str	r3, [r0, #8]
 8004a54:	8181      	strh	r1, [r0, #12]
 8004a56:	6643      	str	r3, [r0, #100]	; 0x64
 8004a58:	81c2      	strh	r2, [r0, #14]
 8004a5a:	6183      	str	r3, [r0, #24]
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	2208      	movs	r2, #8
 8004a60:	305c      	adds	r0, #92	; 0x5c
 8004a62:	f7ff fe1d 	bl	80046a0 <memset>
 8004a66:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <std+0x38>)
 8004a68:	6263      	str	r3, [r4, #36]	; 0x24
 8004a6a:	4b05      	ldr	r3, [pc, #20]	; (8004a80 <std+0x3c>)
 8004a6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a6e:	4b05      	ldr	r3, [pc, #20]	; (8004a84 <std+0x40>)
 8004a70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a72:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <std+0x44>)
 8004a74:	6224      	str	r4, [r4, #32]
 8004a76:	6323      	str	r3, [r4, #48]	; 0x30
 8004a78:	bd10      	pop	{r4, pc}
 8004a7a:	bf00      	nop
 8004a7c:	08005cdd 	.word	0x08005cdd
 8004a80:	08005cff 	.word	0x08005cff
 8004a84:	08005d37 	.word	0x08005d37
 8004a88:	08005d5b 	.word	0x08005d5b

08004a8c <_cleanup_r>:
 8004a8c:	4901      	ldr	r1, [pc, #4]	; (8004a94 <_cleanup_r+0x8>)
 8004a8e:	f000 b8cc 	b.w	8004c2a <_fwalk_reent>
 8004a92:	bf00      	nop
 8004a94:	080049a9 	.word	0x080049a9

08004a98 <__sfmoreglue>:
 8004a98:	b570      	push	{r4, r5, r6, lr}
 8004a9a:	2268      	movs	r2, #104	; 0x68
 8004a9c:	1e4d      	subs	r5, r1, #1
 8004a9e:	4355      	muls	r5, r2
 8004aa0:	460e      	mov	r6, r1
 8004aa2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004aa6:	f000 f9bb 	bl	8004e20 <_malloc_r>
 8004aaa:	4604      	mov	r4, r0
 8004aac:	b140      	cbz	r0, 8004ac0 <__sfmoreglue+0x28>
 8004aae:	2100      	movs	r1, #0
 8004ab0:	e9c0 1600 	strd	r1, r6, [r0]
 8004ab4:	300c      	adds	r0, #12
 8004ab6:	60a0      	str	r0, [r4, #8]
 8004ab8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004abc:	f7ff fdf0 	bl	80046a0 <memset>
 8004ac0:	4620      	mov	r0, r4
 8004ac2:	bd70      	pop	{r4, r5, r6, pc}

08004ac4 <__sfp_lock_acquire>:
 8004ac4:	4801      	ldr	r0, [pc, #4]	; (8004acc <__sfp_lock_acquire+0x8>)
 8004ac6:	f000 b8d0 	b.w	8004c6a <__retarget_lock_acquire_recursive>
 8004aca:	bf00      	nop
 8004acc:	20000859 	.word	0x20000859

08004ad0 <__sfp_lock_release>:
 8004ad0:	4801      	ldr	r0, [pc, #4]	; (8004ad8 <__sfp_lock_release+0x8>)
 8004ad2:	f000 b8cb 	b.w	8004c6c <__retarget_lock_release_recursive>
 8004ad6:	bf00      	nop
 8004ad8:	20000859 	.word	0x20000859

08004adc <__sinit_lock_acquire>:
 8004adc:	4801      	ldr	r0, [pc, #4]	; (8004ae4 <__sinit_lock_acquire+0x8>)
 8004ade:	f000 b8c4 	b.w	8004c6a <__retarget_lock_acquire_recursive>
 8004ae2:	bf00      	nop
 8004ae4:	2000085a 	.word	0x2000085a

08004ae8 <__sinit_lock_release>:
 8004ae8:	4801      	ldr	r0, [pc, #4]	; (8004af0 <__sinit_lock_release+0x8>)
 8004aea:	f000 b8bf 	b.w	8004c6c <__retarget_lock_release_recursive>
 8004aee:	bf00      	nop
 8004af0:	2000085a 	.word	0x2000085a

08004af4 <__sinit>:
 8004af4:	b510      	push	{r4, lr}
 8004af6:	4604      	mov	r4, r0
 8004af8:	f7ff fff0 	bl	8004adc <__sinit_lock_acquire>
 8004afc:	69a3      	ldr	r3, [r4, #24]
 8004afe:	b11b      	cbz	r3, 8004b08 <__sinit+0x14>
 8004b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b04:	f7ff bff0 	b.w	8004ae8 <__sinit_lock_release>
 8004b08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004b0c:	6523      	str	r3, [r4, #80]	; 0x50
 8004b0e:	4b13      	ldr	r3, [pc, #76]	; (8004b5c <__sinit+0x68>)
 8004b10:	4a13      	ldr	r2, [pc, #76]	; (8004b60 <__sinit+0x6c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	62a2      	str	r2, [r4, #40]	; 0x28
 8004b16:	42a3      	cmp	r3, r4
 8004b18:	bf04      	itt	eq
 8004b1a:	2301      	moveq	r3, #1
 8004b1c:	61a3      	streq	r3, [r4, #24]
 8004b1e:	4620      	mov	r0, r4
 8004b20:	f000 f820 	bl	8004b64 <__sfp>
 8004b24:	6060      	str	r0, [r4, #4]
 8004b26:	4620      	mov	r0, r4
 8004b28:	f000 f81c 	bl	8004b64 <__sfp>
 8004b2c:	60a0      	str	r0, [r4, #8]
 8004b2e:	4620      	mov	r0, r4
 8004b30:	f000 f818 	bl	8004b64 <__sfp>
 8004b34:	2200      	movs	r2, #0
 8004b36:	60e0      	str	r0, [r4, #12]
 8004b38:	2104      	movs	r1, #4
 8004b3a:	6860      	ldr	r0, [r4, #4]
 8004b3c:	f7ff ff82 	bl	8004a44 <std>
 8004b40:	68a0      	ldr	r0, [r4, #8]
 8004b42:	2201      	movs	r2, #1
 8004b44:	2109      	movs	r1, #9
 8004b46:	f7ff ff7d 	bl	8004a44 <std>
 8004b4a:	68e0      	ldr	r0, [r4, #12]
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	2112      	movs	r1, #18
 8004b50:	f7ff ff78 	bl	8004a44 <std>
 8004b54:	2301      	movs	r3, #1
 8004b56:	61a3      	str	r3, [r4, #24]
 8004b58:	e7d2      	b.n	8004b00 <__sinit+0xc>
 8004b5a:	bf00      	nop
 8004b5c:	080067f8 	.word	0x080067f8
 8004b60:	08004a8d 	.word	0x08004a8d

08004b64 <__sfp>:
 8004b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b66:	4607      	mov	r7, r0
 8004b68:	f7ff ffac 	bl	8004ac4 <__sfp_lock_acquire>
 8004b6c:	4b1e      	ldr	r3, [pc, #120]	; (8004be8 <__sfp+0x84>)
 8004b6e:	681e      	ldr	r6, [r3, #0]
 8004b70:	69b3      	ldr	r3, [r6, #24]
 8004b72:	b913      	cbnz	r3, 8004b7a <__sfp+0x16>
 8004b74:	4630      	mov	r0, r6
 8004b76:	f7ff ffbd 	bl	8004af4 <__sinit>
 8004b7a:	3648      	adds	r6, #72	; 0x48
 8004b7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b80:	3b01      	subs	r3, #1
 8004b82:	d503      	bpl.n	8004b8c <__sfp+0x28>
 8004b84:	6833      	ldr	r3, [r6, #0]
 8004b86:	b30b      	cbz	r3, 8004bcc <__sfp+0x68>
 8004b88:	6836      	ldr	r6, [r6, #0]
 8004b8a:	e7f7      	b.n	8004b7c <__sfp+0x18>
 8004b8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b90:	b9d5      	cbnz	r5, 8004bc8 <__sfp+0x64>
 8004b92:	4b16      	ldr	r3, [pc, #88]	; (8004bec <__sfp+0x88>)
 8004b94:	60e3      	str	r3, [r4, #12]
 8004b96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b9a:	6665      	str	r5, [r4, #100]	; 0x64
 8004b9c:	f000 f864 	bl	8004c68 <__retarget_lock_init_recursive>
 8004ba0:	f7ff ff96 	bl	8004ad0 <__sfp_lock_release>
 8004ba4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004ba8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004bac:	6025      	str	r5, [r4, #0]
 8004bae:	61a5      	str	r5, [r4, #24]
 8004bb0:	2208      	movs	r2, #8
 8004bb2:	4629      	mov	r1, r5
 8004bb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004bb8:	f7ff fd72 	bl	80046a0 <memset>
 8004bbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004bc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004bc4:	4620      	mov	r0, r4
 8004bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bc8:	3468      	adds	r4, #104	; 0x68
 8004bca:	e7d9      	b.n	8004b80 <__sfp+0x1c>
 8004bcc:	2104      	movs	r1, #4
 8004bce:	4638      	mov	r0, r7
 8004bd0:	f7ff ff62 	bl	8004a98 <__sfmoreglue>
 8004bd4:	4604      	mov	r4, r0
 8004bd6:	6030      	str	r0, [r6, #0]
 8004bd8:	2800      	cmp	r0, #0
 8004bda:	d1d5      	bne.n	8004b88 <__sfp+0x24>
 8004bdc:	f7ff ff78 	bl	8004ad0 <__sfp_lock_release>
 8004be0:	230c      	movs	r3, #12
 8004be2:	603b      	str	r3, [r7, #0]
 8004be4:	e7ee      	b.n	8004bc4 <__sfp+0x60>
 8004be6:	bf00      	nop
 8004be8:	080067f8 	.word	0x080067f8
 8004bec:	ffff0001 	.word	0xffff0001

08004bf0 <_fwalk>:
 8004bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bf4:	460f      	mov	r7, r1
 8004bf6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004bfa:	2600      	movs	r6, #0
 8004bfc:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8004c00:	f1b8 0801 	subs.w	r8, r8, #1
 8004c04:	d505      	bpl.n	8004c12 <_fwalk+0x22>
 8004c06:	6824      	ldr	r4, [r4, #0]
 8004c08:	2c00      	cmp	r4, #0
 8004c0a:	d1f7      	bne.n	8004bfc <_fwalk+0xc>
 8004c0c:	4630      	mov	r0, r6
 8004c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c12:	89ab      	ldrh	r3, [r5, #12]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d906      	bls.n	8004c26 <_fwalk+0x36>
 8004c18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	d002      	beq.n	8004c26 <_fwalk+0x36>
 8004c20:	4628      	mov	r0, r5
 8004c22:	47b8      	blx	r7
 8004c24:	4306      	orrs	r6, r0
 8004c26:	3568      	adds	r5, #104	; 0x68
 8004c28:	e7ea      	b.n	8004c00 <_fwalk+0x10>

08004c2a <_fwalk_reent>:
 8004c2a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c2e:	4606      	mov	r6, r0
 8004c30:	4688      	mov	r8, r1
 8004c32:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004c36:	2700      	movs	r7, #0
 8004c38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c3c:	f1b9 0901 	subs.w	r9, r9, #1
 8004c40:	d505      	bpl.n	8004c4e <_fwalk_reent+0x24>
 8004c42:	6824      	ldr	r4, [r4, #0]
 8004c44:	2c00      	cmp	r4, #0
 8004c46:	d1f7      	bne.n	8004c38 <_fwalk_reent+0xe>
 8004c48:	4638      	mov	r0, r7
 8004c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c4e:	89ab      	ldrh	r3, [r5, #12]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d907      	bls.n	8004c64 <_fwalk_reent+0x3a>
 8004c54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	d003      	beq.n	8004c64 <_fwalk_reent+0x3a>
 8004c5c:	4629      	mov	r1, r5
 8004c5e:	4630      	mov	r0, r6
 8004c60:	47c0      	blx	r8
 8004c62:	4307      	orrs	r7, r0
 8004c64:	3568      	adds	r5, #104	; 0x68
 8004c66:	e7e9      	b.n	8004c3c <_fwalk_reent+0x12>

08004c68 <__retarget_lock_init_recursive>:
 8004c68:	4770      	bx	lr

08004c6a <__retarget_lock_acquire_recursive>:
 8004c6a:	4770      	bx	lr

08004c6c <__retarget_lock_release_recursive>:
 8004c6c:	4770      	bx	lr

08004c6e <__swhatbuf_r>:
 8004c6e:	b570      	push	{r4, r5, r6, lr}
 8004c70:	460e      	mov	r6, r1
 8004c72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c76:	2900      	cmp	r1, #0
 8004c78:	b096      	sub	sp, #88	; 0x58
 8004c7a:	4614      	mov	r4, r2
 8004c7c:	461d      	mov	r5, r3
 8004c7e:	da08      	bge.n	8004c92 <__swhatbuf_r+0x24>
 8004c80:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	602a      	str	r2, [r5, #0]
 8004c88:	061a      	lsls	r2, r3, #24
 8004c8a:	d410      	bmi.n	8004cae <__swhatbuf_r+0x40>
 8004c8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c90:	e00e      	b.n	8004cb0 <__swhatbuf_r+0x42>
 8004c92:	466a      	mov	r2, sp
 8004c94:	f001 fb12 	bl	80062bc <_fstat_r>
 8004c98:	2800      	cmp	r0, #0
 8004c9a:	dbf1      	blt.n	8004c80 <__swhatbuf_r+0x12>
 8004c9c:	9a01      	ldr	r2, [sp, #4]
 8004c9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ca2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ca6:	425a      	negs	r2, r3
 8004ca8:	415a      	adcs	r2, r3
 8004caa:	602a      	str	r2, [r5, #0]
 8004cac:	e7ee      	b.n	8004c8c <__swhatbuf_r+0x1e>
 8004cae:	2340      	movs	r3, #64	; 0x40
 8004cb0:	2000      	movs	r0, #0
 8004cb2:	6023      	str	r3, [r4, #0]
 8004cb4:	b016      	add	sp, #88	; 0x58
 8004cb6:	bd70      	pop	{r4, r5, r6, pc}

08004cb8 <__smakebuf_r>:
 8004cb8:	898b      	ldrh	r3, [r1, #12]
 8004cba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004cbc:	079d      	lsls	r5, r3, #30
 8004cbe:	4606      	mov	r6, r0
 8004cc0:	460c      	mov	r4, r1
 8004cc2:	d507      	bpl.n	8004cd4 <__smakebuf_r+0x1c>
 8004cc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004cc8:	6023      	str	r3, [r4, #0]
 8004cca:	6123      	str	r3, [r4, #16]
 8004ccc:	2301      	movs	r3, #1
 8004cce:	6163      	str	r3, [r4, #20]
 8004cd0:	b002      	add	sp, #8
 8004cd2:	bd70      	pop	{r4, r5, r6, pc}
 8004cd4:	ab01      	add	r3, sp, #4
 8004cd6:	466a      	mov	r2, sp
 8004cd8:	f7ff ffc9 	bl	8004c6e <__swhatbuf_r>
 8004cdc:	9900      	ldr	r1, [sp, #0]
 8004cde:	4605      	mov	r5, r0
 8004ce0:	4630      	mov	r0, r6
 8004ce2:	f000 f89d 	bl	8004e20 <_malloc_r>
 8004ce6:	b948      	cbnz	r0, 8004cfc <__smakebuf_r+0x44>
 8004ce8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cec:	059a      	lsls	r2, r3, #22
 8004cee:	d4ef      	bmi.n	8004cd0 <__smakebuf_r+0x18>
 8004cf0:	f023 0303 	bic.w	r3, r3, #3
 8004cf4:	f043 0302 	orr.w	r3, r3, #2
 8004cf8:	81a3      	strh	r3, [r4, #12]
 8004cfa:	e7e3      	b.n	8004cc4 <__smakebuf_r+0xc>
 8004cfc:	4b0d      	ldr	r3, [pc, #52]	; (8004d34 <__smakebuf_r+0x7c>)
 8004cfe:	62b3      	str	r3, [r6, #40]	; 0x28
 8004d00:	89a3      	ldrh	r3, [r4, #12]
 8004d02:	6020      	str	r0, [r4, #0]
 8004d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d08:	81a3      	strh	r3, [r4, #12]
 8004d0a:	9b00      	ldr	r3, [sp, #0]
 8004d0c:	6163      	str	r3, [r4, #20]
 8004d0e:	9b01      	ldr	r3, [sp, #4]
 8004d10:	6120      	str	r0, [r4, #16]
 8004d12:	b15b      	cbz	r3, 8004d2c <__smakebuf_r+0x74>
 8004d14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d18:	4630      	mov	r0, r6
 8004d1a:	f001 fae1 	bl	80062e0 <_isatty_r>
 8004d1e:	b128      	cbz	r0, 8004d2c <__smakebuf_r+0x74>
 8004d20:	89a3      	ldrh	r3, [r4, #12]
 8004d22:	f023 0303 	bic.w	r3, r3, #3
 8004d26:	f043 0301 	orr.w	r3, r3, #1
 8004d2a:	81a3      	strh	r3, [r4, #12]
 8004d2c:	89a0      	ldrh	r0, [r4, #12]
 8004d2e:	4305      	orrs	r5, r0
 8004d30:	81a5      	strh	r5, [r4, #12]
 8004d32:	e7cd      	b.n	8004cd0 <__smakebuf_r+0x18>
 8004d34:	08004a8d 	.word	0x08004a8d

08004d38 <malloc>:
 8004d38:	4b02      	ldr	r3, [pc, #8]	; (8004d44 <malloc+0xc>)
 8004d3a:	4601      	mov	r1, r0
 8004d3c:	6818      	ldr	r0, [r3, #0]
 8004d3e:	f000 b86f 	b.w	8004e20 <_malloc_r>
 8004d42:	bf00      	nop
 8004d44:	20000010 	.word	0x20000010

08004d48 <_free_r>:
 8004d48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d4a:	2900      	cmp	r1, #0
 8004d4c:	d044      	beq.n	8004dd8 <_free_r+0x90>
 8004d4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d52:	9001      	str	r0, [sp, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f1a1 0404 	sub.w	r4, r1, #4
 8004d5a:	bfb8      	it	lt
 8004d5c:	18e4      	addlt	r4, r4, r3
 8004d5e:	f001 faef 	bl	8006340 <__malloc_lock>
 8004d62:	4a1e      	ldr	r2, [pc, #120]	; (8004ddc <_free_r+0x94>)
 8004d64:	9801      	ldr	r0, [sp, #4]
 8004d66:	6813      	ldr	r3, [r2, #0]
 8004d68:	b933      	cbnz	r3, 8004d78 <_free_r+0x30>
 8004d6a:	6063      	str	r3, [r4, #4]
 8004d6c:	6014      	str	r4, [r2, #0]
 8004d6e:	b003      	add	sp, #12
 8004d70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d74:	f001 baea 	b.w	800634c <__malloc_unlock>
 8004d78:	42a3      	cmp	r3, r4
 8004d7a:	d908      	bls.n	8004d8e <_free_r+0x46>
 8004d7c:	6825      	ldr	r5, [r4, #0]
 8004d7e:	1961      	adds	r1, r4, r5
 8004d80:	428b      	cmp	r3, r1
 8004d82:	bf01      	itttt	eq
 8004d84:	6819      	ldreq	r1, [r3, #0]
 8004d86:	685b      	ldreq	r3, [r3, #4]
 8004d88:	1949      	addeq	r1, r1, r5
 8004d8a:	6021      	streq	r1, [r4, #0]
 8004d8c:	e7ed      	b.n	8004d6a <_free_r+0x22>
 8004d8e:	461a      	mov	r2, r3
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	b10b      	cbz	r3, 8004d98 <_free_r+0x50>
 8004d94:	42a3      	cmp	r3, r4
 8004d96:	d9fa      	bls.n	8004d8e <_free_r+0x46>
 8004d98:	6811      	ldr	r1, [r2, #0]
 8004d9a:	1855      	adds	r5, r2, r1
 8004d9c:	42a5      	cmp	r5, r4
 8004d9e:	d10b      	bne.n	8004db8 <_free_r+0x70>
 8004da0:	6824      	ldr	r4, [r4, #0]
 8004da2:	4421      	add	r1, r4
 8004da4:	1854      	adds	r4, r2, r1
 8004da6:	42a3      	cmp	r3, r4
 8004da8:	6011      	str	r1, [r2, #0]
 8004daa:	d1e0      	bne.n	8004d6e <_free_r+0x26>
 8004dac:	681c      	ldr	r4, [r3, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	6053      	str	r3, [r2, #4]
 8004db2:	4421      	add	r1, r4
 8004db4:	6011      	str	r1, [r2, #0]
 8004db6:	e7da      	b.n	8004d6e <_free_r+0x26>
 8004db8:	d902      	bls.n	8004dc0 <_free_r+0x78>
 8004dba:	230c      	movs	r3, #12
 8004dbc:	6003      	str	r3, [r0, #0]
 8004dbe:	e7d6      	b.n	8004d6e <_free_r+0x26>
 8004dc0:	6825      	ldr	r5, [r4, #0]
 8004dc2:	1961      	adds	r1, r4, r5
 8004dc4:	428b      	cmp	r3, r1
 8004dc6:	bf04      	itt	eq
 8004dc8:	6819      	ldreq	r1, [r3, #0]
 8004dca:	685b      	ldreq	r3, [r3, #4]
 8004dcc:	6063      	str	r3, [r4, #4]
 8004dce:	bf04      	itt	eq
 8004dd0:	1949      	addeq	r1, r1, r5
 8004dd2:	6021      	streq	r1, [r4, #0]
 8004dd4:	6054      	str	r4, [r2, #4]
 8004dd6:	e7ca      	b.n	8004d6e <_free_r+0x26>
 8004dd8:	b003      	add	sp, #12
 8004dda:	bd30      	pop	{r4, r5, pc}
 8004ddc:	2000085c 	.word	0x2000085c

08004de0 <sbrk_aligned>:
 8004de0:	b570      	push	{r4, r5, r6, lr}
 8004de2:	4e0e      	ldr	r6, [pc, #56]	; (8004e1c <sbrk_aligned+0x3c>)
 8004de4:	460c      	mov	r4, r1
 8004de6:	6831      	ldr	r1, [r6, #0]
 8004de8:	4605      	mov	r5, r0
 8004dea:	b911      	cbnz	r1, 8004df2 <sbrk_aligned+0x12>
 8004dec:	f000 ff2e 	bl	8005c4c <_sbrk_r>
 8004df0:	6030      	str	r0, [r6, #0]
 8004df2:	4621      	mov	r1, r4
 8004df4:	4628      	mov	r0, r5
 8004df6:	f000 ff29 	bl	8005c4c <_sbrk_r>
 8004dfa:	1c43      	adds	r3, r0, #1
 8004dfc:	d00a      	beq.n	8004e14 <sbrk_aligned+0x34>
 8004dfe:	1cc4      	adds	r4, r0, #3
 8004e00:	f024 0403 	bic.w	r4, r4, #3
 8004e04:	42a0      	cmp	r0, r4
 8004e06:	d007      	beq.n	8004e18 <sbrk_aligned+0x38>
 8004e08:	1a21      	subs	r1, r4, r0
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	f000 ff1e 	bl	8005c4c <_sbrk_r>
 8004e10:	3001      	adds	r0, #1
 8004e12:	d101      	bne.n	8004e18 <sbrk_aligned+0x38>
 8004e14:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004e18:	4620      	mov	r0, r4
 8004e1a:	bd70      	pop	{r4, r5, r6, pc}
 8004e1c:	20000860 	.word	0x20000860

08004e20 <_malloc_r>:
 8004e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e24:	1ccd      	adds	r5, r1, #3
 8004e26:	f025 0503 	bic.w	r5, r5, #3
 8004e2a:	3508      	adds	r5, #8
 8004e2c:	2d0c      	cmp	r5, #12
 8004e2e:	bf38      	it	cc
 8004e30:	250c      	movcc	r5, #12
 8004e32:	2d00      	cmp	r5, #0
 8004e34:	4607      	mov	r7, r0
 8004e36:	db01      	blt.n	8004e3c <_malloc_r+0x1c>
 8004e38:	42a9      	cmp	r1, r5
 8004e3a:	d905      	bls.n	8004e48 <_malloc_r+0x28>
 8004e3c:	230c      	movs	r3, #12
 8004e3e:	603b      	str	r3, [r7, #0]
 8004e40:	2600      	movs	r6, #0
 8004e42:	4630      	mov	r0, r6
 8004e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e48:	4e2e      	ldr	r6, [pc, #184]	; (8004f04 <_malloc_r+0xe4>)
 8004e4a:	f001 fa79 	bl	8006340 <__malloc_lock>
 8004e4e:	6833      	ldr	r3, [r6, #0]
 8004e50:	461c      	mov	r4, r3
 8004e52:	bb34      	cbnz	r4, 8004ea2 <_malloc_r+0x82>
 8004e54:	4629      	mov	r1, r5
 8004e56:	4638      	mov	r0, r7
 8004e58:	f7ff ffc2 	bl	8004de0 <sbrk_aligned>
 8004e5c:	1c43      	adds	r3, r0, #1
 8004e5e:	4604      	mov	r4, r0
 8004e60:	d14d      	bne.n	8004efe <_malloc_r+0xde>
 8004e62:	6834      	ldr	r4, [r6, #0]
 8004e64:	4626      	mov	r6, r4
 8004e66:	2e00      	cmp	r6, #0
 8004e68:	d140      	bne.n	8004eec <_malloc_r+0xcc>
 8004e6a:	6823      	ldr	r3, [r4, #0]
 8004e6c:	4631      	mov	r1, r6
 8004e6e:	4638      	mov	r0, r7
 8004e70:	eb04 0803 	add.w	r8, r4, r3
 8004e74:	f000 feea 	bl	8005c4c <_sbrk_r>
 8004e78:	4580      	cmp	r8, r0
 8004e7a:	d13a      	bne.n	8004ef2 <_malloc_r+0xd2>
 8004e7c:	6821      	ldr	r1, [r4, #0]
 8004e7e:	3503      	adds	r5, #3
 8004e80:	1a6d      	subs	r5, r5, r1
 8004e82:	f025 0503 	bic.w	r5, r5, #3
 8004e86:	3508      	adds	r5, #8
 8004e88:	2d0c      	cmp	r5, #12
 8004e8a:	bf38      	it	cc
 8004e8c:	250c      	movcc	r5, #12
 8004e8e:	4629      	mov	r1, r5
 8004e90:	4638      	mov	r0, r7
 8004e92:	f7ff ffa5 	bl	8004de0 <sbrk_aligned>
 8004e96:	3001      	adds	r0, #1
 8004e98:	d02b      	beq.n	8004ef2 <_malloc_r+0xd2>
 8004e9a:	6823      	ldr	r3, [r4, #0]
 8004e9c:	442b      	add	r3, r5
 8004e9e:	6023      	str	r3, [r4, #0]
 8004ea0:	e00e      	b.n	8004ec0 <_malloc_r+0xa0>
 8004ea2:	6822      	ldr	r2, [r4, #0]
 8004ea4:	1b52      	subs	r2, r2, r5
 8004ea6:	d41e      	bmi.n	8004ee6 <_malloc_r+0xc6>
 8004ea8:	2a0b      	cmp	r2, #11
 8004eaa:	d916      	bls.n	8004eda <_malloc_r+0xba>
 8004eac:	1961      	adds	r1, r4, r5
 8004eae:	42a3      	cmp	r3, r4
 8004eb0:	6025      	str	r5, [r4, #0]
 8004eb2:	bf18      	it	ne
 8004eb4:	6059      	strne	r1, [r3, #4]
 8004eb6:	6863      	ldr	r3, [r4, #4]
 8004eb8:	bf08      	it	eq
 8004eba:	6031      	streq	r1, [r6, #0]
 8004ebc:	5162      	str	r2, [r4, r5]
 8004ebe:	604b      	str	r3, [r1, #4]
 8004ec0:	4638      	mov	r0, r7
 8004ec2:	f104 060b 	add.w	r6, r4, #11
 8004ec6:	f001 fa41 	bl	800634c <__malloc_unlock>
 8004eca:	f026 0607 	bic.w	r6, r6, #7
 8004ece:	1d23      	adds	r3, r4, #4
 8004ed0:	1af2      	subs	r2, r6, r3
 8004ed2:	d0b6      	beq.n	8004e42 <_malloc_r+0x22>
 8004ed4:	1b9b      	subs	r3, r3, r6
 8004ed6:	50a3      	str	r3, [r4, r2]
 8004ed8:	e7b3      	b.n	8004e42 <_malloc_r+0x22>
 8004eda:	6862      	ldr	r2, [r4, #4]
 8004edc:	42a3      	cmp	r3, r4
 8004ede:	bf0c      	ite	eq
 8004ee0:	6032      	streq	r2, [r6, #0]
 8004ee2:	605a      	strne	r2, [r3, #4]
 8004ee4:	e7ec      	b.n	8004ec0 <_malloc_r+0xa0>
 8004ee6:	4623      	mov	r3, r4
 8004ee8:	6864      	ldr	r4, [r4, #4]
 8004eea:	e7b2      	b.n	8004e52 <_malloc_r+0x32>
 8004eec:	4634      	mov	r4, r6
 8004eee:	6876      	ldr	r6, [r6, #4]
 8004ef0:	e7b9      	b.n	8004e66 <_malloc_r+0x46>
 8004ef2:	230c      	movs	r3, #12
 8004ef4:	603b      	str	r3, [r7, #0]
 8004ef6:	4638      	mov	r0, r7
 8004ef8:	f001 fa28 	bl	800634c <__malloc_unlock>
 8004efc:	e7a1      	b.n	8004e42 <_malloc_r+0x22>
 8004efe:	6025      	str	r5, [r4, #0]
 8004f00:	e7de      	b.n	8004ec0 <_malloc_r+0xa0>
 8004f02:	bf00      	nop
 8004f04:	2000085c 	.word	0x2000085c

08004f08 <__sfputc_r>:
 8004f08:	6893      	ldr	r3, [r2, #8]
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	b410      	push	{r4}
 8004f10:	6093      	str	r3, [r2, #8]
 8004f12:	da08      	bge.n	8004f26 <__sfputc_r+0x1e>
 8004f14:	6994      	ldr	r4, [r2, #24]
 8004f16:	42a3      	cmp	r3, r4
 8004f18:	db01      	blt.n	8004f1e <__sfputc_r+0x16>
 8004f1a:	290a      	cmp	r1, #10
 8004f1c:	d103      	bne.n	8004f26 <__sfputc_r+0x1e>
 8004f1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f22:	f001 b8e9 	b.w	80060f8 <__swbuf_r>
 8004f26:	6813      	ldr	r3, [r2, #0]
 8004f28:	1c58      	adds	r0, r3, #1
 8004f2a:	6010      	str	r0, [r2, #0]
 8004f2c:	7019      	strb	r1, [r3, #0]
 8004f2e:	4608      	mov	r0, r1
 8004f30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <__sfputs_r>:
 8004f36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f38:	4606      	mov	r6, r0
 8004f3a:	460f      	mov	r7, r1
 8004f3c:	4614      	mov	r4, r2
 8004f3e:	18d5      	adds	r5, r2, r3
 8004f40:	42ac      	cmp	r4, r5
 8004f42:	d101      	bne.n	8004f48 <__sfputs_r+0x12>
 8004f44:	2000      	movs	r0, #0
 8004f46:	e007      	b.n	8004f58 <__sfputs_r+0x22>
 8004f48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f4c:	463a      	mov	r2, r7
 8004f4e:	4630      	mov	r0, r6
 8004f50:	f7ff ffda 	bl	8004f08 <__sfputc_r>
 8004f54:	1c43      	adds	r3, r0, #1
 8004f56:	d1f3      	bne.n	8004f40 <__sfputs_r+0xa>
 8004f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f5c <_vfiprintf_r>:
 8004f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f60:	460d      	mov	r5, r1
 8004f62:	b09d      	sub	sp, #116	; 0x74
 8004f64:	4614      	mov	r4, r2
 8004f66:	4698      	mov	r8, r3
 8004f68:	4606      	mov	r6, r0
 8004f6a:	b118      	cbz	r0, 8004f74 <_vfiprintf_r+0x18>
 8004f6c:	6983      	ldr	r3, [r0, #24]
 8004f6e:	b90b      	cbnz	r3, 8004f74 <_vfiprintf_r+0x18>
 8004f70:	f7ff fdc0 	bl	8004af4 <__sinit>
 8004f74:	4b89      	ldr	r3, [pc, #548]	; (800519c <_vfiprintf_r+0x240>)
 8004f76:	429d      	cmp	r5, r3
 8004f78:	d11b      	bne.n	8004fb2 <_vfiprintf_r+0x56>
 8004f7a:	6875      	ldr	r5, [r6, #4]
 8004f7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f7e:	07d9      	lsls	r1, r3, #31
 8004f80:	d405      	bmi.n	8004f8e <_vfiprintf_r+0x32>
 8004f82:	89ab      	ldrh	r3, [r5, #12]
 8004f84:	059a      	lsls	r2, r3, #22
 8004f86:	d402      	bmi.n	8004f8e <_vfiprintf_r+0x32>
 8004f88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f8a:	f7ff fe6e 	bl	8004c6a <__retarget_lock_acquire_recursive>
 8004f8e:	89ab      	ldrh	r3, [r5, #12]
 8004f90:	071b      	lsls	r3, r3, #28
 8004f92:	d501      	bpl.n	8004f98 <_vfiprintf_r+0x3c>
 8004f94:	692b      	ldr	r3, [r5, #16]
 8004f96:	b9eb      	cbnz	r3, 8004fd4 <_vfiprintf_r+0x78>
 8004f98:	4629      	mov	r1, r5
 8004f9a:	4630      	mov	r0, r6
 8004f9c:	f001 f910 	bl	80061c0 <__swsetup_r>
 8004fa0:	b1c0      	cbz	r0, 8004fd4 <_vfiprintf_r+0x78>
 8004fa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004fa4:	07dc      	lsls	r4, r3, #31
 8004fa6:	d50e      	bpl.n	8004fc6 <_vfiprintf_r+0x6a>
 8004fa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fac:	b01d      	add	sp, #116	; 0x74
 8004fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fb2:	4b7b      	ldr	r3, [pc, #492]	; (80051a0 <_vfiprintf_r+0x244>)
 8004fb4:	429d      	cmp	r5, r3
 8004fb6:	d101      	bne.n	8004fbc <_vfiprintf_r+0x60>
 8004fb8:	68b5      	ldr	r5, [r6, #8]
 8004fba:	e7df      	b.n	8004f7c <_vfiprintf_r+0x20>
 8004fbc:	4b79      	ldr	r3, [pc, #484]	; (80051a4 <_vfiprintf_r+0x248>)
 8004fbe:	429d      	cmp	r5, r3
 8004fc0:	bf08      	it	eq
 8004fc2:	68f5      	ldreq	r5, [r6, #12]
 8004fc4:	e7da      	b.n	8004f7c <_vfiprintf_r+0x20>
 8004fc6:	89ab      	ldrh	r3, [r5, #12]
 8004fc8:	0598      	lsls	r0, r3, #22
 8004fca:	d4ed      	bmi.n	8004fa8 <_vfiprintf_r+0x4c>
 8004fcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004fce:	f7ff fe4d 	bl	8004c6c <__retarget_lock_release_recursive>
 8004fd2:	e7e9      	b.n	8004fa8 <_vfiprintf_r+0x4c>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	9309      	str	r3, [sp, #36]	; 0x24
 8004fd8:	2320      	movs	r3, #32
 8004fda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fde:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fe2:	2330      	movs	r3, #48	; 0x30
 8004fe4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80051a8 <_vfiprintf_r+0x24c>
 8004fe8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fec:	f04f 0901 	mov.w	r9, #1
 8004ff0:	4623      	mov	r3, r4
 8004ff2:	469a      	mov	sl, r3
 8004ff4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ff8:	b10a      	cbz	r2, 8004ffe <_vfiprintf_r+0xa2>
 8004ffa:	2a25      	cmp	r2, #37	; 0x25
 8004ffc:	d1f9      	bne.n	8004ff2 <_vfiprintf_r+0x96>
 8004ffe:	ebba 0b04 	subs.w	fp, sl, r4
 8005002:	d00b      	beq.n	800501c <_vfiprintf_r+0xc0>
 8005004:	465b      	mov	r3, fp
 8005006:	4622      	mov	r2, r4
 8005008:	4629      	mov	r1, r5
 800500a:	4630      	mov	r0, r6
 800500c:	f7ff ff93 	bl	8004f36 <__sfputs_r>
 8005010:	3001      	adds	r0, #1
 8005012:	f000 80aa 	beq.w	800516a <_vfiprintf_r+0x20e>
 8005016:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005018:	445a      	add	r2, fp
 800501a:	9209      	str	r2, [sp, #36]	; 0x24
 800501c:	f89a 3000 	ldrb.w	r3, [sl]
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 80a2 	beq.w	800516a <_vfiprintf_r+0x20e>
 8005026:	2300      	movs	r3, #0
 8005028:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800502c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005030:	f10a 0a01 	add.w	sl, sl, #1
 8005034:	9304      	str	r3, [sp, #16]
 8005036:	9307      	str	r3, [sp, #28]
 8005038:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800503c:	931a      	str	r3, [sp, #104]	; 0x68
 800503e:	4654      	mov	r4, sl
 8005040:	2205      	movs	r2, #5
 8005042:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005046:	4858      	ldr	r0, [pc, #352]	; (80051a8 <_vfiprintf_r+0x24c>)
 8005048:	f7fb f8fa 	bl	8000240 <memchr>
 800504c:	9a04      	ldr	r2, [sp, #16]
 800504e:	b9d8      	cbnz	r0, 8005088 <_vfiprintf_r+0x12c>
 8005050:	06d1      	lsls	r1, r2, #27
 8005052:	bf44      	itt	mi
 8005054:	2320      	movmi	r3, #32
 8005056:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800505a:	0713      	lsls	r3, r2, #28
 800505c:	bf44      	itt	mi
 800505e:	232b      	movmi	r3, #43	; 0x2b
 8005060:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005064:	f89a 3000 	ldrb.w	r3, [sl]
 8005068:	2b2a      	cmp	r3, #42	; 0x2a
 800506a:	d015      	beq.n	8005098 <_vfiprintf_r+0x13c>
 800506c:	9a07      	ldr	r2, [sp, #28]
 800506e:	4654      	mov	r4, sl
 8005070:	2000      	movs	r0, #0
 8005072:	f04f 0c0a 	mov.w	ip, #10
 8005076:	4621      	mov	r1, r4
 8005078:	f811 3b01 	ldrb.w	r3, [r1], #1
 800507c:	3b30      	subs	r3, #48	; 0x30
 800507e:	2b09      	cmp	r3, #9
 8005080:	d94e      	bls.n	8005120 <_vfiprintf_r+0x1c4>
 8005082:	b1b0      	cbz	r0, 80050b2 <_vfiprintf_r+0x156>
 8005084:	9207      	str	r2, [sp, #28]
 8005086:	e014      	b.n	80050b2 <_vfiprintf_r+0x156>
 8005088:	eba0 0308 	sub.w	r3, r0, r8
 800508c:	fa09 f303 	lsl.w	r3, r9, r3
 8005090:	4313      	orrs	r3, r2
 8005092:	9304      	str	r3, [sp, #16]
 8005094:	46a2      	mov	sl, r4
 8005096:	e7d2      	b.n	800503e <_vfiprintf_r+0xe2>
 8005098:	9b03      	ldr	r3, [sp, #12]
 800509a:	1d19      	adds	r1, r3, #4
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	9103      	str	r1, [sp, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	bfbb      	ittet	lt
 80050a4:	425b      	neglt	r3, r3
 80050a6:	f042 0202 	orrlt.w	r2, r2, #2
 80050aa:	9307      	strge	r3, [sp, #28]
 80050ac:	9307      	strlt	r3, [sp, #28]
 80050ae:	bfb8      	it	lt
 80050b0:	9204      	strlt	r2, [sp, #16]
 80050b2:	7823      	ldrb	r3, [r4, #0]
 80050b4:	2b2e      	cmp	r3, #46	; 0x2e
 80050b6:	d10c      	bne.n	80050d2 <_vfiprintf_r+0x176>
 80050b8:	7863      	ldrb	r3, [r4, #1]
 80050ba:	2b2a      	cmp	r3, #42	; 0x2a
 80050bc:	d135      	bne.n	800512a <_vfiprintf_r+0x1ce>
 80050be:	9b03      	ldr	r3, [sp, #12]
 80050c0:	1d1a      	adds	r2, r3, #4
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	9203      	str	r2, [sp, #12]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	bfb8      	it	lt
 80050ca:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80050ce:	3402      	adds	r4, #2
 80050d0:	9305      	str	r3, [sp, #20]
 80050d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80051b8 <_vfiprintf_r+0x25c>
 80050d6:	7821      	ldrb	r1, [r4, #0]
 80050d8:	2203      	movs	r2, #3
 80050da:	4650      	mov	r0, sl
 80050dc:	f7fb f8b0 	bl	8000240 <memchr>
 80050e0:	b140      	cbz	r0, 80050f4 <_vfiprintf_r+0x198>
 80050e2:	2340      	movs	r3, #64	; 0x40
 80050e4:	eba0 000a 	sub.w	r0, r0, sl
 80050e8:	fa03 f000 	lsl.w	r0, r3, r0
 80050ec:	9b04      	ldr	r3, [sp, #16]
 80050ee:	4303      	orrs	r3, r0
 80050f0:	3401      	adds	r4, #1
 80050f2:	9304      	str	r3, [sp, #16]
 80050f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050f8:	482c      	ldr	r0, [pc, #176]	; (80051ac <_vfiprintf_r+0x250>)
 80050fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050fe:	2206      	movs	r2, #6
 8005100:	f7fb f89e 	bl	8000240 <memchr>
 8005104:	2800      	cmp	r0, #0
 8005106:	d03f      	beq.n	8005188 <_vfiprintf_r+0x22c>
 8005108:	4b29      	ldr	r3, [pc, #164]	; (80051b0 <_vfiprintf_r+0x254>)
 800510a:	bb1b      	cbnz	r3, 8005154 <_vfiprintf_r+0x1f8>
 800510c:	9b03      	ldr	r3, [sp, #12]
 800510e:	3307      	adds	r3, #7
 8005110:	f023 0307 	bic.w	r3, r3, #7
 8005114:	3308      	adds	r3, #8
 8005116:	9303      	str	r3, [sp, #12]
 8005118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800511a:	443b      	add	r3, r7
 800511c:	9309      	str	r3, [sp, #36]	; 0x24
 800511e:	e767      	b.n	8004ff0 <_vfiprintf_r+0x94>
 8005120:	fb0c 3202 	mla	r2, ip, r2, r3
 8005124:	460c      	mov	r4, r1
 8005126:	2001      	movs	r0, #1
 8005128:	e7a5      	b.n	8005076 <_vfiprintf_r+0x11a>
 800512a:	2300      	movs	r3, #0
 800512c:	3401      	adds	r4, #1
 800512e:	9305      	str	r3, [sp, #20]
 8005130:	4619      	mov	r1, r3
 8005132:	f04f 0c0a 	mov.w	ip, #10
 8005136:	4620      	mov	r0, r4
 8005138:	f810 2b01 	ldrb.w	r2, [r0], #1
 800513c:	3a30      	subs	r2, #48	; 0x30
 800513e:	2a09      	cmp	r2, #9
 8005140:	d903      	bls.n	800514a <_vfiprintf_r+0x1ee>
 8005142:	2b00      	cmp	r3, #0
 8005144:	d0c5      	beq.n	80050d2 <_vfiprintf_r+0x176>
 8005146:	9105      	str	r1, [sp, #20]
 8005148:	e7c3      	b.n	80050d2 <_vfiprintf_r+0x176>
 800514a:	fb0c 2101 	mla	r1, ip, r1, r2
 800514e:	4604      	mov	r4, r0
 8005150:	2301      	movs	r3, #1
 8005152:	e7f0      	b.n	8005136 <_vfiprintf_r+0x1da>
 8005154:	ab03      	add	r3, sp, #12
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	462a      	mov	r2, r5
 800515a:	4b16      	ldr	r3, [pc, #88]	; (80051b4 <_vfiprintf_r+0x258>)
 800515c:	a904      	add	r1, sp, #16
 800515e:	4630      	mov	r0, r6
 8005160:	f3af 8000 	nop.w
 8005164:	4607      	mov	r7, r0
 8005166:	1c78      	adds	r0, r7, #1
 8005168:	d1d6      	bne.n	8005118 <_vfiprintf_r+0x1bc>
 800516a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800516c:	07d9      	lsls	r1, r3, #31
 800516e:	d405      	bmi.n	800517c <_vfiprintf_r+0x220>
 8005170:	89ab      	ldrh	r3, [r5, #12]
 8005172:	059a      	lsls	r2, r3, #22
 8005174:	d402      	bmi.n	800517c <_vfiprintf_r+0x220>
 8005176:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005178:	f7ff fd78 	bl	8004c6c <__retarget_lock_release_recursive>
 800517c:	89ab      	ldrh	r3, [r5, #12]
 800517e:	065b      	lsls	r3, r3, #25
 8005180:	f53f af12 	bmi.w	8004fa8 <_vfiprintf_r+0x4c>
 8005184:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005186:	e711      	b.n	8004fac <_vfiprintf_r+0x50>
 8005188:	ab03      	add	r3, sp, #12
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	462a      	mov	r2, r5
 800518e:	4b09      	ldr	r3, [pc, #36]	; (80051b4 <_vfiprintf_r+0x258>)
 8005190:	a904      	add	r1, sp, #16
 8005192:	4630      	mov	r0, r6
 8005194:	f000 f880 	bl	8005298 <_printf_i>
 8005198:	e7e4      	b.n	8005164 <_vfiprintf_r+0x208>
 800519a:	bf00      	nop
 800519c:	0800681c 	.word	0x0800681c
 80051a0:	0800683c 	.word	0x0800683c
 80051a4:	080067fc 	.word	0x080067fc
 80051a8:	0800685c 	.word	0x0800685c
 80051ac:	08006866 	.word	0x08006866
 80051b0:	00000000 	.word	0x00000000
 80051b4:	08004f37 	.word	0x08004f37
 80051b8:	08006862 	.word	0x08006862

080051bc <_printf_common>:
 80051bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051c0:	4616      	mov	r6, r2
 80051c2:	4699      	mov	r9, r3
 80051c4:	688a      	ldr	r2, [r1, #8]
 80051c6:	690b      	ldr	r3, [r1, #16]
 80051c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051cc:	4293      	cmp	r3, r2
 80051ce:	bfb8      	it	lt
 80051d0:	4613      	movlt	r3, r2
 80051d2:	6033      	str	r3, [r6, #0]
 80051d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051d8:	4607      	mov	r7, r0
 80051da:	460c      	mov	r4, r1
 80051dc:	b10a      	cbz	r2, 80051e2 <_printf_common+0x26>
 80051de:	3301      	adds	r3, #1
 80051e0:	6033      	str	r3, [r6, #0]
 80051e2:	6823      	ldr	r3, [r4, #0]
 80051e4:	0699      	lsls	r1, r3, #26
 80051e6:	bf42      	ittt	mi
 80051e8:	6833      	ldrmi	r3, [r6, #0]
 80051ea:	3302      	addmi	r3, #2
 80051ec:	6033      	strmi	r3, [r6, #0]
 80051ee:	6825      	ldr	r5, [r4, #0]
 80051f0:	f015 0506 	ands.w	r5, r5, #6
 80051f4:	d106      	bne.n	8005204 <_printf_common+0x48>
 80051f6:	f104 0a19 	add.w	sl, r4, #25
 80051fa:	68e3      	ldr	r3, [r4, #12]
 80051fc:	6832      	ldr	r2, [r6, #0]
 80051fe:	1a9b      	subs	r3, r3, r2
 8005200:	42ab      	cmp	r3, r5
 8005202:	dc26      	bgt.n	8005252 <_printf_common+0x96>
 8005204:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005208:	1e13      	subs	r3, r2, #0
 800520a:	6822      	ldr	r2, [r4, #0]
 800520c:	bf18      	it	ne
 800520e:	2301      	movne	r3, #1
 8005210:	0692      	lsls	r2, r2, #26
 8005212:	d42b      	bmi.n	800526c <_printf_common+0xb0>
 8005214:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005218:	4649      	mov	r1, r9
 800521a:	4638      	mov	r0, r7
 800521c:	47c0      	blx	r8
 800521e:	3001      	adds	r0, #1
 8005220:	d01e      	beq.n	8005260 <_printf_common+0xa4>
 8005222:	6823      	ldr	r3, [r4, #0]
 8005224:	68e5      	ldr	r5, [r4, #12]
 8005226:	6832      	ldr	r2, [r6, #0]
 8005228:	f003 0306 	and.w	r3, r3, #6
 800522c:	2b04      	cmp	r3, #4
 800522e:	bf08      	it	eq
 8005230:	1aad      	subeq	r5, r5, r2
 8005232:	68a3      	ldr	r3, [r4, #8]
 8005234:	6922      	ldr	r2, [r4, #16]
 8005236:	bf0c      	ite	eq
 8005238:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800523c:	2500      	movne	r5, #0
 800523e:	4293      	cmp	r3, r2
 8005240:	bfc4      	itt	gt
 8005242:	1a9b      	subgt	r3, r3, r2
 8005244:	18ed      	addgt	r5, r5, r3
 8005246:	2600      	movs	r6, #0
 8005248:	341a      	adds	r4, #26
 800524a:	42b5      	cmp	r5, r6
 800524c:	d11a      	bne.n	8005284 <_printf_common+0xc8>
 800524e:	2000      	movs	r0, #0
 8005250:	e008      	b.n	8005264 <_printf_common+0xa8>
 8005252:	2301      	movs	r3, #1
 8005254:	4652      	mov	r2, sl
 8005256:	4649      	mov	r1, r9
 8005258:	4638      	mov	r0, r7
 800525a:	47c0      	blx	r8
 800525c:	3001      	adds	r0, #1
 800525e:	d103      	bne.n	8005268 <_printf_common+0xac>
 8005260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005268:	3501      	adds	r5, #1
 800526a:	e7c6      	b.n	80051fa <_printf_common+0x3e>
 800526c:	18e1      	adds	r1, r4, r3
 800526e:	1c5a      	adds	r2, r3, #1
 8005270:	2030      	movs	r0, #48	; 0x30
 8005272:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005276:	4422      	add	r2, r4
 8005278:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800527c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005280:	3302      	adds	r3, #2
 8005282:	e7c7      	b.n	8005214 <_printf_common+0x58>
 8005284:	2301      	movs	r3, #1
 8005286:	4622      	mov	r2, r4
 8005288:	4649      	mov	r1, r9
 800528a:	4638      	mov	r0, r7
 800528c:	47c0      	blx	r8
 800528e:	3001      	adds	r0, #1
 8005290:	d0e6      	beq.n	8005260 <_printf_common+0xa4>
 8005292:	3601      	adds	r6, #1
 8005294:	e7d9      	b.n	800524a <_printf_common+0x8e>
	...

08005298 <_printf_i>:
 8005298:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800529c:	7e0f      	ldrb	r7, [r1, #24]
 800529e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80052a0:	2f78      	cmp	r7, #120	; 0x78
 80052a2:	4691      	mov	r9, r2
 80052a4:	4680      	mov	r8, r0
 80052a6:	460c      	mov	r4, r1
 80052a8:	469a      	mov	sl, r3
 80052aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80052ae:	d807      	bhi.n	80052c0 <_printf_i+0x28>
 80052b0:	2f62      	cmp	r7, #98	; 0x62
 80052b2:	d80a      	bhi.n	80052ca <_printf_i+0x32>
 80052b4:	2f00      	cmp	r7, #0
 80052b6:	f000 80d8 	beq.w	800546a <_printf_i+0x1d2>
 80052ba:	2f58      	cmp	r7, #88	; 0x58
 80052bc:	f000 80a3 	beq.w	8005406 <_printf_i+0x16e>
 80052c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052c8:	e03a      	b.n	8005340 <_printf_i+0xa8>
 80052ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052ce:	2b15      	cmp	r3, #21
 80052d0:	d8f6      	bhi.n	80052c0 <_printf_i+0x28>
 80052d2:	a101      	add	r1, pc, #4	; (adr r1, 80052d8 <_printf_i+0x40>)
 80052d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052d8:	08005331 	.word	0x08005331
 80052dc:	08005345 	.word	0x08005345
 80052e0:	080052c1 	.word	0x080052c1
 80052e4:	080052c1 	.word	0x080052c1
 80052e8:	080052c1 	.word	0x080052c1
 80052ec:	080052c1 	.word	0x080052c1
 80052f0:	08005345 	.word	0x08005345
 80052f4:	080052c1 	.word	0x080052c1
 80052f8:	080052c1 	.word	0x080052c1
 80052fc:	080052c1 	.word	0x080052c1
 8005300:	080052c1 	.word	0x080052c1
 8005304:	08005451 	.word	0x08005451
 8005308:	08005375 	.word	0x08005375
 800530c:	08005433 	.word	0x08005433
 8005310:	080052c1 	.word	0x080052c1
 8005314:	080052c1 	.word	0x080052c1
 8005318:	08005473 	.word	0x08005473
 800531c:	080052c1 	.word	0x080052c1
 8005320:	08005375 	.word	0x08005375
 8005324:	080052c1 	.word	0x080052c1
 8005328:	080052c1 	.word	0x080052c1
 800532c:	0800543b 	.word	0x0800543b
 8005330:	682b      	ldr	r3, [r5, #0]
 8005332:	1d1a      	adds	r2, r3, #4
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	602a      	str	r2, [r5, #0]
 8005338:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800533c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005340:	2301      	movs	r3, #1
 8005342:	e0a3      	b.n	800548c <_printf_i+0x1f4>
 8005344:	6820      	ldr	r0, [r4, #0]
 8005346:	6829      	ldr	r1, [r5, #0]
 8005348:	0606      	lsls	r6, r0, #24
 800534a:	f101 0304 	add.w	r3, r1, #4
 800534e:	d50a      	bpl.n	8005366 <_printf_i+0xce>
 8005350:	680e      	ldr	r6, [r1, #0]
 8005352:	602b      	str	r3, [r5, #0]
 8005354:	2e00      	cmp	r6, #0
 8005356:	da03      	bge.n	8005360 <_printf_i+0xc8>
 8005358:	232d      	movs	r3, #45	; 0x2d
 800535a:	4276      	negs	r6, r6
 800535c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005360:	485e      	ldr	r0, [pc, #376]	; (80054dc <_printf_i+0x244>)
 8005362:	230a      	movs	r3, #10
 8005364:	e019      	b.n	800539a <_printf_i+0x102>
 8005366:	680e      	ldr	r6, [r1, #0]
 8005368:	602b      	str	r3, [r5, #0]
 800536a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800536e:	bf18      	it	ne
 8005370:	b236      	sxthne	r6, r6
 8005372:	e7ef      	b.n	8005354 <_printf_i+0xbc>
 8005374:	682b      	ldr	r3, [r5, #0]
 8005376:	6820      	ldr	r0, [r4, #0]
 8005378:	1d19      	adds	r1, r3, #4
 800537a:	6029      	str	r1, [r5, #0]
 800537c:	0601      	lsls	r1, r0, #24
 800537e:	d501      	bpl.n	8005384 <_printf_i+0xec>
 8005380:	681e      	ldr	r6, [r3, #0]
 8005382:	e002      	b.n	800538a <_printf_i+0xf2>
 8005384:	0646      	lsls	r6, r0, #25
 8005386:	d5fb      	bpl.n	8005380 <_printf_i+0xe8>
 8005388:	881e      	ldrh	r6, [r3, #0]
 800538a:	4854      	ldr	r0, [pc, #336]	; (80054dc <_printf_i+0x244>)
 800538c:	2f6f      	cmp	r7, #111	; 0x6f
 800538e:	bf0c      	ite	eq
 8005390:	2308      	moveq	r3, #8
 8005392:	230a      	movne	r3, #10
 8005394:	2100      	movs	r1, #0
 8005396:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800539a:	6865      	ldr	r5, [r4, #4]
 800539c:	60a5      	str	r5, [r4, #8]
 800539e:	2d00      	cmp	r5, #0
 80053a0:	bfa2      	ittt	ge
 80053a2:	6821      	ldrge	r1, [r4, #0]
 80053a4:	f021 0104 	bicge.w	r1, r1, #4
 80053a8:	6021      	strge	r1, [r4, #0]
 80053aa:	b90e      	cbnz	r6, 80053b0 <_printf_i+0x118>
 80053ac:	2d00      	cmp	r5, #0
 80053ae:	d04d      	beq.n	800544c <_printf_i+0x1b4>
 80053b0:	4615      	mov	r5, r2
 80053b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80053b6:	fb03 6711 	mls	r7, r3, r1, r6
 80053ba:	5dc7      	ldrb	r7, [r0, r7]
 80053bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80053c0:	4637      	mov	r7, r6
 80053c2:	42bb      	cmp	r3, r7
 80053c4:	460e      	mov	r6, r1
 80053c6:	d9f4      	bls.n	80053b2 <_printf_i+0x11a>
 80053c8:	2b08      	cmp	r3, #8
 80053ca:	d10b      	bne.n	80053e4 <_printf_i+0x14c>
 80053cc:	6823      	ldr	r3, [r4, #0]
 80053ce:	07de      	lsls	r6, r3, #31
 80053d0:	d508      	bpl.n	80053e4 <_printf_i+0x14c>
 80053d2:	6923      	ldr	r3, [r4, #16]
 80053d4:	6861      	ldr	r1, [r4, #4]
 80053d6:	4299      	cmp	r1, r3
 80053d8:	bfde      	ittt	le
 80053da:	2330      	movle	r3, #48	; 0x30
 80053dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053e0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80053e4:	1b52      	subs	r2, r2, r5
 80053e6:	6122      	str	r2, [r4, #16]
 80053e8:	f8cd a000 	str.w	sl, [sp]
 80053ec:	464b      	mov	r3, r9
 80053ee:	aa03      	add	r2, sp, #12
 80053f0:	4621      	mov	r1, r4
 80053f2:	4640      	mov	r0, r8
 80053f4:	f7ff fee2 	bl	80051bc <_printf_common>
 80053f8:	3001      	adds	r0, #1
 80053fa:	d14c      	bne.n	8005496 <_printf_i+0x1fe>
 80053fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005400:	b004      	add	sp, #16
 8005402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005406:	4835      	ldr	r0, [pc, #212]	; (80054dc <_printf_i+0x244>)
 8005408:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800540c:	6829      	ldr	r1, [r5, #0]
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	f851 6b04 	ldr.w	r6, [r1], #4
 8005414:	6029      	str	r1, [r5, #0]
 8005416:	061d      	lsls	r5, r3, #24
 8005418:	d514      	bpl.n	8005444 <_printf_i+0x1ac>
 800541a:	07df      	lsls	r7, r3, #31
 800541c:	bf44      	itt	mi
 800541e:	f043 0320 	orrmi.w	r3, r3, #32
 8005422:	6023      	strmi	r3, [r4, #0]
 8005424:	b91e      	cbnz	r6, 800542e <_printf_i+0x196>
 8005426:	6823      	ldr	r3, [r4, #0]
 8005428:	f023 0320 	bic.w	r3, r3, #32
 800542c:	6023      	str	r3, [r4, #0]
 800542e:	2310      	movs	r3, #16
 8005430:	e7b0      	b.n	8005394 <_printf_i+0xfc>
 8005432:	6823      	ldr	r3, [r4, #0]
 8005434:	f043 0320 	orr.w	r3, r3, #32
 8005438:	6023      	str	r3, [r4, #0]
 800543a:	2378      	movs	r3, #120	; 0x78
 800543c:	4828      	ldr	r0, [pc, #160]	; (80054e0 <_printf_i+0x248>)
 800543e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005442:	e7e3      	b.n	800540c <_printf_i+0x174>
 8005444:	0659      	lsls	r1, r3, #25
 8005446:	bf48      	it	mi
 8005448:	b2b6      	uxthmi	r6, r6
 800544a:	e7e6      	b.n	800541a <_printf_i+0x182>
 800544c:	4615      	mov	r5, r2
 800544e:	e7bb      	b.n	80053c8 <_printf_i+0x130>
 8005450:	682b      	ldr	r3, [r5, #0]
 8005452:	6826      	ldr	r6, [r4, #0]
 8005454:	6961      	ldr	r1, [r4, #20]
 8005456:	1d18      	adds	r0, r3, #4
 8005458:	6028      	str	r0, [r5, #0]
 800545a:	0635      	lsls	r5, r6, #24
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	d501      	bpl.n	8005464 <_printf_i+0x1cc>
 8005460:	6019      	str	r1, [r3, #0]
 8005462:	e002      	b.n	800546a <_printf_i+0x1d2>
 8005464:	0670      	lsls	r0, r6, #25
 8005466:	d5fb      	bpl.n	8005460 <_printf_i+0x1c8>
 8005468:	8019      	strh	r1, [r3, #0]
 800546a:	2300      	movs	r3, #0
 800546c:	6123      	str	r3, [r4, #16]
 800546e:	4615      	mov	r5, r2
 8005470:	e7ba      	b.n	80053e8 <_printf_i+0x150>
 8005472:	682b      	ldr	r3, [r5, #0]
 8005474:	1d1a      	adds	r2, r3, #4
 8005476:	602a      	str	r2, [r5, #0]
 8005478:	681d      	ldr	r5, [r3, #0]
 800547a:	6862      	ldr	r2, [r4, #4]
 800547c:	2100      	movs	r1, #0
 800547e:	4628      	mov	r0, r5
 8005480:	f7fa fede 	bl	8000240 <memchr>
 8005484:	b108      	cbz	r0, 800548a <_printf_i+0x1f2>
 8005486:	1b40      	subs	r0, r0, r5
 8005488:	6060      	str	r0, [r4, #4]
 800548a:	6863      	ldr	r3, [r4, #4]
 800548c:	6123      	str	r3, [r4, #16]
 800548e:	2300      	movs	r3, #0
 8005490:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005494:	e7a8      	b.n	80053e8 <_printf_i+0x150>
 8005496:	6923      	ldr	r3, [r4, #16]
 8005498:	462a      	mov	r2, r5
 800549a:	4649      	mov	r1, r9
 800549c:	4640      	mov	r0, r8
 800549e:	47d0      	blx	sl
 80054a0:	3001      	adds	r0, #1
 80054a2:	d0ab      	beq.n	80053fc <_printf_i+0x164>
 80054a4:	6823      	ldr	r3, [r4, #0]
 80054a6:	079b      	lsls	r3, r3, #30
 80054a8:	d413      	bmi.n	80054d2 <_printf_i+0x23a>
 80054aa:	68e0      	ldr	r0, [r4, #12]
 80054ac:	9b03      	ldr	r3, [sp, #12]
 80054ae:	4298      	cmp	r0, r3
 80054b0:	bfb8      	it	lt
 80054b2:	4618      	movlt	r0, r3
 80054b4:	e7a4      	b.n	8005400 <_printf_i+0x168>
 80054b6:	2301      	movs	r3, #1
 80054b8:	4632      	mov	r2, r6
 80054ba:	4649      	mov	r1, r9
 80054bc:	4640      	mov	r0, r8
 80054be:	47d0      	blx	sl
 80054c0:	3001      	adds	r0, #1
 80054c2:	d09b      	beq.n	80053fc <_printf_i+0x164>
 80054c4:	3501      	adds	r5, #1
 80054c6:	68e3      	ldr	r3, [r4, #12]
 80054c8:	9903      	ldr	r1, [sp, #12]
 80054ca:	1a5b      	subs	r3, r3, r1
 80054cc:	42ab      	cmp	r3, r5
 80054ce:	dcf2      	bgt.n	80054b6 <_printf_i+0x21e>
 80054d0:	e7eb      	b.n	80054aa <_printf_i+0x212>
 80054d2:	2500      	movs	r5, #0
 80054d4:	f104 0619 	add.w	r6, r4, #25
 80054d8:	e7f5      	b.n	80054c6 <_printf_i+0x22e>
 80054da:	bf00      	nop
 80054dc:	0800686d 	.word	0x0800686d
 80054e0:	0800687e 	.word	0x0800687e

080054e4 <__svfiscanf_r>:
 80054e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054e8:	461d      	mov	r5, r3
 80054ea:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80054ec:	07df      	lsls	r7, r3, #31
 80054ee:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80054f2:	4606      	mov	r6, r0
 80054f4:	460c      	mov	r4, r1
 80054f6:	4692      	mov	sl, r2
 80054f8:	d405      	bmi.n	8005506 <__svfiscanf_r+0x22>
 80054fa:	898b      	ldrh	r3, [r1, #12]
 80054fc:	0598      	lsls	r0, r3, #22
 80054fe:	d402      	bmi.n	8005506 <__svfiscanf_r+0x22>
 8005500:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8005502:	f7ff fbb2 	bl	8004c6a <__retarget_lock_acquire_recursive>
 8005506:	2300      	movs	r3, #0
 8005508:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 800550c:	4ba6      	ldr	r3, [pc, #664]	; (80057a8 <__svfiscanf_r+0x2c4>)
 800550e:	93a0      	str	r3, [sp, #640]	; 0x280
 8005510:	f10d 0804 	add.w	r8, sp, #4
 8005514:	4ba5      	ldr	r3, [pc, #660]	; (80057ac <__svfiscanf_r+0x2c8>)
 8005516:	4fa6      	ldr	r7, [pc, #664]	; (80057b0 <__svfiscanf_r+0x2cc>)
 8005518:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80057b4 <__svfiscanf_r+0x2d0>
 800551c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005520:	93a1      	str	r3, [sp, #644]	; 0x284
 8005522:	9500      	str	r5, [sp, #0]
 8005524:	f89a 3000 	ldrb.w	r3, [sl]
 8005528:	2b00      	cmp	r3, #0
 800552a:	f000 8173 	beq.w	8005814 <__svfiscanf_r+0x330>
 800552e:	5dd9      	ldrb	r1, [r3, r7]
 8005530:	f011 0108 	ands.w	r1, r1, #8
 8005534:	f10a 0501 	add.w	r5, sl, #1
 8005538:	d019      	beq.n	800556e <__svfiscanf_r+0x8a>
 800553a:	6863      	ldr	r3, [r4, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	dd0f      	ble.n	8005560 <__svfiscanf_r+0x7c>
 8005540:	6823      	ldr	r3, [r4, #0]
 8005542:	781a      	ldrb	r2, [r3, #0]
 8005544:	5cba      	ldrb	r2, [r7, r2]
 8005546:	0711      	lsls	r1, r2, #28
 8005548:	d401      	bmi.n	800554e <__svfiscanf_r+0x6a>
 800554a:	46aa      	mov	sl, r5
 800554c:	e7ea      	b.n	8005524 <__svfiscanf_r+0x40>
 800554e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005550:	3201      	adds	r2, #1
 8005552:	9245      	str	r2, [sp, #276]	; 0x114
 8005554:	6862      	ldr	r2, [r4, #4]
 8005556:	3301      	adds	r3, #1
 8005558:	3a01      	subs	r2, #1
 800555a:	6062      	str	r2, [r4, #4]
 800555c:	6023      	str	r3, [r4, #0]
 800555e:	e7ec      	b.n	800553a <__svfiscanf_r+0x56>
 8005560:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005562:	4621      	mov	r1, r4
 8005564:	4630      	mov	r0, r6
 8005566:	4798      	blx	r3
 8005568:	2800      	cmp	r0, #0
 800556a:	d0e9      	beq.n	8005540 <__svfiscanf_r+0x5c>
 800556c:	e7ed      	b.n	800554a <__svfiscanf_r+0x66>
 800556e:	2b25      	cmp	r3, #37	; 0x25
 8005570:	d012      	beq.n	8005598 <__svfiscanf_r+0xb4>
 8005572:	469a      	mov	sl, r3
 8005574:	6863      	ldr	r3, [r4, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	f340 8095 	ble.w	80056a6 <__svfiscanf_r+0x1c2>
 800557c:	6822      	ldr	r2, [r4, #0]
 800557e:	7813      	ldrb	r3, [r2, #0]
 8005580:	4553      	cmp	r3, sl
 8005582:	f040 8147 	bne.w	8005814 <__svfiscanf_r+0x330>
 8005586:	6863      	ldr	r3, [r4, #4]
 8005588:	3b01      	subs	r3, #1
 800558a:	6063      	str	r3, [r4, #4]
 800558c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800558e:	3201      	adds	r2, #1
 8005590:	3301      	adds	r3, #1
 8005592:	6022      	str	r2, [r4, #0]
 8005594:	9345      	str	r3, [sp, #276]	; 0x114
 8005596:	e7d8      	b.n	800554a <__svfiscanf_r+0x66>
 8005598:	9141      	str	r1, [sp, #260]	; 0x104
 800559a:	9143      	str	r1, [sp, #268]	; 0x10c
 800559c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80055a0:	2b2a      	cmp	r3, #42	; 0x2a
 80055a2:	bf02      	ittt	eq
 80055a4:	2310      	moveq	r3, #16
 80055a6:	9341      	streq	r3, [sp, #260]	; 0x104
 80055a8:	f10a 0502 	addeq.w	r5, sl, #2
 80055ac:	220a      	movs	r2, #10
 80055ae:	46aa      	mov	sl, r5
 80055b0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80055b4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80055b8:	2b09      	cmp	r3, #9
 80055ba:	d91e      	bls.n	80055fa <__svfiscanf_r+0x116>
 80055bc:	487d      	ldr	r0, [pc, #500]	; (80057b4 <__svfiscanf_r+0x2d0>)
 80055be:	2203      	movs	r2, #3
 80055c0:	f7fa fe3e 	bl	8000240 <memchr>
 80055c4:	b140      	cbz	r0, 80055d8 <__svfiscanf_r+0xf4>
 80055c6:	2301      	movs	r3, #1
 80055c8:	eba0 0009 	sub.w	r0, r0, r9
 80055cc:	fa03 f000 	lsl.w	r0, r3, r0
 80055d0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80055d2:	4318      	orrs	r0, r3
 80055d4:	9041      	str	r0, [sp, #260]	; 0x104
 80055d6:	4655      	mov	r5, sl
 80055d8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80055dc:	2b78      	cmp	r3, #120	; 0x78
 80055de:	d807      	bhi.n	80055f0 <__svfiscanf_r+0x10c>
 80055e0:	2b57      	cmp	r3, #87	; 0x57
 80055e2:	d811      	bhi.n	8005608 <__svfiscanf_r+0x124>
 80055e4:	2b25      	cmp	r3, #37	; 0x25
 80055e6:	d0c4      	beq.n	8005572 <__svfiscanf_r+0x8e>
 80055e8:	d858      	bhi.n	800569c <__svfiscanf_r+0x1b8>
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f000 80c8 	beq.w	8005780 <__svfiscanf_r+0x29c>
 80055f0:	2303      	movs	r3, #3
 80055f2:	9347      	str	r3, [sp, #284]	; 0x11c
 80055f4:	230a      	movs	r3, #10
 80055f6:	9342      	str	r3, [sp, #264]	; 0x108
 80055f8:	e07c      	b.n	80056f4 <__svfiscanf_r+0x210>
 80055fa:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80055fc:	fb02 1103 	mla	r1, r2, r3, r1
 8005600:	3930      	subs	r1, #48	; 0x30
 8005602:	9143      	str	r1, [sp, #268]	; 0x10c
 8005604:	4655      	mov	r5, sl
 8005606:	e7d2      	b.n	80055ae <__svfiscanf_r+0xca>
 8005608:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800560c:	2a20      	cmp	r2, #32
 800560e:	d8ef      	bhi.n	80055f0 <__svfiscanf_r+0x10c>
 8005610:	a101      	add	r1, pc, #4	; (adr r1, 8005618 <__svfiscanf_r+0x134>)
 8005612:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005616:	bf00      	nop
 8005618:	080056df 	.word	0x080056df
 800561c:	080055f1 	.word	0x080055f1
 8005620:	080055f1 	.word	0x080055f1
 8005624:	0800573d 	.word	0x0800573d
 8005628:	080055f1 	.word	0x080055f1
 800562c:	080055f1 	.word	0x080055f1
 8005630:	080055f1 	.word	0x080055f1
 8005634:	080055f1 	.word	0x080055f1
 8005638:	080055f1 	.word	0x080055f1
 800563c:	080055f1 	.word	0x080055f1
 8005640:	080055f1 	.word	0x080055f1
 8005644:	08005753 	.word	0x08005753
 8005648:	08005729 	.word	0x08005729
 800564c:	080056a3 	.word	0x080056a3
 8005650:	080056a3 	.word	0x080056a3
 8005654:	080056a3 	.word	0x080056a3
 8005658:	080055f1 	.word	0x080055f1
 800565c:	0800572d 	.word	0x0800572d
 8005660:	080055f1 	.word	0x080055f1
 8005664:	080055f1 	.word	0x080055f1
 8005668:	080055f1 	.word	0x080055f1
 800566c:	080055f1 	.word	0x080055f1
 8005670:	08005763 	.word	0x08005763
 8005674:	08005735 	.word	0x08005735
 8005678:	080056d7 	.word	0x080056d7
 800567c:	080055f1 	.word	0x080055f1
 8005680:	080055f1 	.word	0x080055f1
 8005684:	0800575f 	.word	0x0800575f
 8005688:	080055f1 	.word	0x080055f1
 800568c:	08005729 	.word	0x08005729
 8005690:	080055f1 	.word	0x080055f1
 8005694:	080055f1 	.word	0x080055f1
 8005698:	080056df 	.word	0x080056df
 800569c:	3b45      	subs	r3, #69	; 0x45
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d8a6      	bhi.n	80055f0 <__svfiscanf_r+0x10c>
 80056a2:	2305      	movs	r3, #5
 80056a4:	e025      	b.n	80056f2 <__svfiscanf_r+0x20e>
 80056a6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80056a8:	4621      	mov	r1, r4
 80056aa:	4630      	mov	r0, r6
 80056ac:	4798      	blx	r3
 80056ae:	2800      	cmp	r0, #0
 80056b0:	f43f af64 	beq.w	800557c <__svfiscanf_r+0x98>
 80056b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056b6:	07da      	lsls	r2, r3, #31
 80056b8:	f140 80a4 	bpl.w	8005804 <__svfiscanf_r+0x320>
 80056bc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80056be:	2800      	cmp	r0, #0
 80056c0:	d067      	beq.n	8005792 <__svfiscanf_r+0x2ae>
 80056c2:	89a3      	ldrh	r3, [r4, #12]
 80056c4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80056c8:	bf18      	it	ne
 80056ca:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80056ce:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80056d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056d6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80056d8:	f042 0220 	orr.w	r2, r2, #32
 80056dc:	9241      	str	r2, [sp, #260]	; 0x104
 80056de:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80056e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056e4:	9241      	str	r2, [sp, #260]	; 0x104
 80056e6:	2210      	movs	r2, #16
 80056e8:	2b6f      	cmp	r3, #111	; 0x6f
 80056ea:	9242      	str	r2, [sp, #264]	; 0x108
 80056ec:	bf34      	ite	cc
 80056ee:	2303      	movcc	r3, #3
 80056f0:	2304      	movcs	r3, #4
 80056f2:	9347      	str	r3, [sp, #284]	; 0x11c
 80056f4:	6863      	ldr	r3, [r4, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	dd4e      	ble.n	8005798 <__svfiscanf_r+0x2b4>
 80056fa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80056fc:	065b      	lsls	r3, r3, #25
 80056fe:	d404      	bmi.n	800570a <__svfiscanf_r+0x226>
 8005700:	6823      	ldr	r3, [r4, #0]
 8005702:	781a      	ldrb	r2, [r3, #0]
 8005704:	5cba      	ldrb	r2, [r7, r2]
 8005706:	0710      	lsls	r0, r2, #28
 8005708:	d456      	bmi.n	80057b8 <__svfiscanf_r+0x2d4>
 800570a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800570c:	2b02      	cmp	r3, #2
 800570e:	dc65      	bgt.n	80057dc <__svfiscanf_r+0x2f8>
 8005710:	466b      	mov	r3, sp
 8005712:	4622      	mov	r2, r4
 8005714:	a941      	add	r1, sp, #260	; 0x104
 8005716:	4630      	mov	r0, r6
 8005718:	f000 f8b2 	bl	8005880 <_scanf_chars>
 800571c:	2801      	cmp	r0, #1
 800571e:	d079      	beq.n	8005814 <__svfiscanf_r+0x330>
 8005720:	2802      	cmp	r0, #2
 8005722:	f47f af12 	bne.w	800554a <__svfiscanf_r+0x66>
 8005726:	e7c5      	b.n	80056b4 <__svfiscanf_r+0x1d0>
 8005728:	220a      	movs	r2, #10
 800572a:	e7dd      	b.n	80056e8 <__svfiscanf_r+0x204>
 800572c:	2300      	movs	r3, #0
 800572e:	9342      	str	r3, [sp, #264]	; 0x108
 8005730:	2303      	movs	r3, #3
 8005732:	e7de      	b.n	80056f2 <__svfiscanf_r+0x20e>
 8005734:	2308      	movs	r3, #8
 8005736:	9342      	str	r3, [sp, #264]	; 0x108
 8005738:	2304      	movs	r3, #4
 800573a:	e7da      	b.n	80056f2 <__svfiscanf_r+0x20e>
 800573c:	4629      	mov	r1, r5
 800573e:	4640      	mov	r0, r8
 8005740:	f000 fa94 	bl	8005c6c <__sccl>
 8005744:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800574a:	9341      	str	r3, [sp, #260]	; 0x104
 800574c:	4605      	mov	r5, r0
 800574e:	2301      	movs	r3, #1
 8005750:	e7cf      	b.n	80056f2 <__svfiscanf_r+0x20e>
 8005752:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005758:	9341      	str	r3, [sp, #260]	; 0x104
 800575a:	2300      	movs	r3, #0
 800575c:	e7c9      	b.n	80056f2 <__svfiscanf_r+0x20e>
 800575e:	2302      	movs	r3, #2
 8005760:	e7c7      	b.n	80056f2 <__svfiscanf_r+0x20e>
 8005762:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005764:	06c3      	lsls	r3, r0, #27
 8005766:	f53f aef0 	bmi.w	800554a <__svfiscanf_r+0x66>
 800576a:	9b00      	ldr	r3, [sp, #0]
 800576c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800576e:	1d19      	adds	r1, r3, #4
 8005770:	9100      	str	r1, [sp, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f010 0f01 	tst.w	r0, #1
 8005778:	bf14      	ite	ne
 800577a:	801a      	strhne	r2, [r3, #0]
 800577c:	601a      	streq	r2, [r3, #0]
 800577e:	e6e4      	b.n	800554a <__svfiscanf_r+0x66>
 8005780:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005782:	07d8      	lsls	r0, r3, #31
 8005784:	d405      	bmi.n	8005792 <__svfiscanf_r+0x2ae>
 8005786:	89a3      	ldrh	r3, [r4, #12]
 8005788:	0599      	lsls	r1, r3, #22
 800578a:	d402      	bmi.n	8005792 <__svfiscanf_r+0x2ae>
 800578c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800578e:	f7ff fa6d 	bl	8004c6c <__retarget_lock_release_recursive>
 8005792:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005796:	e79a      	b.n	80056ce <__svfiscanf_r+0x1ea>
 8005798:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800579a:	4621      	mov	r1, r4
 800579c:	4630      	mov	r0, r6
 800579e:	4798      	blx	r3
 80057a0:	2800      	cmp	r0, #0
 80057a2:	d0aa      	beq.n	80056fa <__svfiscanf_r+0x216>
 80057a4:	e786      	b.n	80056b4 <__svfiscanf_r+0x1d0>
 80057a6:	bf00      	nop
 80057a8:	08005fc9 	.word	0x08005fc9
 80057ac:	08005b39 	.word	0x08005b39
 80057b0:	080068ab 	.word	0x080068ab
 80057b4:	08006862 	.word	0x08006862
 80057b8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80057ba:	3201      	adds	r2, #1
 80057bc:	9245      	str	r2, [sp, #276]	; 0x114
 80057be:	6862      	ldr	r2, [r4, #4]
 80057c0:	3a01      	subs	r2, #1
 80057c2:	2a00      	cmp	r2, #0
 80057c4:	6062      	str	r2, [r4, #4]
 80057c6:	dd02      	ble.n	80057ce <__svfiscanf_r+0x2ea>
 80057c8:	3301      	adds	r3, #1
 80057ca:	6023      	str	r3, [r4, #0]
 80057cc:	e798      	b.n	8005700 <__svfiscanf_r+0x21c>
 80057ce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80057d0:	4621      	mov	r1, r4
 80057d2:	4630      	mov	r0, r6
 80057d4:	4798      	blx	r3
 80057d6:	2800      	cmp	r0, #0
 80057d8:	d092      	beq.n	8005700 <__svfiscanf_r+0x21c>
 80057da:	e76b      	b.n	80056b4 <__svfiscanf_r+0x1d0>
 80057dc:	2b04      	cmp	r3, #4
 80057de:	dc06      	bgt.n	80057ee <__svfiscanf_r+0x30a>
 80057e0:	466b      	mov	r3, sp
 80057e2:	4622      	mov	r2, r4
 80057e4:	a941      	add	r1, sp, #260	; 0x104
 80057e6:	4630      	mov	r0, r6
 80057e8:	f000 f8a4 	bl	8005934 <_scanf_i>
 80057ec:	e796      	b.n	800571c <__svfiscanf_r+0x238>
 80057ee:	4b0f      	ldr	r3, [pc, #60]	; (800582c <__svfiscanf_r+0x348>)
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f43f aeaa 	beq.w	800554a <__svfiscanf_r+0x66>
 80057f6:	466b      	mov	r3, sp
 80057f8:	4622      	mov	r2, r4
 80057fa:	a941      	add	r1, sp, #260	; 0x104
 80057fc:	4630      	mov	r0, r6
 80057fe:	f3af 8000 	nop.w
 8005802:	e78b      	b.n	800571c <__svfiscanf_r+0x238>
 8005804:	89a3      	ldrh	r3, [r4, #12]
 8005806:	0599      	lsls	r1, r3, #22
 8005808:	f53f af58 	bmi.w	80056bc <__svfiscanf_r+0x1d8>
 800580c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800580e:	f7ff fa2d 	bl	8004c6c <__retarget_lock_release_recursive>
 8005812:	e753      	b.n	80056bc <__svfiscanf_r+0x1d8>
 8005814:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005816:	07da      	lsls	r2, r3, #31
 8005818:	d405      	bmi.n	8005826 <__svfiscanf_r+0x342>
 800581a:	89a3      	ldrh	r3, [r4, #12]
 800581c:	059b      	lsls	r3, r3, #22
 800581e:	d402      	bmi.n	8005826 <__svfiscanf_r+0x342>
 8005820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005822:	f7ff fa23 	bl	8004c6c <__retarget_lock_release_recursive>
 8005826:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005828:	e751      	b.n	80056ce <__svfiscanf_r+0x1ea>
 800582a:	bf00      	nop
 800582c:	00000000 	.word	0x00000000

08005830 <_vfiscanf_r>:
 8005830:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005832:	460c      	mov	r4, r1
 8005834:	4605      	mov	r5, r0
 8005836:	b138      	cbz	r0, 8005848 <_vfiscanf_r+0x18>
 8005838:	6981      	ldr	r1, [r0, #24]
 800583a:	b929      	cbnz	r1, 8005848 <_vfiscanf_r+0x18>
 800583c:	e9cd 2300 	strd	r2, r3, [sp]
 8005840:	f7ff f958 	bl	8004af4 <__sinit>
 8005844:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005848:	490a      	ldr	r1, [pc, #40]	; (8005874 <_vfiscanf_r+0x44>)
 800584a:	428c      	cmp	r4, r1
 800584c:	d107      	bne.n	800585e <_vfiscanf_r+0x2e>
 800584e:	686c      	ldr	r4, [r5, #4]
 8005850:	4621      	mov	r1, r4
 8005852:	4628      	mov	r0, r5
 8005854:	b003      	add	sp, #12
 8005856:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800585a:	f7ff be43 	b.w	80054e4 <__svfiscanf_r>
 800585e:	4906      	ldr	r1, [pc, #24]	; (8005878 <_vfiscanf_r+0x48>)
 8005860:	428c      	cmp	r4, r1
 8005862:	d101      	bne.n	8005868 <_vfiscanf_r+0x38>
 8005864:	68ac      	ldr	r4, [r5, #8]
 8005866:	e7f3      	b.n	8005850 <_vfiscanf_r+0x20>
 8005868:	4904      	ldr	r1, [pc, #16]	; (800587c <_vfiscanf_r+0x4c>)
 800586a:	428c      	cmp	r4, r1
 800586c:	bf08      	it	eq
 800586e:	68ec      	ldreq	r4, [r5, #12]
 8005870:	e7ee      	b.n	8005850 <_vfiscanf_r+0x20>
 8005872:	bf00      	nop
 8005874:	0800681c 	.word	0x0800681c
 8005878:	0800683c 	.word	0x0800683c
 800587c:	080067fc 	.word	0x080067fc

08005880 <_scanf_chars>:
 8005880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005884:	4615      	mov	r5, r2
 8005886:	688a      	ldr	r2, [r1, #8]
 8005888:	4680      	mov	r8, r0
 800588a:	460c      	mov	r4, r1
 800588c:	b932      	cbnz	r2, 800589c <_scanf_chars+0x1c>
 800588e:	698a      	ldr	r2, [r1, #24]
 8005890:	2a00      	cmp	r2, #0
 8005892:	bf0c      	ite	eq
 8005894:	2201      	moveq	r2, #1
 8005896:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800589a:	608a      	str	r2, [r1, #8]
 800589c:	6822      	ldr	r2, [r4, #0]
 800589e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8005930 <_scanf_chars+0xb0>
 80058a2:	06d1      	lsls	r1, r2, #27
 80058a4:	bf5f      	itttt	pl
 80058a6:	681a      	ldrpl	r2, [r3, #0]
 80058a8:	1d11      	addpl	r1, r2, #4
 80058aa:	6019      	strpl	r1, [r3, #0]
 80058ac:	6816      	ldrpl	r6, [r2, #0]
 80058ae:	2700      	movs	r7, #0
 80058b0:	69a0      	ldr	r0, [r4, #24]
 80058b2:	b188      	cbz	r0, 80058d8 <_scanf_chars+0x58>
 80058b4:	2801      	cmp	r0, #1
 80058b6:	d107      	bne.n	80058c8 <_scanf_chars+0x48>
 80058b8:	682a      	ldr	r2, [r5, #0]
 80058ba:	7811      	ldrb	r1, [r2, #0]
 80058bc:	6962      	ldr	r2, [r4, #20]
 80058be:	5c52      	ldrb	r2, [r2, r1]
 80058c0:	b952      	cbnz	r2, 80058d8 <_scanf_chars+0x58>
 80058c2:	2f00      	cmp	r7, #0
 80058c4:	d031      	beq.n	800592a <_scanf_chars+0xaa>
 80058c6:	e022      	b.n	800590e <_scanf_chars+0x8e>
 80058c8:	2802      	cmp	r0, #2
 80058ca:	d120      	bne.n	800590e <_scanf_chars+0x8e>
 80058cc:	682b      	ldr	r3, [r5, #0]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	f813 3009 	ldrb.w	r3, [r3, r9]
 80058d4:	071b      	lsls	r3, r3, #28
 80058d6:	d41a      	bmi.n	800590e <_scanf_chars+0x8e>
 80058d8:	6823      	ldr	r3, [r4, #0]
 80058da:	06da      	lsls	r2, r3, #27
 80058dc:	bf5e      	ittt	pl
 80058de:	682b      	ldrpl	r3, [r5, #0]
 80058e0:	781b      	ldrbpl	r3, [r3, #0]
 80058e2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80058e6:	682a      	ldr	r2, [r5, #0]
 80058e8:	686b      	ldr	r3, [r5, #4]
 80058ea:	3201      	adds	r2, #1
 80058ec:	602a      	str	r2, [r5, #0]
 80058ee:	68a2      	ldr	r2, [r4, #8]
 80058f0:	3b01      	subs	r3, #1
 80058f2:	3a01      	subs	r2, #1
 80058f4:	606b      	str	r3, [r5, #4]
 80058f6:	3701      	adds	r7, #1
 80058f8:	60a2      	str	r2, [r4, #8]
 80058fa:	b142      	cbz	r2, 800590e <_scanf_chars+0x8e>
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	dcd7      	bgt.n	80058b0 <_scanf_chars+0x30>
 8005900:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005904:	4629      	mov	r1, r5
 8005906:	4640      	mov	r0, r8
 8005908:	4798      	blx	r3
 800590a:	2800      	cmp	r0, #0
 800590c:	d0d0      	beq.n	80058b0 <_scanf_chars+0x30>
 800590e:	6823      	ldr	r3, [r4, #0]
 8005910:	f013 0310 	ands.w	r3, r3, #16
 8005914:	d105      	bne.n	8005922 <_scanf_chars+0xa2>
 8005916:	68e2      	ldr	r2, [r4, #12]
 8005918:	3201      	adds	r2, #1
 800591a:	60e2      	str	r2, [r4, #12]
 800591c:	69a2      	ldr	r2, [r4, #24]
 800591e:	b102      	cbz	r2, 8005922 <_scanf_chars+0xa2>
 8005920:	7033      	strb	r3, [r6, #0]
 8005922:	6923      	ldr	r3, [r4, #16]
 8005924:	443b      	add	r3, r7
 8005926:	6123      	str	r3, [r4, #16]
 8005928:	2000      	movs	r0, #0
 800592a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800592e:	bf00      	nop
 8005930:	080068ab 	.word	0x080068ab

08005934 <_scanf_i>:
 8005934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005938:	4698      	mov	r8, r3
 800593a:	4b76      	ldr	r3, [pc, #472]	; (8005b14 <_scanf_i+0x1e0>)
 800593c:	460c      	mov	r4, r1
 800593e:	4682      	mov	sl, r0
 8005940:	4616      	mov	r6, r2
 8005942:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005946:	b087      	sub	sp, #28
 8005948:	ab03      	add	r3, sp, #12
 800594a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800594e:	4b72      	ldr	r3, [pc, #456]	; (8005b18 <_scanf_i+0x1e4>)
 8005950:	69a1      	ldr	r1, [r4, #24]
 8005952:	4a72      	ldr	r2, [pc, #456]	; (8005b1c <_scanf_i+0x1e8>)
 8005954:	2903      	cmp	r1, #3
 8005956:	bf18      	it	ne
 8005958:	461a      	movne	r2, r3
 800595a:	68a3      	ldr	r3, [r4, #8]
 800595c:	9201      	str	r2, [sp, #4]
 800595e:	1e5a      	subs	r2, r3, #1
 8005960:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005964:	bf88      	it	hi
 8005966:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800596a:	4627      	mov	r7, r4
 800596c:	bf82      	ittt	hi
 800596e:	eb03 0905 	addhi.w	r9, r3, r5
 8005972:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005976:	60a3      	strhi	r3, [r4, #8]
 8005978:	f857 3b1c 	ldr.w	r3, [r7], #28
 800597c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005980:	bf98      	it	ls
 8005982:	f04f 0900 	movls.w	r9, #0
 8005986:	6023      	str	r3, [r4, #0]
 8005988:	463d      	mov	r5, r7
 800598a:	f04f 0b00 	mov.w	fp, #0
 800598e:	6831      	ldr	r1, [r6, #0]
 8005990:	ab03      	add	r3, sp, #12
 8005992:	7809      	ldrb	r1, [r1, #0]
 8005994:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005998:	2202      	movs	r2, #2
 800599a:	f7fa fc51 	bl	8000240 <memchr>
 800599e:	b328      	cbz	r0, 80059ec <_scanf_i+0xb8>
 80059a0:	f1bb 0f01 	cmp.w	fp, #1
 80059a4:	d159      	bne.n	8005a5a <_scanf_i+0x126>
 80059a6:	6862      	ldr	r2, [r4, #4]
 80059a8:	b92a      	cbnz	r2, 80059b6 <_scanf_i+0x82>
 80059aa:	6822      	ldr	r2, [r4, #0]
 80059ac:	2308      	movs	r3, #8
 80059ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059b2:	6063      	str	r3, [r4, #4]
 80059b4:	6022      	str	r2, [r4, #0]
 80059b6:	6822      	ldr	r2, [r4, #0]
 80059b8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80059bc:	6022      	str	r2, [r4, #0]
 80059be:	68a2      	ldr	r2, [r4, #8]
 80059c0:	1e51      	subs	r1, r2, #1
 80059c2:	60a1      	str	r1, [r4, #8]
 80059c4:	b192      	cbz	r2, 80059ec <_scanf_i+0xb8>
 80059c6:	6832      	ldr	r2, [r6, #0]
 80059c8:	1c51      	adds	r1, r2, #1
 80059ca:	6031      	str	r1, [r6, #0]
 80059cc:	7812      	ldrb	r2, [r2, #0]
 80059ce:	f805 2b01 	strb.w	r2, [r5], #1
 80059d2:	6872      	ldr	r2, [r6, #4]
 80059d4:	3a01      	subs	r2, #1
 80059d6:	2a00      	cmp	r2, #0
 80059d8:	6072      	str	r2, [r6, #4]
 80059da:	dc07      	bgt.n	80059ec <_scanf_i+0xb8>
 80059dc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80059e0:	4631      	mov	r1, r6
 80059e2:	4650      	mov	r0, sl
 80059e4:	4790      	blx	r2
 80059e6:	2800      	cmp	r0, #0
 80059e8:	f040 8085 	bne.w	8005af6 <_scanf_i+0x1c2>
 80059ec:	f10b 0b01 	add.w	fp, fp, #1
 80059f0:	f1bb 0f03 	cmp.w	fp, #3
 80059f4:	d1cb      	bne.n	800598e <_scanf_i+0x5a>
 80059f6:	6863      	ldr	r3, [r4, #4]
 80059f8:	b90b      	cbnz	r3, 80059fe <_scanf_i+0xca>
 80059fa:	230a      	movs	r3, #10
 80059fc:	6063      	str	r3, [r4, #4]
 80059fe:	6863      	ldr	r3, [r4, #4]
 8005a00:	4947      	ldr	r1, [pc, #284]	; (8005b20 <_scanf_i+0x1ec>)
 8005a02:	6960      	ldr	r0, [r4, #20]
 8005a04:	1ac9      	subs	r1, r1, r3
 8005a06:	f000 f931 	bl	8005c6c <__sccl>
 8005a0a:	f04f 0b00 	mov.w	fp, #0
 8005a0e:	68a3      	ldr	r3, [r4, #8]
 8005a10:	6822      	ldr	r2, [r4, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d03d      	beq.n	8005a92 <_scanf_i+0x15e>
 8005a16:	6831      	ldr	r1, [r6, #0]
 8005a18:	6960      	ldr	r0, [r4, #20]
 8005a1a:	f891 c000 	ldrb.w	ip, [r1]
 8005a1e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005a22:	2800      	cmp	r0, #0
 8005a24:	d035      	beq.n	8005a92 <_scanf_i+0x15e>
 8005a26:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8005a2a:	d124      	bne.n	8005a76 <_scanf_i+0x142>
 8005a2c:	0510      	lsls	r0, r2, #20
 8005a2e:	d522      	bpl.n	8005a76 <_scanf_i+0x142>
 8005a30:	f10b 0b01 	add.w	fp, fp, #1
 8005a34:	f1b9 0f00 	cmp.w	r9, #0
 8005a38:	d003      	beq.n	8005a42 <_scanf_i+0x10e>
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8005a40:	60a3      	str	r3, [r4, #8]
 8005a42:	6873      	ldr	r3, [r6, #4]
 8005a44:	3b01      	subs	r3, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	6073      	str	r3, [r6, #4]
 8005a4a:	dd1b      	ble.n	8005a84 <_scanf_i+0x150>
 8005a4c:	6833      	ldr	r3, [r6, #0]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	6033      	str	r3, [r6, #0]
 8005a52:	68a3      	ldr	r3, [r4, #8]
 8005a54:	3b01      	subs	r3, #1
 8005a56:	60a3      	str	r3, [r4, #8]
 8005a58:	e7d9      	b.n	8005a0e <_scanf_i+0xda>
 8005a5a:	f1bb 0f02 	cmp.w	fp, #2
 8005a5e:	d1ae      	bne.n	80059be <_scanf_i+0x8a>
 8005a60:	6822      	ldr	r2, [r4, #0]
 8005a62:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8005a66:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005a6a:	d1bf      	bne.n	80059ec <_scanf_i+0xb8>
 8005a6c:	2310      	movs	r3, #16
 8005a6e:	6063      	str	r3, [r4, #4]
 8005a70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a74:	e7a2      	b.n	80059bc <_scanf_i+0x88>
 8005a76:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8005a7a:	6022      	str	r2, [r4, #0]
 8005a7c:	780b      	ldrb	r3, [r1, #0]
 8005a7e:	f805 3b01 	strb.w	r3, [r5], #1
 8005a82:	e7de      	b.n	8005a42 <_scanf_i+0x10e>
 8005a84:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005a88:	4631      	mov	r1, r6
 8005a8a:	4650      	mov	r0, sl
 8005a8c:	4798      	blx	r3
 8005a8e:	2800      	cmp	r0, #0
 8005a90:	d0df      	beq.n	8005a52 <_scanf_i+0x11e>
 8005a92:	6823      	ldr	r3, [r4, #0]
 8005a94:	05db      	lsls	r3, r3, #23
 8005a96:	d50d      	bpl.n	8005ab4 <_scanf_i+0x180>
 8005a98:	42bd      	cmp	r5, r7
 8005a9a:	d909      	bls.n	8005ab0 <_scanf_i+0x17c>
 8005a9c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005aa0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005aa4:	4632      	mov	r2, r6
 8005aa6:	4650      	mov	r0, sl
 8005aa8:	4798      	blx	r3
 8005aaa:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8005aae:	464d      	mov	r5, r9
 8005ab0:	42bd      	cmp	r5, r7
 8005ab2:	d02d      	beq.n	8005b10 <_scanf_i+0x1dc>
 8005ab4:	6822      	ldr	r2, [r4, #0]
 8005ab6:	f012 0210 	ands.w	r2, r2, #16
 8005aba:	d113      	bne.n	8005ae4 <_scanf_i+0x1b0>
 8005abc:	702a      	strb	r2, [r5, #0]
 8005abe:	6863      	ldr	r3, [r4, #4]
 8005ac0:	9e01      	ldr	r6, [sp, #4]
 8005ac2:	4639      	mov	r1, r7
 8005ac4:	4650      	mov	r0, sl
 8005ac6:	47b0      	blx	r6
 8005ac8:	6821      	ldr	r1, [r4, #0]
 8005aca:	f8d8 3000 	ldr.w	r3, [r8]
 8005ace:	f011 0f20 	tst.w	r1, #32
 8005ad2:	d013      	beq.n	8005afc <_scanf_i+0x1c8>
 8005ad4:	1d1a      	adds	r2, r3, #4
 8005ad6:	f8c8 2000 	str.w	r2, [r8]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6018      	str	r0, [r3, #0]
 8005ade:	68e3      	ldr	r3, [r4, #12]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	60e3      	str	r3, [r4, #12]
 8005ae4:	1bed      	subs	r5, r5, r7
 8005ae6:	44ab      	add	fp, r5
 8005ae8:	6925      	ldr	r5, [r4, #16]
 8005aea:	445d      	add	r5, fp
 8005aec:	6125      	str	r5, [r4, #16]
 8005aee:	2000      	movs	r0, #0
 8005af0:	b007      	add	sp, #28
 8005af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af6:	f04f 0b00 	mov.w	fp, #0
 8005afa:	e7ca      	b.n	8005a92 <_scanf_i+0x15e>
 8005afc:	1d1a      	adds	r2, r3, #4
 8005afe:	f8c8 2000 	str.w	r2, [r8]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f011 0f01 	tst.w	r1, #1
 8005b08:	bf14      	ite	ne
 8005b0a:	8018      	strhne	r0, [r3, #0]
 8005b0c:	6018      	streq	r0, [r3, #0]
 8005b0e:	e7e6      	b.n	8005ade <_scanf_i+0x1aa>
 8005b10:	2001      	movs	r0, #1
 8005b12:	e7ed      	b.n	8005af0 <_scanf_i+0x1bc>
 8005b14:	080067d4 	.word	0x080067d4
 8005b18:	08005f51 	.word	0x08005f51
 8005b1c:	08005e69 	.word	0x08005e69
 8005b20:	080068a8 	.word	0x080068a8

08005b24 <lflush>:
 8005b24:	8983      	ldrh	r3, [r0, #12]
 8005b26:	f003 0309 	and.w	r3, r3, #9
 8005b2a:	2b09      	cmp	r3, #9
 8005b2c:	d101      	bne.n	8005b32 <lflush+0xe>
 8005b2e:	f7fe bf77 	b.w	8004a20 <fflush>
 8005b32:	2000      	movs	r0, #0
 8005b34:	4770      	bx	lr
	...

08005b38 <__srefill_r>:
 8005b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b3a:	460c      	mov	r4, r1
 8005b3c:	4605      	mov	r5, r0
 8005b3e:	b118      	cbz	r0, 8005b48 <__srefill_r+0x10>
 8005b40:	6983      	ldr	r3, [r0, #24]
 8005b42:	b90b      	cbnz	r3, 8005b48 <__srefill_r+0x10>
 8005b44:	f7fe ffd6 	bl	8004af4 <__sinit>
 8005b48:	4b3b      	ldr	r3, [pc, #236]	; (8005c38 <__srefill_r+0x100>)
 8005b4a:	429c      	cmp	r4, r3
 8005b4c:	d10a      	bne.n	8005b64 <__srefill_r+0x2c>
 8005b4e:	686c      	ldr	r4, [r5, #4]
 8005b50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b54:	2300      	movs	r3, #0
 8005b56:	6063      	str	r3, [r4, #4]
 8005b58:	89a3      	ldrh	r3, [r4, #12]
 8005b5a:	069e      	lsls	r6, r3, #26
 8005b5c:	d50c      	bpl.n	8005b78 <__srefill_r+0x40>
 8005b5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b62:	e066      	b.n	8005c32 <__srefill_r+0xfa>
 8005b64:	4b35      	ldr	r3, [pc, #212]	; (8005c3c <__srefill_r+0x104>)
 8005b66:	429c      	cmp	r4, r3
 8005b68:	d101      	bne.n	8005b6e <__srefill_r+0x36>
 8005b6a:	68ac      	ldr	r4, [r5, #8]
 8005b6c:	e7f0      	b.n	8005b50 <__srefill_r+0x18>
 8005b6e:	4b34      	ldr	r3, [pc, #208]	; (8005c40 <__srefill_r+0x108>)
 8005b70:	429c      	cmp	r4, r3
 8005b72:	bf08      	it	eq
 8005b74:	68ec      	ldreq	r4, [r5, #12]
 8005b76:	e7eb      	b.n	8005b50 <__srefill_r+0x18>
 8005b78:	0758      	lsls	r0, r3, #29
 8005b7a:	d448      	bmi.n	8005c0e <__srefill_r+0xd6>
 8005b7c:	06d9      	lsls	r1, r3, #27
 8005b7e:	d405      	bmi.n	8005b8c <__srefill_r+0x54>
 8005b80:	2309      	movs	r3, #9
 8005b82:	602b      	str	r3, [r5, #0]
 8005b84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b88:	81a3      	strh	r3, [r4, #12]
 8005b8a:	e7e8      	b.n	8005b5e <__srefill_r+0x26>
 8005b8c:	071a      	lsls	r2, r3, #28
 8005b8e:	d50b      	bpl.n	8005ba8 <__srefill_r+0x70>
 8005b90:	4621      	mov	r1, r4
 8005b92:	4628      	mov	r0, r5
 8005b94:	f7fe ff08 	bl	80049a8 <_fflush_r>
 8005b98:	2800      	cmp	r0, #0
 8005b9a:	d1e0      	bne.n	8005b5e <__srefill_r+0x26>
 8005b9c:	89a3      	ldrh	r3, [r4, #12]
 8005b9e:	60a0      	str	r0, [r4, #8]
 8005ba0:	f023 0308 	bic.w	r3, r3, #8
 8005ba4:	81a3      	strh	r3, [r4, #12]
 8005ba6:	61a0      	str	r0, [r4, #24]
 8005ba8:	89a3      	ldrh	r3, [r4, #12]
 8005baa:	f043 0304 	orr.w	r3, r3, #4
 8005bae:	81a3      	strh	r3, [r4, #12]
 8005bb0:	6923      	ldr	r3, [r4, #16]
 8005bb2:	b91b      	cbnz	r3, 8005bbc <__srefill_r+0x84>
 8005bb4:	4621      	mov	r1, r4
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	f7ff f87e 	bl	8004cb8 <__smakebuf_r>
 8005bbc:	89a6      	ldrh	r6, [r4, #12]
 8005bbe:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8005bc2:	07b3      	lsls	r3, r6, #30
 8005bc4:	d00f      	beq.n	8005be6 <__srefill_r+0xae>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	81a3      	strh	r3, [r4, #12]
 8005bca:	4b1e      	ldr	r3, [pc, #120]	; (8005c44 <__srefill_r+0x10c>)
 8005bcc:	491e      	ldr	r1, [pc, #120]	; (8005c48 <__srefill_r+0x110>)
 8005bce:	6818      	ldr	r0, [r3, #0]
 8005bd0:	f006 0609 	and.w	r6, r6, #9
 8005bd4:	f7ff f80c 	bl	8004bf0 <_fwalk>
 8005bd8:	2e09      	cmp	r6, #9
 8005bda:	81a7      	strh	r7, [r4, #12]
 8005bdc:	d103      	bne.n	8005be6 <__srefill_r+0xae>
 8005bde:	4621      	mov	r1, r4
 8005be0:	4628      	mov	r0, r5
 8005be2:	f7fe fe5b 	bl	800489c <__sflush_r>
 8005be6:	6922      	ldr	r2, [r4, #16]
 8005be8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005bea:	6963      	ldr	r3, [r4, #20]
 8005bec:	6a21      	ldr	r1, [r4, #32]
 8005bee:	6022      	str	r2, [r4, #0]
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	47b0      	blx	r6
 8005bf4:	2800      	cmp	r0, #0
 8005bf6:	6060      	str	r0, [r4, #4]
 8005bf8:	dc1c      	bgt.n	8005c34 <__srefill_r+0xfc>
 8005bfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bfe:	bf17      	itett	ne
 8005c00:	2200      	movne	r2, #0
 8005c02:	f043 0320 	orreq.w	r3, r3, #32
 8005c06:	6062      	strne	r2, [r4, #4]
 8005c08:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8005c0c:	e7bc      	b.n	8005b88 <__srefill_r+0x50>
 8005c0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c10:	2900      	cmp	r1, #0
 8005c12:	d0cd      	beq.n	8005bb0 <__srefill_r+0x78>
 8005c14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c18:	4299      	cmp	r1, r3
 8005c1a:	d002      	beq.n	8005c22 <__srefill_r+0xea>
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	f7ff f893 	bl	8004d48 <_free_r>
 8005c22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c24:	6063      	str	r3, [r4, #4]
 8005c26:	2000      	movs	r0, #0
 8005c28:	6360      	str	r0, [r4, #52]	; 0x34
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d0c0      	beq.n	8005bb0 <__srefill_r+0x78>
 8005c2e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005c30:	6023      	str	r3, [r4, #0]
 8005c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c34:	2000      	movs	r0, #0
 8005c36:	e7fc      	b.n	8005c32 <__srefill_r+0xfa>
 8005c38:	0800681c 	.word	0x0800681c
 8005c3c:	0800683c 	.word	0x0800683c
 8005c40:	080067fc 	.word	0x080067fc
 8005c44:	080067f8 	.word	0x080067f8
 8005c48:	08005b25 	.word	0x08005b25

08005c4c <_sbrk_r>:
 8005c4c:	b538      	push	{r3, r4, r5, lr}
 8005c4e:	4d06      	ldr	r5, [pc, #24]	; (8005c68 <_sbrk_r+0x1c>)
 8005c50:	2300      	movs	r3, #0
 8005c52:	4604      	mov	r4, r0
 8005c54:	4608      	mov	r0, r1
 8005c56:	602b      	str	r3, [r5, #0]
 8005c58:	f7fb fa6c 	bl	8001134 <_sbrk>
 8005c5c:	1c43      	adds	r3, r0, #1
 8005c5e:	d102      	bne.n	8005c66 <_sbrk_r+0x1a>
 8005c60:	682b      	ldr	r3, [r5, #0]
 8005c62:	b103      	cbz	r3, 8005c66 <_sbrk_r+0x1a>
 8005c64:	6023      	str	r3, [r4, #0]
 8005c66:	bd38      	pop	{r3, r4, r5, pc}
 8005c68:	20000864 	.word	0x20000864

08005c6c <__sccl>:
 8005c6c:	b570      	push	{r4, r5, r6, lr}
 8005c6e:	780b      	ldrb	r3, [r1, #0]
 8005c70:	4604      	mov	r4, r0
 8005c72:	2b5e      	cmp	r3, #94	; 0x5e
 8005c74:	bf0b      	itete	eq
 8005c76:	784b      	ldrbeq	r3, [r1, #1]
 8005c78:	1c48      	addne	r0, r1, #1
 8005c7a:	1c88      	addeq	r0, r1, #2
 8005c7c:	2200      	movne	r2, #0
 8005c7e:	bf08      	it	eq
 8005c80:	2201      	moveq	r2, #1
 8005c82:	1e61      	subs	r1, r4, #1
 8005c84:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8005c88:	f801 2f01 	strb.w	r2, [r1, #1]!
 8005c8c:	42a9      	cmp	r1, r5
 8005c8e:	d1fb      	bne.n	8005c88 <__sccl+0x1c>
 8005c90:	b90b      	cbnz	r3, 8005c96 <__sccl+0x2a>
 8005c92:	3801      	subs	r0, #1
 8005c94:	bd70      	pop	{r4, r5, r6, pc}
 8005c96:	f082 0201 	eor.w	r2, r2, #1
 8005c9a:	54e2      	strb	r2, [r4, r3]
 8005c9c:	4605      	mov	r5, r0
 8005c9e:	4628      	mov	r0, r5
 8005ca0:	f810 1b01 	ldrb.w	r1, [r0], #1
 8005ca4:	292d      	cmp	r1, #45	; 0x2d
 8005ca6:	d006      	beq.n	8005cb6 <__sccl+0x4a>
 8005ca8:	295d      	cmp	r1, #93	; 0x5d
 8005caa:	d0f3      	beq.n	8005c94 <__sccl+0x28>
 8005cac:	b909      	cbnz	r1, 8005cb2 <__sccl+0x46>
 8005cae:	4628      	mov	r0, r5
 8005cb0:	e7f0      	b.n	8005c94 <__sccl+0x28>
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	e7f1      	b.n	8005c9a <__sccl+0x2e>
 8005cb6:	786e      	ldrb	r6, [r5, #1]
 8005cb8:	2e5d      	cmp	r6, #93	; 0x5d
 8005cba:	d0fa      	beq.n	8005cb2 <__sccl+0x46>
 8005cbc:	42b3      	cmp	r3, r6
 8005cbe:	dcf8      	bgt.n	8005cb2 <__sccl+0x46>
 8005cc0:	3502      	adds	r5, #2
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	3101      	adds	r1, #1
 8005cc6:	428e      	cmp	r6, r1
 8005cc8:	5462      	strb	r2, [r4, r1]
 8005cca:	dcfb      	bgt.n	8005cc4 <__sccl+0x58>
 8005ccc:	1af1      	subs	r1, r6, r3
 8005cce:	3901      	subs	r1, #1
 8005cd0:	1c58      	adds	r0, r3, #1
 8005cd2:	42b3      	cmp	r3, r6
 8005cd4:	bfa8      	it	ge
 8005cd6:	2100      	movge	r1, #0
 8005cd8:	1843      	adds	r3, r0, r1
 8005cda:	e7e0      	b.n	8005c9e <__sccl+0x32>

08005cdc <__sread>:
 8005cdc:	b510      	push	{r4, lr}
 8005cde:	460c      	mov	r4, r1
 8005ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ce4:	f000 fb68 	bl	80063b8 <_read_r>
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	bfab      	itete	ge
 8005cec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005cee:	89a3      	ldrhlt	r3, [r4, #12]
 8005cf0:	181b      	addge	r3, r3, r0
 8005cf2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005cf6:	bfac      	ite	ge
 8005cf8:	6563      	strge	r3, [r4, #84]	; 0x54
 8005cfa:	81a3      	strhlt	r3, [r4, #12]
 8005cfc:	bd10      	pop	{r4, pc}

08005cfe <__swrite>:
 8005cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d02:	461f      	mov	r7, r3
 8005d04:	898b      	ldrh	r3, [r1, #12]
 8005d06:	05db      	lsls	r3, r3, #23
 8005d08:	4605      	mov	r5, r0
 8005d0a:	460c      	mov	r4, r1
 8005d0c:	4616      	mov	r6, r2
 8005d0e:	d505      	bpl.n	8005d1c <__swrite+0x1e>
 8005d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d14:	2302      	movs	r3, #2
 8005d16:	2200      	movs	r2, #0
 8005d18:	f000 faf2 	bl	8006300 <_lseek_r>
 8005d1c:	89a3      	ldrh	r3, [r4, #12]
 8005d1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d26:	81a3      	strh	r3, [r4, #12]
 8005d28:	4632      	mov	r2, r6
 8005d2a:	463b      	mov	r3, r7
 8005d2c:	4628      	mov	r0, r5
 8005d2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d32:	f000 ba33 	b.w	800619c <_write_r>

08005d36 <__sseek>:
 8005d36:	b510      	push	{r4, lr}
 8005d38:	460c      	mov	r4, r1
 8005d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d3e:	f000 fadf 	bl	8006300 <_lseek_r>
 8005d42:	1c43      	adds	r3, r0, #1
 8005d44:	89a3      	ldrh	r3, [r4, #12]
 8005d46:	bf15      	itete	ne
 8005d48:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d52:	81a3      	strheq	r3, [r4, #12]
 8005d54:	bf18      	it	ne
 8005d56:	81a3      	strhne	r3, [r4, #12]
 8005d58:	bd10      	pop	{r4, pc}

08005d5a <__sclose>:
 8005d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d5e:	f000 ba9d 	b.w	800629c <_close_r>
	...

08005d64 <_strtol_l.constprop.0>:
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d6a:	d001      	beq.n	8005d70 <_strtol_l.constprop.0+0xc>
 8005d6c:	2b24      	cmp	r3, #36	; 0x24
 8005d6e:	d906      	bls.n	8005d7e <_strtol_l.constprop.0+0x1a>
 8005d70:	f7fe fc6c 	bl	800464c <__errno>
 8005d74:	2316      	movs	r3, #22
 8005d76:	6003      	str	r3, [r0, #0]
 8005d78:	2000      	movs	r0, #0
 8005d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d7e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005e64 <_strtol_l.constprop.0+0x100>
 8005d82:	460d      	mov	r5, r1
 8005d84:	462e      	mov	r6, r5
 8005d86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d8a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005d8e:	f017 0708 	ands.w	r7, r7, #8
 8005d92:	d1f7      	bne.n	8005d84 <_strtol_l.constprop.0+0x20>
 8005d94:	2c2d      	cmp	r4, #45	; 0x2d
 8005d96:	d132      	bne.n	8005dfe <_strtol_l.constprop.0+0x9a>
 8005d98:	782c      	ldrb	r4, [r5, #0]
 8005d9a:	2701      	movs	r7, #1
 8005d9c:	1cb5      	adds	r5, r6, #2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d05b      	beq.n	8005e5a <_strtol_l.constprop.0+0xf6>
 8005da2:	2b10      	cmp	r3, #16
 8005da4:	d109      	bne.n	8005dba <_strtol_l.constprop.0+0x56>
 8005da6:	2c30      	cmp	r4, #48	; 0x30
 8005da8:	d107      	bne.n	8005dba <_strtol_l.constprop.0+0x56>
 8005daa:	782c      	ldrb	r4, [r5, #0]
 8005dac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005db0:	2c58      	cmp	r4, #88	; 0x58
 8005db2:	d14d      	bne.n	8005e50 <_strtol_l.constprop.0+0xec>
 8005db4:	786c      	ldrb	r4, [r5, #1]
 8005db6:	2310      	movs	r3, #16
 8005db8:	3502      	adds	r5, #2
 8005dba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005dbe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005dc2:	f04f 0c00 	mov.w	ip, #0
 8005dc6:	fbb8 f9f3 	udiv	r9, r8, r3
 8005dca:	4666      	mov	r6, ip
 8005dcc:	fb03 8a19 	mls	sl, r3, r9, r8
 8005dd0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005dd4:	f1be 0f09 	cmp.w	lr, #9
 8005dd8:	d816      	bhi.n	8005e08 <_strtol_l.constprop.0+0xa4>
 8005dda:	4674      	mov	r4, lr
 8005ddc:	42a3      	cmp	r3, r4
 8005dde:	dd24      	ble.n	8005e2a <_strtol_l.constprop.0+0xc6>
 8005de0:	f1bc 0f00 	cmp.w	ip, #0
 8005de4:	db1e      	blt.n	8005e24 <_strtol_l.constprop.0+0xc0>
 8005de6:	45b1      	cmp	r9, r6
 8005de8:	d31c      	bcc.n	8005e24 <_strtol_l.constprop.0+0xc0>
 8005dea:	d101      	bne.n	8005df0 <_strtol_l.constprop.0+0x8c>
 8005dec:	45a2      	cmp	sl, r4
 8005dee:	db19      	blt.n	8005e24 <_strtol_l.constprop.0+0xc0>
 8005df0:	fb06 4603 	mla	r6, r6, r3, r4
 8005df4:	f04f 0c01 	mov.w	ip, #1
 8005df8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005dfc:	e7e8      	b.n	8005dd0 <_strtol_l.constprop.0+0x6c>
 8005dfe:	2c2b      	cmp	r4, #43	; 0x2b
 8005e00:	bf04      	itt	eq
 8005e02:	782c      	ldrbeq	r4, [r5, #0]
 8005e04:	1cb5      	addeq	r5, r6, #2
 8005e06:	e7ca      	b.n	8005d9e <_strtol_l.constprop.0+0x3a>
 8005e08:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005e0c:	f1be 0f19 	cmp.w	lr, #25
 8005e10:	d801      	bhi.n	8005e16 <_strtol_l.constprop.0+0xb2>
 8005e12:	3c37      	subs	r4, #55	; 0x37
 8005e14:	e7e2      	b.n	8005ddc <_strtol_l.constprop.0+0x78>
 8005e16:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005e1a:	f1be 0f19 	cmp.w	lr, #25
 8005e1e:	d804      	bhi.n	8005e2a <_strtol_l.constprop.0+0xc6>
 8005e20:	3c57      	subs	r4, #87	; 0x57
 8005e22:	e7db      	b.n	8005ddc <_strtol_l.constprop.0+0x78>
 8005e24:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8005e28:	e7e6      	b.n	8005df8 <_strtol_l.constprop.0+0x94>
 8005e2a:	f1bc 0f00 	cmp.w	ip, #0
 8005e2e:	da05      	bge.n	8005e3c <_strtol_l.constprop.0+0xd8>
 8005e30:	2322      	movs	r3, #34	; 0x22
 8005e32:	6003      	str	r3, [r0, #0]
 8005e34:	4646      	mov	r6, r8
 8005e36:	b942      	cbnz	r2, 8005e4a <_strtol_l.constprop.0+0xe6>
 8005e38:	4630      	mov	r0, r6
 8005e3a:	e79e      	b.n	8005d7a <_strtol_l.constprop.0+0x16>
 8005e3c:	b107      	cbz	r7, 8005e40 <_strtol_l.constprop.0+0xdc>
 8005e3e:	4276      	negs	r6, r6
 8005e40:	2a00      	cmp	r2, #0
 8005e42:	d0f9      	beq.n	8005e38 <_strtol_l.constprop.0+0xd4>
 8005e44:	f1bc 0f00 	cmp.w	ip, #0
 8005e48:	d000      	beq.n	8005e4c <_strtol_l.constprop.0+0xe8>
 8005e4a:	1e69      	subs	r1, r5, #1
 8005e4c:	6011      	str	r1, [r2, #0]
 8005e4e:	e7f3      	b.n	8005e38 <_strtol_l.constprop.0+0xd4>
 8005e50:	2430      	movs	r4, #48	; 0x30
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1b1      	bne.n	8005dba <_strtol_l.constprop.0+0x56>
 8005e56:	2308      	movs	r3, #8
 8005e58:	e7af      	b.n	8005dba <_strtol_l.constprop.0+0x56>
 8005e5a:	2c30      	cmp	r4, #48	; 0x30
 8005e5c:	d0a5      	beq.n	8005daa <_strtol_l.constprop.0+0x46>
 8005e5e:	230a      	movs	r3, #10
 8005e60:	e7ab      	b.n	8005dba <_strtol_l.constprop.0+0x56>
 8005e62:	bf00      	nop
 8005e64:	080068ab 	.word	0x080068ab

08005e68 <_strtol_r>:
 8005e68:	f7ff bf7c 	b.w	8005d64 <_strtol_l.constprop.0>

08005e6c <_strtoul_l.constprop.0>:
 8005e6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e70:	4f36      	ldr	r7, [pc, #216]	; (8005f4c <_strtoul_l.constprop.0+0xe0>)
 8005e72:	4686      	mov	lr, r0
 8005e74:	460d      	mov	r5, r1
 8005e76:	4628      	mov	r0, r5
 8005e78:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e7c:	5de6      	ldrb	r6, [r4, r7]
 8005e7e:	f016 0608 	ands.w	r6, r6, #8
 8005e82:	d1f8      	bne.n	8005e76 <_strtoul_l.constprop.0+0xa>
 8005e84:	2c2d      	cmp	r4, #45	; 0x2d
 8005e86:	d12f      	bne.n	8005ee8 <_strtoul_l.constprop.0+0x7c>
 8005e88:	782c      	ldrb	r4, [r5, #0]
 8005e8a:	2601      	movs	r6, #1
 8005e8c:	1c85      	adds	r5, r0, #2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d057      	beq.n	8005f42 <_strtoul_l.constprop.0+0xd6>
 8005e92:	2b10      	cmp	r3, #16
 8005e94:	d109      	bne.n	8005eaa <_strtoul_l.constprop.0+0x3e>
 8005e96:	2c30      	cmp	r4, #48	; 0x30
 8005e98:	d107      	bne.n	8005eaa <_strtoul_l.constprop.0+0x3e>
 8005e9a:	7828      	ldrb	r0, [r5, #0]
 8005e9c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005ea0:	2858      	cmp	r0, #88	; 0x58
 8005ea2:	d149      	bne.n	8005f38 <_strtoul_l.constprop.0+0xcc>
 8005ea4:	786c      	ldrb	r4, [r5, #1]
 8005ea6:	2310      	movs	r3, #16
 8005ea8:	3502      	adds	r5, #2
 8005eaa:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005eae:	2700      	movs	r7, #0
 8005eb0:	fbb8 f8f3 	udiv	r8, r8, r3
 8005eb4:	fb03 f908 	mul.w	r9, r3, r8
 8005eb8:	ea6f 0909 	mvn.w	r9, r9
 8005ebc:	4638      	mov	r0, r7
 8005ebe:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005ec2:	f1bc 0f09 	cmp.w	ip, #9
 8005ec6:	d814      	bhi.n	8005ef2 <_strtoul_l.constprop.0+0x86>
 8005ec8:	4664      	mov	r4, ip
 8005eca:	42a3      	cmp	r3, r4
 8005ecc:	dd22      	ble.n	8005f14 <_strtoul_l.constprop.0+0xa8>
 8005ece:	2f00      	cmp	r7, #0
 8005ed0:	db1d      	blt.n	8005f0e <_strtoul_l.constprop.0+0xa2>
 8005ed2:	4580      	cmp	r8, r0
 8005ed4:	d31b      	bcc.n	8005f0e <_strtoul_l.constprop.0+0xa2>
 8005ed6:	d101      	bne.n	8005edc <_strtoul_l.constprop.0+0x70>
 8005ed8:	45a1      	cmp	r9, r4
 8005eda:	db18      	blt.n	8005f0e <_strtoul_l.constprop.0+0xa2>
 8005edc:	fb00 4003 	mla	r0, r0, r3, r4
 8005ee0:	2701      	movs	r7, #1
 8005ee2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ee6:	e7ea      	b.n	8005ebe <_strtoul_l.constprop.0+0x52>
 8005ee8:	2c2b      	cmp	r4, #43	; 0x2b
 8005eea:	bf04      	itt	eq
 8005eec:	782c      	ldrbeq	r4, [r5, #0]
 8005eee:	1c85      	addeq	r5, r0, #2
 8005ef0:	e7cd      	b.n	8005e8e <_strtoul_l.constprop.0+0x22>
 8005ef2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005ef6:	f1bc 0f19 	cmp.w	ip, #25
 8005efa:	d801      	bhi.n	8005f00 <_strtoul_l.constprop.0+0x94>
 8005efc:	3c37      	subs	r4, #55	; 0x37
 8005efe:	e7e4      	b.n	8005eca <_strtoul_l.constprop.0+0x5e>
 8005f00:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005f04:	f1bc 0f19 	cmp.w	ip, #25
 8005f08:	d804      	bhi.n	8005f14 <_strtoul_l.constprop.0+0xa8>
 8005f0a:	3c57      	subs	r4, #87	; 0x57
 8005f0c:	e7dd      	b.n	8005eca <_strtoul_l.constprop.0+0x5e>
 8005f0e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005f12:	e7e6      	b.n	8005ee2 <_strtoul_l.constprop.0+0x76>
 8005f14:	2f00      	cmp	r7, #0
 8005f16:	da07      	bge.n	8005f28 <_strtoul_l.constprop.0+0xbc>
 8005f18:	2322      	movs	r3, #34	; 0x22
 8005f1a:	f8ce 3000 	str.w	r3, [lr]
 8005f1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f22:	b932      	cbnz	r2, 8005f32 <_strtoul_l.constprop.0+0xc6>
 8005f24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f28:	b106      	cbz	r6, 8005f2c <_strtoul_l.constprop.0+0xc0>
 8005f2a:	4240      	negs	r0, r0
 8005f2c:	2a00      	cmp	r2, #0
 8005f2e:	d0f9      	beq.n	8005f24 <_strtoul_l.constprop.0+0xb8>
 8005f30:	b107      	cbz	r7, 8005f34 <_strtoul_l.constprop.0+0xc8>
 8005f32:	1e69      	subs	r1, r5, #1
 8005f34:	6011      	str	r1, [r2, #0]
 8005f36:	e7f5      	b.n	8005f24 <_strtoul_l.constprop.0+0xb8>
 8005f38:	2430      	movs	r4, #48	; 0x30
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1b5      	bne.n	8005eaa <_strtoul_l.constprop.0+0x3e>
 8005f3e:	2308      	movs	r3, #8
 8005f40:	e7b3      	b.n	8005eaa <_strtoul_l.constprop.0+0x3e>
 8005f42:	2c30      	cmp	r4, #48	; 0x30
 8005f44:	d0a9      	beq.n	8005e9a <_strtoul_l.constprop.0+0x2e>
 8005f46:	230a      	movs	r3, #10
 8005f48:	e7af      	b.n	8005eaa <_strtoul_l.constprop.0+0x3e>
 8005f4a:	bf00      	nop
 8005f4c:	080068ab 	.word	0x080068ab

08005f50 <_strtoul_r>:
 8005f50:	f7ff bf8c 	b.w	8005e6c <_strtoul_l.constprop.0>

08005f54 <__submore>:
 8005f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f58:	460c      	mov	r4, r1
 8005f5a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005f5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f60:	4299      	cmp	r1, r3
 8005f62:	d11d      	bne.n	8005fa0 <__submore+0x4c>
 8005f64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005f68:	f7fe ff5a 	bl	8004e20 <_malloc_r>
 8005f6c:	b918      	cbnz	r0, 8005f76 <__submore+0x22>
 8005f6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f7a:	63a3      	str	r3, [r4, #56]	; 0x38
 8005f7c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005f80:	6360      	str	r0, [r4, #52]	; 0x34
 8005f82:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8005f86:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005f8a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8005f8e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005f92:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8005f96:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8005f9a:	6020      	str	r0, [r4, #0]
 8005f9c:	2000      	movs	r0, #0
 8005f9e:	e7e8      	b.n	8005f72 <__submore+0x1e>
 8005fa0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005fa2:	0077      	lsls	r7, r6, #1
 8005fa4:	463a      	mov	r2, r7
 8005fa6:	f000 f9d7 	bl	8006358 <_realloc_r>
 8005faa:	4605      	mov	r5, r0
 8005fac:	2800      	cmp	r0, #0
 8005fae:	d0de      	beq.n	8005f6e <__submore+0x1a>
 8005fb0:	eb00 0806 	add.w	r8, r0, r6
 8005fb4:	4601      	mov	r1, r0
 8005fb6:	4632      	mov	r2, r6
 8005fb8:	4640      	mov	r0, r8
 8005fba:	f000 f9b3 	bl	8006324 <memcpy>
 8005fbe:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8005fc2:	f8c4 8000 	str.w	r8, [r4]
 8005fc6:	e7e9      	b.n	8005f9c <__submore+0x48>

08005fc8 <_ungetc_r>:
 8005fc8:	b570      	push	{r4, r5, r6, lr}
 8005fca:	4614      	mov	r4, r2
 8005fcc:	1c4a      	adds	r2, r1, #1
 8005fce:	4606      	mov	r6, r0
 8005fd0:	460d      	mov	r5, r1
 8005fd2:	d103      	bne.n	8005fdc <_ungetc_r+0x14>
 8005fd4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005fd8:	4628      	mov	r0, r5
 8005fda:	bd70      	pop	{r4, r5, r6, pc}
 8005fdc:	b118      	cbz	r0, 8005fe6 <_ungetc_r+0x1e>
 8005fde:	6983      	ldr	r3, [r0, #24]
 8005fe0:	b90b      	cbnz	r3, 8005fe6 <_ungetc_r+0x1e>
 8005fe2:	f7fe fd87 	bl	8004af4 <__sinit>
 8005fe6:	4b41      	ldr	r3, [pc, #260]	; (80060ec <_ungetc_r+0x124>)
 8005fe8:	429c      	cmp	r4, r3
 8005fea:	d11d      	bne.n	8006028 <_ungetc_r+0x60>
 8005fec:	6874      	ldr	r4, [r6, #4]
 8005fee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ff0:	07db      	lsls	r3, r3, #31
 8005ff2:	d405      	bmi.n	8006000 <_ungetc_r+0x38>
 8005ff4:	89a3      	ldrh	r3, [r4, #12]
 8005ff6:	0598      	lsls	r0, r3, #22
 8005ff8:	d402      	bmi.n	8006000 <_ungetc_r+0x38>
 8005ffa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ffc:	f7fe fe35 	bl	8004c6a <__retarget_lock_acquire_recursive>
 8006000:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006004:	f023 0320 	bic.w	r3, r3, #32
 8006008:	0759      	lsls	r1, r3, #29
 800600a:	81a3      	strh	r3, [r4, #12]
 800600c:	b29a      	uxth	r2, r3
 800600e:	d42d      	bmi.n	800606c <_ungetc_r+0xa4>
 8006010:	06d3      	lsls	r3, r2, #27
 8006012:	d413      	bmi.n	800603c <_ungetc_r+0x74>
 8006014:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006016:	07dd      	lsls	r5, r3, #31
 8006018:	d4dc      	bmi.n	8005fd4 <_ungetc_r+0xc>
 800601a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800601e:	d1d9      	bne.n	8005fd4 <_ungetc_r+0xc>
 8006020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006022:	f7fe fe23 	bl	8004c6c <__retarget_lock_release_recursive>
 8006026:	e7d5      	b.n	8005fd4 <_ungetc_r+0xc>
 8006028:	4b31      	ldr	r3, [pc, #196]	; (80060f0 <_ungetc_r+0x128>)
 800602a:	429c      	cmp	r4, r3
 800602c:	d101      	bne.n	8006032 <_ungetc_r+0x6a>
 800602e:	68b4      	ldr	r4, [r6, #8]
 8006030:	e7dd      	b.n	8005fee <_ungetc_r+0x26>
 8006032:	4b30      	ldr	r3, [pc, #192]	; (80060f4 <_ungetc_r+0x12c>)
 8006034:	429c      	cmp	r4, r3
 8006036:	bf08      	it	eq
 8006038:	68f4      	ldreq	r4, [r6, #12]
 800603a:	e7d8      	b.n	8005fee <_ungetc_r+0x26>
 800603c:	0710      	lsls	r0, r2, #28
 800603e:	d511      	bpl.n	8006064 <_ungetc_r+0x9c>
 8006040:	4621      	mov	r1, r4
 8006042:	4630      	mov	r0, r6
 8006044:	f7fe fcb0 	bl	80049a8 <_fflush_r>
 8006048:	b130      	cbz	r0, 8006058 <_ungetc_r+0x90>
 800604a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800604c:	07d9      	lsls	r1, r3, #31
 800604e:	d4c1      	bmi.n	8005fd4 <_ungetc_r+0xc>
 8006050:	89a3      	ldrh	r3, [r4, #12]
 8006052:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006056:	e7e2      	b.n	800601e <_ungetc_r+0x56>
 8006058:	89a3      	ldrh	r3, [r4, #12]
 800605a:	60a0      	str	r0, [r4, #8]
 800605c:	f023 0308 	bic.w	r3, r3, #8
 8006060:	81a3      	strh	r3, [r4, #12]
 8006062:	61a0      	str	r0, [r4, #24]
 8006064:	89a3      	ldrh	r3, [r4, #12]
 8006066:	f043 0304 	orr.w	r3, r3, #4
 800606a:	81a3      	strh	r3, [r4, #12]
 800606c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800606e:	6862      	ldr	r2, [r4, #4]
 8006070:	b2ed      	uxtb	r5, r5
 8006072:	b1d3      	cbz	r3, 80060aa <_ungetc_r+0xe2>
 8006074:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006076:	4293      	cmp	r3, r2
 8006078:	dc05      	bgt.n	8006086 <_ungetc_r+0xbe>
 800607a:	4621      	mov	r1, r4
 800607c:	4630      	mov	r0, r6
 800607e:	f7ff ff69 	bl	8005f54 <__submore>
 8006082:	2800      	cmp	r0, #0
 8006084:	d1e1      	bne.n	800604a <_ungetc_r+0x82>
 8006086:	6823      	ldr	r3, [r4, #0]
 8006088:	1e5a      	subs	r2, r3, #1
 800608a:	6022      	str	r2, [r4, #0]
 800608c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006090:	6863      	ldr	r3, [r4, #4]
 8006092:	3301      	adds	r3, #1
 8006094:	6063      	str	r3, [r4, #4]
 8006096:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006098:	07da      	lsls	r2, r3, #31
 800609a:	d49d      	bmi.n	8005fd8 <_ungetc_r+0x10>
 800609c:	89a3      	ldrh	r3, [r4, #12]
 800609e:	059b      	lsls	r3, r3, #22
 80060a0:	d49a      	bmi.n	8005fd8 <_ungetc_r+0x10>
 80060a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060a4:	f7fe fde2 	bl	8004c6c <__retarget_lock_release_recursive>
 80060a8:	e796      	b.n	8005fd8 <_ungetc_r+0x10>
 80060aa:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80060ac:	6920      	ldr	r0, [r4, #16]
 80060ae:	6823      	ldr	r3, [r4, #0]
 80060b0:	f001 0101 	and.w	r1, r1, #1
 80060b4:	b160      	cbz	r0, 80060d0 <_ungetc_r+0x108>
 80060b6:	4298      	cmp	r0, r3
 80060b8:	d20a      	bcs.n	80060d0 <_ungetc_r+0x108>
 80060ba:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 80060be:	42a8      	cmp	r0, r5
 80060c0:	d106      	bne.n	80060d0 <_ungetc_r+0x108>
 80060c2:	3b01      	subs	r3, #1
 80060c4:	3201      	adds	r2, #1
 80060c6:	6023      	str	r3, [r4, #0]
 80060c8:	6062      	str	r2, [r4, #4]
 80060ca:	2900      	cmp	r1, #0
 80060cc:	d184      	bne.n	8005fd8 <_ungetc_r+0x10>
 80060ce:	e7e5      	b.n	800609c <_ungetc_r+0xd4>
 80060d0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80060d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060d8:	6363      	str	r3, [r4, #52]	; 0x34
 80060da:	2303      	movs	r3, #3
 80060dc:	63a3      	str	r3, [r4, #56]	; 0x38
 80060de:	4623      	mov	r3, r4
 80060e0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80060e4:	6023      	str	r3, [r4, #0]
 80060e6:	2301      	movs	r3, #1
 80060e8:	6063      	str	r3, [r4, #4]
 80060ea:	e7ee      	b.n	80060ca <_ungetc_r+0x102>
 80060ec:	0800681c 	.word	0x0800681c
 80060f0:	0800683c 	.word	0x0800683c
 80060f4:	080067fc 	.word	0x080067fc

080060f8 <__swbuf_r>:
 80060f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fa:	460e      	mov	r6, r1
 80060fc:	4614      	mov	r4, r2
 80060fe:	4605      	mov	r5, r0
 8006100:	b118      	cbz	r0, 800610a <__swbuf_r+0x12>
 8006102:	6983      	ldr	r3, [r0, #24]
 8006104:	b90b      	cbnz	r3, 800610a <__swbuf_r+0x12>
 8006106:	f7fe fcf5 	bl	8004af4 <__sinit>
 800610a:	4b21      	ldr	r3, [pc, #132]	; (8006190 <__swbuf_r+0x98>)
 800610c:	429c      	cmp	r4, r3
 800610e:	d12b      	bne.n	8006168 <__swbuf_r+0x70>
 8006110:	686c      	ldr	r4, [r5, #4]
 8006112:	69a3      	ldr	r3, [r4, #24]
 8006114:	60a3      	str	r3, [r4, #8]
 8006116:	89a3      	ldrh	r3, [r4, #12]
 8006118:	071a      	lsls	r2, r3, #28
 800611a:	d52f      	bpl.n	800617c <__swbuf_r+0x84>
 800611c:	6923      	ldr	r3, [r4, #16]
 800611e:	b36b      	cbz	r3, 800617c <__swbuf_r+0x84>
 8006120:	6923      	ldr	r3, [r4, #16]
 8006122:	6820      	ldr	r0, [r4, #0]
 8006124:	1ac0      	subs	r0, r0, r3
 8006126:	6963      	ldr	r3, [r4, #20]
 8006128:	b2f6      	uxtb	r6, r6
 800612a:	4283      	cmp	r3, r0
 800612c:	4637      	mov	r7, r6
 800612e:	dc04      	bgt.n	800613a <__swbuf_r+0x42>
 8006130:	4621      	mov	r1, r4
 8006132:	4628      	mov	r0, r5
 8006134:	f7fe fc38 	bl	80049a8 <_fflush_r>
 8006138:	bb30      	cbnz	r0, 8006188 <__swbuf_r+0x90>
 800613a:	68a3      	ldr	r3, [r4, #8]
 800613c:	3b01      	subs	r3, #1
 800613e:	60a3      	str	r3, [r4, #8]
 8006140:	6823      	ldr	r3, [r4, #0]
 8006142:	1c5a      	adds	r2, r3, #1
 8006144:	6022      	str	r2, [r4, #0]
 8006146:	701e      	strb	r6, [r3, #0]
 8006148:	6963      	ldr	r3, [r4, #20]
 800614a:	3001      	adds	r0, #1
 800614c:	4283      	cmp	r3, r0
 800614e:	d004      	beq.n	800615a <__swbuf_r+0x62>
 8006150:	89a3      	ldrh	r3, [r4, #12]
 8006152:	07db      	lsls	r3, r3, #31
 8006154:	d506      	bpl.n	8006164 <__swbuf_r+0x6c>
 8006156:	2e0a      	cmp	r6, #10
 8006158:	d104      	bne.n	8006164 <__swbuf_r+0x6c>
 800615a:	4621      	mov	r1, r4
 800615c:	4628      	mov	r0, r5
 800615e:	f7fe fc23 	bl	80049a8 <_fflush_r>
 8006162:	b988      	cbnz	r0, 8006188 <__swbuf_r+0x90>
 8006164:	4638      	mov	r0, r7
 8006166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006168:	4b0a      	ldr	r3, [pc, #40]	; (8006194 <__swbuf_r+0x9c>)
 800616a:	429c      	cmp	r4, r3
 800616c:	d101      	bne.n	8006172 <__swbuf_r+0x7a>
 800616e:	68ac      	ldr	r4, [r5, #8]
 8006170:	e7cf      	b.n	8006112 <__swbuf_r+0x1a>
 8006172:	4b09      	ldr	r3, [pc, #36]	; (8006198 <__swbuf_r+0xa0>)
 8006174:	429c      	cmp	r4, r3
 8006176:	bf08      	it	eq
 8006178:	68ec      	ldreq	r4, [r5, #12]
 800617a:	e7ca      	b.n	8006112 <__swbuf_r+0x1a>
 800617c:	4621      	mov	r1, r4
 800617e:	4628      	mov	r0, r5
 8006180:	f000 f81e 	bl	80061c0 <__swsetup_r>
 8006184:	2800      	cmp	r0, #0
 8006186:	d0cb      	beq.n	8006120 <__swbuf_r+0x28>
 8006188:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800618c:	e7ea      	b.n	8006164 <__swbuf_r+0x6c>
 800618e:	bf00      	nop
 8006190:	0800681c 	.word	0x0800681c
 8006194:	0800683c 	.word	0x0800683c
 8006198:	080067fc 	.word	0x080067fc

0800619c <_write_r>:
 800619c:	b538      	push	{r3, r4, r5, lr}
 800619e:	4d07      	ldr	r5, [pc, #28]	; (80061bc <_write_r+0x20>)
 80061a0:	4604      	mov	r4, r0
 80061a2:	4608      	mov	r0, r1
 80061a4:	4611      	mov	r1, r2
 80061a6:	2200      	movs	r2, #0
 80061a8:	602a      	str	r2, [r5, #0]
 80061aa:	461a      	mov	r2, r3
 80061ac:	f7fa ff71 	bl	8001092 <_write>
 80061b0:	1c43      	adds	r3, r0, #1
 80061b2:	d102      	bne.n	80061ba <_write_r+0x1e>
 80061b4:	682b      	ldr	r3, [r5, #0]
 80061b6:	b103      	cbz	r3, 80061ba <_write_r+0x1e>
 80061b8:	6023      	str	r3, [r4, #0]
 80061ba:	bd38      	pop	{r3, r4, r5, pc}
 80061bc:	20000864 	.word	0x20000864

080061c0 <__swsetup_r>:
 80061c0:	4b32      	ldr	r3, [pc, #200]	; (800628c <__swsetup_r+0xcc>)
 80061c2:	b570      	push	{r4, r5, r6, lr}
 80061c4:	681d      	ldr	r5, [r3, #0]
 80061c6:	4606      	mov	r6, r0
 80061c8:	460c      	mov	r4, r1
 80061ca:	b125      	cbz	r5, 80061d6 <__swsetup_r+0x16>
 80061cc:	69ab      	ldr	r3, [r5, #24]
 80061ce:	b913      	cbnz	r3, 80061d6 <__swsetup_r+0x16>
 80061d0:	4628      	mov	r0, r5
 80061d2:	f7fe fc8f 	bl	8004af4 <__sinit>
 80061d6:	4b2e      	ldr	r3, [pc, #184]	; (8006290 <__swsetup_r+0xd0>)
 80061d8:	429c      	cmp	r4, r3
 80061da:	d10f      	bne.n	80061fc <__swsetup_r+0x3c>
 80061dc:	686c      	ldr	r4, [r5, #4]
 80061de:	89a3      	ldrh	r3, [r4, #12]
 80061e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80061e4:	0719      	lsls	r1, r3, #28
 80061e6:	d42c      	bmi.n	8006242 <__swsetup_r+0x82>
 80061e8:	06dd      	lsls	r5, r3, #27
 80061ea:	d411      	bmi.n	8006210 <__swsetup_r+0x50>
 80061ec:	2309      	movs	r3, #9
 80061ee:	6033      	str	r3, [r6, #0]
 80061f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80061f4:	81a3      	strh	r3, [r4, #12]
 80061f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061fa:	e03e      	b.n	800627a <__swsetup_r+0xba>
 80061fc:	4b25      	ldr	r3, [pc, #148]	; (8006294 <__swsetup_r+0xd4>)
 80061fe:	429c      	cmp	r4, r3
 8006200:	d101      	bne.n	8006206 <__swsetup_r+0x46>
 8006202:	68ac      	ldr	r4, [r5, #8]
 8006204:	e7eb      	b.n	80061de <__swsetup_r+0x1e>
 8006206:	4b24      	ldr	r3, [pc, #144]	; (8006298 <__swsetup_r+0xd8>)
 8006208:	429c      	cmp	r4, r3
 800620a:	bf08      	it	eq
 800620c:	68ec      	ldreq	r4, [r5, #12]
 800620e:	e7e6      	b.n	80061de <__swsetup_r+0x1e>
 8006210:	0758      	lsls	r0, r3, #29
 8006212:	d512      	bpl.n	800623a <__swsetup_r+0x7a>
 8006214:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006216:	b141      	cbz	r1, 800622a <__swsetup_r+0x6a>
 8006218:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800621c:	4299      	cmp	r1, r3
 800621e:	d002      	beq.n	8006226 <__swsetup_r+0x66>
 8006220:	4630      	mov	r0, r6
 8006222:	f7fe fd91 	bl	8004d48 <_free_r>
 8006226:	2300      	movs	r3, #0
 8006228:	6363      	str	r3, [r4, #52]	; 0x34
 800622a:	89a3      	ldrh	r3, [r4, #12]
 800622c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006230:	81a3      	strh	r3, [r4, #12]
 8006232:	2300      	movs	r3, #0
 8006234:	6063      	str	r3, [r4, #4]
 8006236:	6923      	ldr	r3, [r4, #16]
 8006238:	6023      	str	r3, [r4, #0]
 800623a:	89a3      	ldrh	r3, [r4, #12]
 800623c:	f043 0308 	orr.w	r3, r3, #8
 8006240:	81a3      	strh	r3, [r4, #12]
 8006242:	6923      	ldr	r3, [r4, #16]
 8006244:	b94b      	cbnz	r3, 800625a <__swsetup_r+0x9a>
 8006246:	89a3      	ldrh	r3, [r4, #12]
 8006248:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800624c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006250:	d003      	beq.n	800625a <__swsetup_r+0x9a>
 8006252:	4621      	mov	r1, r4
 8006254:	4630      	mov	r0, r6
 8006256:	f7fe fd2f 	bl	8004cb8 <__smakebuf_r>
 800625a:	89a0      	ldrh	r0, [r4, #12]
 800625c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006260:	f010 0301 	ands.w	r3, r0, #1
 8006264:	d00a      	beq.n	800627c <__swsetup_r+0xbc>
 8006266:	2300      	movs	r3, #0
 8006268:	60a3      	str	r3, [r4, #8]
 800626a:	6963      	ldr	r3, [r4, #20]
 800626c:	425b      	negs	r3, r3
 800626e:	61a3      	str	r3, [r4, #24]
 8006270:	6923      	ldr	r3, [r4, #16]
 8006272:	b943      	cbnz	r3, 8006286 <__swsetup_r+0xc6>
 8006274:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006278:	d1ba      	bne.n	80061f0 <__swsetup_r+0x30>
 800627a:	bd70      	pop	{r4, r5, r6, pc}
 800627c:	0781      	lsls	r1, r0, #30
 800627e:	bf58      	it	pl
 8006280:	6963      	ldrpl	r3, [r4, #20]
 8006282:	60a3      	str	r3, [r4, #8]
 8006284:	e7f4      	b.n	8006270 <__swsetup_r+0xb0>
 8006286:	2000      	movs	r0, #0
 8006288:	e7f7      	b.n	800627a <__swsetup_r+0xba>
 800628a:	bf00      	nop
 800628c:	20000010 	.word	0x20000010
 8006290:	0800681c 	.word	0x0800681c
 8006294:	0800683c 	.word	0x0800683c
 8006298:	080067fc 	.word	0x080067fc

0800629c <_close_r>:
 800629c:	b538      	push	{r3, r4, r5, lr}
 800629e:	4d06      	ldr	r5, [pc, #24]	; (80062b8 <_close_r+0x1c>)
 80062a0:	2300      	movs	r3, #0
 80062a2:	4604      	mov	r4, r0
 80062a4:	4608      	mov	r0, r1
 80062a6:	602b      	str	r3, [r5, #0]
 80062a8:	f7fa ff0f 	bl	80010ca <_close>
 80062ac:	1c43      	adds	r3, r0, #1
 80062ae:	d102      	bne.n	80062b6 <_close_r+0x1a>
 80062b0:	682b      	ldr	r3, [r5, #0]
 80062b2:	b103      	cbz	r3, 80062b6 <_close_r+0x1a>
 80062b4:	6023      	str	r3, [r4, #0]
 80062b6:	bd38      	pop	{r3, r4, r5, pc}
 80062b8:	20000864 	.word	0x20000864

080062bc <_fstat_r>:
 80062bc:	b538      	push	{r3, r4, r5, lr}
 80062be:	4d07      	ldr	r5, [pc, #28]	; (80062dc <_fstat_r+0x20>)
 80062c0:	2300      	movs	r3, #0
 80062c2:	4604      	mov	r4, r0
 80062c4:	4608      	mov	r0, r1
 80062c6:	4611      	mov	r1, r2
 80062c8:	602b      	str	r3, [r5, #0]
 80062ca:	f7fa ff0a 	bl	80010e2 <_fstat>
 80062ce:	1c43      	adds	r3, r0, #1
 80062d0:	d102      	bne.n	80062d8 <_fstat_r+0x1c>
 80062d2:	682b      	ldr	r3, [r5, #0]
 80062d4:	b103      	cbz	r3, 80062d8 <_fstat_r+0x1c>
 80062d6:	6023      	str	r3, [r4, #0]
 80062d8:	bd38      	pop	{r3, r4, r5, pc}
 80062da:	bf00      	nop
 80062dc:	20000864 	.word	0x20000864

080062e0 <_isatty_r>:
 80062e0:	b538      	push	{r3, r4, r5, lr}
 80062e2:	4d06      	ldr	r5, [pc, #24]	; (80062fc <_isatty_r+0x1c>)
 80062e4:	2300      	movs	r3, #0
 80062e6:	4604      	mov	r4, r0
 80062e8:	4608      	mov	r0, r1
 80062ea:	602b      	str	r3, [r5, #0]
 80062ec:	f7fa ff09 	bl	8001102 <_isatty>
 80062f0:	1c43      	adds	r3, r0, #1
 80062f2:	d102      	bne.n	80062fa <_isatty_r+0x1a>
 80062f4:	682b      	ldr	r3, [r5, #0]
 80062f6:	b103      	cbz	r3, 80062fa <_isatty_r+0x1a>
 80062f8:	6023      	str	r3, [r4, #0]
 80062fa:	bd38      	pop	{r3, r4, r5, pc}
 80062fc:	20000864 	.word	0x20000864

08006300 <_lseek_r>:
 8006300:	b538      	push	{r3, r4, r5, lr}
 8006302:	4d07      	ldr	r5, [pc, #28]	; (8006320 <_lseek_r+0x20>)
 8006304:	4604      	mov	r4, r0
 8006306:	4608      	mov	r0, r1
 8006308:	4611      	mov	r1, r2
 800630a:	2200      	movs	r2, #0
 800630c:	602a      	str	r2, [r5, #0]
 800630e:	461a      	mov	r2, r3
 8006310:	f7fa ff02 	bl	8001118 <_lseek>
 8006314:	1c43      	adds	r3, r0, #1
 8006316:	d102      	bne.n	800631e <_lseek_r+0x1e>
 8006318:	682b      	ldr	r3, [r5, #0]
 800631a:	b103      	cbz	r3, 800631e <_lseek_r+0x1e>
 800631c:	6023      	str	r3, [r4, #0]
 800631e:	bd38      	pop	{r3, r4, r5, pc}
 8006320:	20000864 	.word	0x20000864

08006324 <memcpy>:
 8006324:	440a      	add	r2, r1
 8006326:	4291      	cmp	r1, r2
 8006328:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800632c:	d100      	bne.n	8006330 <memcpy+0xc>
 800632e:	4770      	bx	lr
 8006330:	b510      	push	{r4, lr}
 8006332:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006336:	f803 4f01 	strb.w	r4, [r3, #1]!
 800633a:	4291      	cmp	r1, r2
 800633c:	d1f9      	bne.n	8006332 <memcpy+0xe>
 800633e:	bd10      	pop	{r4, pc}

08006340 <__malloc_lock>:
 8006340:	4801      	ldr	r0, [pc, #4]	; (8006348 <__malloc_lock+0x8>)
 8006342:	f7fe bc92 	b.w	8004c6a <__retarget_lock_acquire_recursive>
 8006346:	bf00      	nop
 8006348:	20000858 	.word	0x20000858

0800634c <__malloc_unlock>:
 800634c:	4801      	ldr	r0, [pc, #4]	; (8006354 <__malloc_unlock+0x8>)
 800634e:	f7fe bc8d 	b.w	8004c6c <__retarget_lock_release_recursive>
 8006352:	bf00      	nop
 8006354:	20000858 	.word	0x20000858

08006358 <_realloc_r>:
 8006358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800635c:	4680      	mov	r8, r0
 800635e:	4614      	mov	r4, r2
 8006360:	460e      	mov	r6, r1
 8006362:	b921      	cbnz	r1, 800636e <_realloc_r+0x16>
 8006364:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006368:	4611      	mov	r1, r2
 800636a:	f7fe bd59 	b.w	8004e20 <_malloc_r>
 800636e:	b92a      	cbnz	r2, 800637c <_realloc_r+0x24>
 8006370:	f7fe fcea 	bl	8004d48 <_free_r>
 8006374:	4625      	mov	r5, r4
 8006376:	4628      	mov	r0, r5
 8006378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800637c:	f000 f82e 	bl	80063dc <_malloc_usable_size_r>
 8006380:	4284      	cmp	r4, r0
 8006382:	4607      	mov	r7, r0
 8006384:	d802      	bhi.n	800638c <_realloc_r+0x34>
 8006386:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800638a:	d812      	bhi.n	80063b2 <_realloc_r+0x5a>
 800638c:	4621      	mov	r1, r4
 800638e:	4640      	mov	r0, r8
 8006390:	f7fe fd46 	bl	8004e20 <_malloc_r>
 8006394:	4605      	mov	r5, r0
 8006396:	2800      	cmp	r0, #0
 8006398:	d0ed      	beq.n	8006376 <_realloc_r+0x1e>
 800639a:	42bc      	cmp	r4, r7
 800639c:	4622      	mov	r2, r4
 800639e:	4631      	mov	r1, r6
 80063a0:	bf28      	it	cs
 80063a2:	463a      	movcs	r2, r7
 80063a4:	f7ff ffbe 	bl	8006324 <memcpy>
 80063a8:	4631      	mov	r1, r6
 80063aa:	4640      	mov	r0, r8
 80063ac:	f7fe fccc 	bl	8004d48 <_free_r>
 80063b0:	e7e1      	b.n	8006376 <_realloc_r+0x1e>
 80063b2:	4635      	mov	r5, r6
 80063b4:	e7df      	b.n	8006376 <_realloc_r+0x1e>
	...

080063b8 <_read_r>:
 80063b8:	b538      	push	{r3, r4, r5, lr}
 80063ba:	4d07      	ldr	r5, [pc, #28]	; (80063d8 <_read_r+0x20>)
 80063bc:	4604      	mov	r4, r0
 80063be:	4608      	mov	r0, r1
 80063c0:	4611      	mov	r1, r2
 80063c2:	2200      	movs	r2, #0
 80063c4:	602a      	str	r2, [r5, #0]
 80063c6:	461a      	mov	r2, r3
 80063c8:	f7fa fe46 	bl	8001058 <_read>
 80063cc:	1c43      	adds	r3, r0, #1
 80063ce:	d102      	bne.n	80063d6 <_read_r+0x1e>
 80063d0:	682b      	ldr	r3, [r5, #0]
 80063d2:	b103      	cbz	r3, 80063d6 <_read_r+0x1e>
 80063d4:	6023      	str	r3, [r4, #0]
 80063d6:	bd38      	pop	{r3, r4, r5, pc}
 80063d8:	20000864 	.word	0x20000864

080063dc <_malloc_usable_size_r>:
 80063dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063e0:	1f18      	subs	r0, r3, #4
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	bfbc      	itt	lt
 80063e6:	580b      	ldrlt	r3, [r1, r0]
 80063e8:	18c0      	addlt	r0, r0, r3
 80063ea:	4770      	bx	lr

080063ec <_init>:
 80063ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ee:	bf00      	nop
 80063f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063f2:	bc08      	pop	{r3}
 80063f4:	469e      	mov	lr, r3
 80063f6:	4770      	bx	lr

080063f8 <_fini>:
 80063f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063fa:	bf00      	nop
 80063fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063fe:	bc08      	pop	{r3}
 8006400:	469e      	mov	lr, r3
 8006402:	4770      	bx	lr
